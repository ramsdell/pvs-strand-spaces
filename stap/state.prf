(|state|
 (|state_induced_tpm_extend_role| 0
  (|state_induced_tpm_extend_role-1| NIL 3582813426
   ("" (SKOLEM 1 ("bu" "ra" "i" "f" "p" "n" "x"))
    (("" (FLATTEN)
      (("" (TYPEPRED "ra")
        (("" (DELETE -1)
          (("" (TYPEPRED "n")
            (("" (EXPAND "compat")
              (("" (FLATTEN)
                (("" (DELETE -3 -4)
                  (("" (LEMMA "enumerate_annotated_roles")
                    (("" (INST?)
                      (("" (SMASH)
                        (("1" (LEMMA "tpm_power_on_anno")
                          (("1" (INST?)
                            (("1" (SMASH)
                              (("1" (INST?)
                                (("1" (SPLIT)
                                  (("1" (SMASH) NIL NIL)
                                   ("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (LEMMA "tpm_create_key_anno")
                          (("2" (INST?) (("2" (SMASH) NIL NIL)) NIL)) NIL)
                         ("3" (LEMMA "tpm_decrypt_anno")
                          (("3" (INST?)
                            (("3" (SMASH)
                              (("3" (SKOLEM! -4)
                                (("3" (INST?)
                                  (("3" (SMASH)
                                    (("3" (LEMMA "no_circularity_in_extend")
                                      (("3" (INST?) (("3" (SMASH) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("4" (LEMMA "verifier_anno")
                          (("4" (INST?) (("4" (SMASH) NIL NIL)) NIL)) NIL)
                         ("5" (LEMMA "adversary_anno")
                          (("5" (INST?) (("5" (SMASH) NIL NIL)) NIL)) NIL)
                         ("6" (EXPAND "protocol_assignment?")
                          (("6" (INST?)
                            (("6" (EXPAND "member") (("6" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|member| CONST-DECL "bool" |sets| NIL)
    (|adversary_anno| FORMULA-DECL NIL |adversary| "../strand_spaces/")
    (|verifier_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|tpm_decrypt_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|pcr| DEF-DECL "mesg" |tpm| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|no_circularity_in_extend| FORMULA-DECL NIL |tpm| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|tpm_create_key_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|tpm_power_on_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|anno| TYPE-EQ-DECL NIL |protocols_and_state| "../state_spaces/")
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|boot| ADT-CONSTRUCTOR-DECL "(boot?)" |tpm| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|enumerate_annotated_roles| FORMULA-DECL NIL |annotated_roles| NIL)
    (|anno_node?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL) (|state| TYPE-DECL NIL |tpm| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|state_induced_tpm_decrypt_role| 0
  (|state_induced_tpm_decrypt_role-1| NIL 3582819187
   ("" (SKOLEM 1 ("bu" "ra" "i" "f" "p" "n" "x"))
    (("" (FLATTEN)
      (("" (EXPAND "compat")
        (("" (FLATTEN)
          (("" (DELETE -1 -2)
            (("" (TYPEPRED "ra")
              (("" (INST?)
                (("" (DELETE -1)
                  (("" (TYPEPRED "n")
                    (("" (LEMMA "enumerate_annotated_roles")
                      (("" (INST?)
                        (("" (SMASH)
                          (("1" (LEMMA "tpm_power_on_anno")
                            (("1" (INST?)
                              (("1" (SMASH)
                                (("1" (INST?)
                                  (("1" (SPLIT)
                                    (("1" (REPLACE -1) (("1" (SMASH) NIL NIL))
                                      NIL)
                                     ("2" (PROPAX) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (LEMMA "tpm_extend_anno")
                            (("2" (INST?)
                              (("2" (SMASH)
                                (("2" (SKOLEM! -4)
                                  (("2" (INST?)
                                    (("2" (SMASH)
                                      (("2" (REPLACE -8)
                                        (("2"
                                          (LEMMA "no_circularity_in_extend")
                                          (("2" (INST?) (("2" (SMASH) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (LEMMA "tpm_create_key_anno")
                            (("3" (INST?) (("3" (SMASH) NIL NIL)) NIL)) NIL)
                           ("4" (LEMMA "verifier_anno")
                            (("4" (INST?) (("4" (SMASH) NIL NIL)) NIL)) NIL)
                           ("5" (LEMMA "adversary_anno")
                            (("5" (INST?) (("5" (SMASH) NIL NIL)) NIL)) NIL)
                           ("6" (EXPAND "protocol_assignment?")
                            (("6" (INST?)
                              (("6" (EXPAND "member") (("6" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|enumerate_annotated_roles| FORMULA-DECL NIL |annotated_roles| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boot| ADT-CONSTRUCTOR-DECL "(boot?)" |tpm| NIL)
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|tpm_power_on_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|no_circularity_in_extend| FORMULA-DECL NIL |tpm| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pcr| DEF-DECL "mesg" |tpm| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |tpm| NIL)
    (|tpm_extend_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|tpm_create_key_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|verifier_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|adversary_anno| FORMULA-DECL NIL |adversary| "../strand_spaces/")
    (|member| CONST-DECL "bool" |sets| NIL)
    (|anno_node?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|anno| TYPE-EQ-DECL NIL |protocols_and_state| "../state_spaces/")
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/"))
   SHOSTAK))
 (|stable_boot_extend_anno| 0
  (|stable_boot_extend_anno-1| NIL 3582018137
   ("" (SKOLEM!)
    (("" (FLATTEN)
      (("" (EXPAND "compatible")
        (("" (EXPAND "compat")
          (("" (SKOLEM!)
            (("" (FLATTEN)
              (("" (INST-CP -2 "n0!1" "n1!1")
                (("" (INST-CP -4 "n0!1" "a0!1")
                  (("" (INST-CP -4 "n1!1" "a1!1")
                    (("" (SMASH)
                      (("" (EXPAND "subset?")
                        (("" (INST -10 "(p!1(f!1(n0!1)), p!1(1 + f!1(n0!1)))")
                          ((""
                            (INST -11 "(p!1(f!1(n1!1)), p!1(1 + f!1(n1!1)))")
                            (("" (EXPAND "member")
                              (("" (LEMMA "stable_boot_extend")
                                ((""
                                  (INST -1 "p!1" "x!1" "1 + f!1(n0!1)"
                                   "f!1(n1!1)")
                                  (("" (SMASH)
                                    (("" (SKOLEM -3 "j")
                                      (("" (FLATTEN)
                                        (("" (EXPAND "bijective?")
                                          (("" (EXPAND "surjective?")
                                            (("" (FLATTEN)
                                              (("" (INST-CP -8 "j")
                                                (("1" (SKOLEM -9 "x")
                                                  (("1" (REPLACE -9 :DIR RL)
                                                    (("1" (DELETE -9)
                                                      (("1" (INST 1 "x")
                                                        (("1" (TYPEPRED "x")
                                                          (("1"
                                                            (INST-CP -10 "n0!1"
                                                             "x")
                                                            (("1"
                                                              (INST-CP -10 "x"
                                                               "n1!1")
                                                              (("1" (SMASH)
                                                                (("1"
                                                                  (SKOLEM 1
                                                                   "n")
                                                                  (("1"
                                                                    (INST-CP
                                                                     -10 "x"
                                                                     "n")
                                                                    (("1"
                                                                      (INST-CP
                                                                       -10 "n"
                                                                       "n1!1")
                                                                      (("1"
                                                                        (INST-CP
                                                                         -7
                                                                         "f!1(n)")
                                                                        (("1"
                                                                          (INST-CP
                                                                           -7
                                                                           "1+f!1(n)")
                                                                          (("1"
                                                                            (SMASH)
                                                                            (("1"
                                                                              (LEMMA
                                                                               "state_induced_tpm_decrypt_role")
                                                                              (("1"
                                                                                (INST-CP
                                                                                 -8
                                                                                 "f!1(n)")
                                                                                (("1"
                                                                                  (INST-CP
                                                                                   -8
                                                                                   "1+f!1(n)")
                                                                                  (("1"
                                                                                    (SMASH)
                                                                                    (("1"
                                                                                      (INST
                                                                                       -1
                                                                                       "bu!1"
                                                                                       "ra!1"
                                                                                       "i!1"
                                                                                       "f!1"
                                                                                       "p!1"
                                                                                       "n"
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "compat")
                                                                                        (("1"
                                                                                          (SMASH)
                                                                                          (("1"
                                                                                            (LEMMA
                                                                                             "tpm_decrypt_anno")
                                                                                            (("1"
                                                                                              (INST
                                                                                               -1
                                                                                               "bu!1"
                                                                                               "ra!1"
                                                                                               "n")
                                                                                              (("1"
                                                                                                (TYPEPRED
                                                                                                 "n")
                                                                                                (("1"
                                                                                                  (SMASH)
                                                                                                  (("1"
                                                                                                    (SKOLEM!
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (INST-CP
                                                                                                       -6
                                                                                                       "n"
                                                                                                       "{t: trans | pcr(t`1) = current_value!1 AND t`2 = t`1}")
                                                                                                      (("1"
                                                                                                        (SMASH)
                                                                                                        (("1"
                                                                                                          (REPLACE
                                                                                                           -7
                                                                                                           :DIR
                                                                                                           RL)
                                                                                                          (("1"
                                                                                                            (CASE-REPLACE
                                                                                                             "{t: trans | pcr(t`1) = pcr(p!1(f!1(n))) AND t`2 = t`1}={t: trans | t`1 = extend(x!1, boot) AND t`2 = t`1}")
                                                                                                            (("1"
                                                                                                              (DELETE
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (APPLY-EXTENSIONALITY
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (DELETE
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (SMASH)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (LEMMA
                                                                   "state_induced_tpm_extend_role")
                                                                  (("2"
                                                                    (INST -1
                                                                     "bu!1"
                                                                     "ra!1"
                                                                     "i!1"
                                                                     "f!1"
                                                                     "p!1" "x"
                                                                     "x!1")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "compat")
                                                                      (("2"
                                                                        (INST
                                                                         -8
                                                                         "1+f!1(x)")
                                                                        (("2"
                                                                          (SMASH)
                                                                          (("2"
                                                                            (LEMMA
                                                                             "tpm_extend_anno")
                                                                            (("2"
                                                                              (INST?)
                                                                              (("2"
                                                                                (SPLIT
                                                                                 -1)
                                                                                (("1"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (FLATTEN)
                                                                                  (("2"
                                                                                    (SKOLEM!
                                                                                     -2)
                                                                                    (("2"
                                                                                      (INST-CP
                                                                                       -4
                                                                                       "x"
                                                                                       "{t: trans |
                     pcr(t`1) = current_value!1 AND
                      t`2 = extend(value!1, t`1)}")
                                                                                      (("2"
                                                                                        (SMASH)
                                                                                        (("2"
                                                                                          (REPLACE
                                                                                           -5
                                                                                           :DIR
                                                                                           RL)
                                                                                          (("2"
                                                                                            (SMASH)
                                                                                            (("2"
                                                                                              (CASE-REPLACE
                                                                                               "{t: trans |
                     t`1 = p!1(f!1(x)) AND t`2 = extend(value!1, t`1)}={t: trans | t`1 = boot AND t`2 = extend(x!1, boot)}")
                                                                                              (("2"
                                                                                                (DELETE
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (APPLY-EXTENSIONALITY
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (DELETE
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (SMASH)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("3"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SMASH) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|state_induced_tpm_extend_role| FORMULA-DECL NIL |state| NIL)
    (|tpm_extend_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|state_induced_tpm_decrypt_role| FORMULA-DECL NIL |state| NIL)
    (|pcr| DEF-DECL "mesg" |tpm| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |tpm| NIL)
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|boot| ADT-CONSTRUCTOR-DECL "(boot?)" |tpm| NIL)
    (|tpm_decrypt_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|i!1| SKOLEM-CONST-DECL "nat" |state| NIL)
    (|j| SKOLEM-CONST-DECL "nat" |state| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|stable_boot_extend| FORMULA-DECL NIL |tpm| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|anno_node?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |protocols_and_state| "../state_spaces/")
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL) (|state| TYPE-DECL NIL |tpm| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/"))
   SHOSTAK))
 (|tpm_power_on_inst_role_helper_TCC1| 0
  (|tpm_power_on_inst_role_helper_TCC1-1| NIL 3580489275
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|tpm_power_on_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_power_on_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_power_on_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|tpm_power_on_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_power_on_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|power_on| CONST-DECL "tag" |annotated_roles| NIL)
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|tpm_power_on_inst_role_helper_TCC2| 0
  (|tpm_power_on_inst_role_helper_TCC2-1| NIL 3580489275
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|tpm_power_on_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_power_on_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_power_on_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|tpm_power_on_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_power_on_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|power_on| CONST-DECL "tag" |annotated_roles| NIL)
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|tpm_power_on_inst_role_helper_TCC3| 0
  (|tpm_power_on_inst_role_helper_TCC3-1| NIL 3580489275
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|tpm_power_on_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_power_on_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_power_on_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|tpm_power_on_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_power_on_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|power_on| CONST-DECL "tag" |annotated_roles| NIL)
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|tpm_power_on_inst_role_helper_TCC4| 0
  (|tpm_power_on_inst_role_helper_TCC4-1| NIL 3580489275
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|tpm_power_on_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_power_on_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_power_on_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|tpm_power_on_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_power_on_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|power_on| CONST-DECL "tag" |annotated_roles| NIL)
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|tpm_power_on_inst_role_helper| 0
  (|tpm_power_on_inst_role_helper-1| NIL 3580489275
   ("" (SKOLEM 1 ("bu" "r" "z0" "z1" "pcrkey"))
    (("" (FLATTEN)
      (("" (SKOLEM -1 "ri")
        (("" (TYPEPRED "ri")
          (("" (TYPEPRED "r")
            (("" (LEMMA "enumerate_annotated_roles")
              (("" (INST?)
                (("" (LEMMA "enumerate_adversary_roles")
                  (("" (INST?)
                    (("" (FLATTEN)
                      (("" (SMASH)
                        (("1" (REPLACE -2)
                          (("1" (DELETE -1 -2 -3 -9 -10 -11 1)
                            (("1" (GRIND) NIL NIL)) NIL))
                          NIL)
                         ("2" (REPLACE -2)
                          (("2" (DELETE -1 -2 -3 -9 -10 -11 1)
                            (("2" (GRIND) NIL NIL)) NIL))
                          NIL)
                         ("3" (REPLACE -2)
                          (("3" (DELETE 1 -1 -2 -3 -9 -10)
                            (("3" (GRIND) NIL NIL)) NIL))
                          NIL)
                         ("4" (REPLACE -2)
                          (("4" (DELETE 1 -1 -2 -3 -9 -10)
                            (("4" (GRIND) NIL NIL)) NIL))
                          NIL)
                         ("5" (REPLACE -2)
                          (("5" (DELETE 1 -1 -2 -3 -9 -11)
                            (("5" (GRIND)
                              (("5" (DECOMPOSE-EQUALITY -9) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("6" (REPLACE -2)
                          (("6" (DELETE 1 -1 -2 -3 -9 -10)
                            (("6" (GRIND) NIL NIL)) NIL))
                          NIL)
                         ("7" (REPLACE -2)
                          (("7" (DELETE 1 -1 -2 -3 -9 -10)
                            (("7" (GRIND) NIL NIL)) NIL))
                          NIL)
                         ("8" (REPLACE -2)
                          (("8" (DELETE + -1 -2 -8 -9) (("8" (GRIND) NIL NIL))
                            NIL))
                          NIL)
                         ("9" (REPLACE -2)
                          (("9" (DELETE + -1 -2 -8 -10)
                            (("9" (GRIND)
                              (("1" (DECOMPOSE-EQUALITY -11) NIL NIL)
                               ("2" (DECOMPOSE-EQUALITY -10) NIL NIL)
                               ("3" (DECOMPOSE-EQUALITY -10) NIL NIL)
                               ("4" (DECOMPOSE-EQUALITY -11) NIL NIL)
                               ("5" (DECOMPOSE-EQUALITY -10) NIL NIL)
                               ("6" (DECOMPOSE-EQUALITY -10) NIL NIL)
                               ("7" (DECOMPOSE-EQUALITY -11) NIL NIL)
                               ("8" (DECOMPOSE-EQUALITY -10) NIL NIL)
                               ("9" (DECOMPOSE-EQUALITY -10) NIL NIL)
                               ("10" (DECOMPOSE-EQUALITY -11) NIL NIL)
                               ("11" (DECOMPOSE-EQUALITY -10) NIL NIL)
                               ("12" (DECOMPOSE-EQUALITY -10) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("10" (REPLACE -2)
                          (("10" (DELETE + -1 -2 -8 -9)
                            (("10" (GRIND) NIL NIL)) NIL))
                          NIL)
                         ("11" (REPLACE -2)
                          (("11" (DELETE + -1 -2 -8 -10)
                            (("11" (GRIND)
                              (("1" (DECOMPOSE-EQUALITY -12) NIL NIL)
                               ("2" (DECOMPOSE-EQUALITY -12) NIL NIL)
                               ("3" (DECOMPOSE-EQUALITY -12) NIL NIL)
                               ("4" (DECOMPOSE-EQUALITY -12) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|enumerate_annotated_roles| FORMULA-DECL NIL |annotated_roles| NIL)
    (|enumerate_adversary_roles| FORMULA-DECL NIL |adversary|
     "../strand_spaces/")
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|verifier_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|verifier_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|verifier_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|verifier_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|verifier_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|enc?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|en| ADT-CONSTRUCTOR-DECL "[[mesg, key] -> (enc?)]" |init_alg|
     "../strand_spaces/")
    (|tpm_decrypt_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_decrypt_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_decrypt_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_decrypt_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_decrypt_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|decrypt| CONST-DECL "tag" |annotated_roles| NIL)
    (|k!1| SKOLEM-CONST-DECL "akey" |state| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_restrict| APPLICATION-JUDGEMENT "finite_set[S]"
     |restrict_set_props| NIL)
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|create_key| CONST-DECL "tag" |annotated_roles| NIL)
    (|created| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_create_key_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_create_key_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_create_key_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|tpm_extend_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_extend_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_extend_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|r| SKOLEM-CONST-DECL "(annotated_roles)" |state| NIL)
    (|ri| SKOLEM-CONST-DECL "(r)" |state| NIL)
    (|k!1| SKOLEM-CONST-DECL "key" |state| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|z0| SKOLEM-CONST-DECL "strand[mesg, carried_by?](bu`space)" |state| NIL)
    (|bu| SKOLEM-CONST-DECL "bundle[mesg, carried_by?]" |state| NIL)
    (|dec_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|key| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|hash?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|enc_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|sep_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|sep_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|t| SHARED-ADT-ACCESSOR-DECL "[event -> mesg]" |traces|
     "../strand_spaces/")
    (|recv?| ADT-RECOGNIZER-DECL "[event -> boolean]" |traces|
     "../strand_spaces/")
    (|recv| ADT-CONSTRUCTOR-DECL "[mesg -> (recv?)]" |traces|
     "../strand_spaces/")
    (|pair?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|pr| ADT-CONSTRUCTOR-DECL "[[mesg, mesg] -> (pair?)]" |init_alg|
     "../strand_spaces/")
    (|tg| ADT-CONSTRUCTOR-DECL "[nat -> (tag?)]" |init_alg|
     "../strand_spaces/")
    (|pair_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|pair_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|hash_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|hash_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tag| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|tag?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|tag_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|tag_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|atom| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|atom?| CONST-DECL "bool" |init_alg| "../strand_spaces/")
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|tpm_power_on_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|pcr| DEF-DECL "mesg" |tpm| NIL)
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|power_on| CONST-DECL "tag" |annotated_roles| NIL)
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_index?| CONST-DECL "bool" |traces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|create_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|simple_role_item| CONST-DECL "role_item" |roles| "../strand_spaces/")
    (|no_annotations| DEF-DECL "annotations" |roles| "../strand_spaces/")
    (|no_assumptions| DEF-DECL "assumptions" |roles| "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|tpm_power_on_inst_rew| FORMULA-DECL NIL |strands| NIL))
   SHOSTAK))
 (|tpm_power_on_inst_role| 0
  (|tpm_power_on_inst_role-1| NIL 3580487307
   ("" (SKOLEM!)
    (("" (FLATTEN)
      (("" (LEMMA "tpm_power_on_inst_role_helper")
        (("" (INST -1 "bu!1" "ra!1(z!1)" "z!1" "z!1" "pcrkey!1")
          (("1" (TYPEPRED "ra!1")
            (("1" (EXPAND "role_assignment?")
              (("1" (INST?) (("1" (SMASH) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (TYPEPRED "ra!1")
            (("2" (DELETE -1 -3 2)
              (("2" (EXPAND "protocol_assignment?")
                (("2" (INST?)
                  (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|z!1| SKOLEM-CONST-DECL "strand[mesg, carried_by?](bu!1`space)" |state|
     NIL)
    (|ra!1| SKOLEM-CONST-DECL "assignment(bu!1)" |state| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|bu!1| SKOLEM-CONST-DECL "bundle[mesg, carried_by?]" |state| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL) (|state| TYPE-DECL NIL |tpm| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|tpm_power_on_inst_rew| FORMULA-DECL NIL |strands| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|tpm_power_on_inst_role_helper| FORMULA-DECL NIL |state| NIL))
   SHOSTAK))
 (|long_strands_are_tpm_decrypt| 0
  (|long_strands_are_tpm_decrypt-1| NIL 3580484625
   ("" (SKOLEM!)
    (("" (FLATTEN)
      (("" (TYPEPRED "r!1")
        (("" (LEMMA "enumerate_annotated_roles")
          (("" (INST?)
            (("" (LEMMA "enumerate_adversary_roles")
              (("" (INST?) (("" (FLATTEN) (("" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|enumerate_annotated_roles| FORMULA-DECL NIL |annotated_roles| NIL)
    (|enumerate_adversary_roles| FORMULA-DECL NIL |adversary|
     "../strand_spaces/")
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|atom?| CONST-DECL "bool" |init_alg| "../strand_spaces/")
    (|atom| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|create_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|simple_role_item| CONST-DECL "role_item" |roles| "../strand_spaces/")
    (|no_annotations| DEF-DECL "annotations" |roles| "../strand_spaces/")
    (|no_assumptions| DEF-DECL "assumptions" |roles| "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|role_pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_index?| CONST-DECL "bool" |traces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|tag?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|tag| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|tag_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|tag_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|hash_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|hash_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|pair_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|pair_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|sep_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|sep_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|hash?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|key| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|enc_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|dec_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|power_on| CONST-DECL "tag" |annotated_roles| NIL)
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|pcr| DEF-DECL "mesg" |tpm| NIL)
    (|tpm_power_on_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_power_on_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_power_on_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_power_on_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_power_on_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_extend_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_extend_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_extend_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|create_key| CONST-DECL "tag" |annotated_roles| NIL)
    (|created| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_create_key_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_create_key_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_create_key_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|decrypt| CONST-DECL "tag" |annotated_roles| NIL)
    (|verifier_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|verifier_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|verifier_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|verifier_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|verifier_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL) (|state| TYPE-DECL NIL |tpm| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|tpm_decrypt_inst_role| 0
  (|tpm_decrypt_inst_role-1| NIL 3580484887
   ("" (SKOLEM!)
    (("" (LEMMA "long_strands_are_tpm_decrypt")
      (("" (INST -1 "bu!1`space" "z!1" "4" "ra!1(z!1)")
        (("1" (TYPEPRED "ra!1")
          (("1" (EXPAND "role_assignment?")
            (("1" (INST -1 "z!1")
              (("1" (EXPAND "role_pred")
                (("1" (EXPAND "tpm_decrypt_inst")
                  (("1" (EXPAND "pred")
                    (("1" (FLATTEN) (("1" (SMASH) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SMASH)
          (("2" (TYPEPRED "ra!1")
            (("2" (EXPAND "protocol_assignment?")
              (("2" (INST?)
                (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|long_strands_are_tpm_decrypt| FORMULA-DECL NIL |state| NIL)
    (|tpm_decrypt_inst_rew| FORMULA-DECL NIL |strands| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|tpm_decrypt_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bu!1| SKOLEM-CONST-DECL "bundle[mesg, carried_by?]" |state| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|ra!1| SKOLEM-CONST-DECL "assignment(bu!1)" |state| NIL)
    (|z!1| SKOLEM-CONST-DECL "strand[mesg, carried_by?](bu!1`space)" |state|
     NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/"))
   SHOSTAK))
 (|tpm_power_on_inst_anno_TCC1| 0
  (|tpm_power_on_inst_anno_TCC1-1| NIL 3580413591 ("" (SUBTYPE-TCC) NIL NIL)
   ((|tpm_power_on_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|tpm_power_on_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_power_on_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|tpm_power_on_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_power_on_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|power_on| CONST-DECL "tag" |annotated_roles| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|tpm_power_on_inst_anno| 0
  (|tpm_power_on_inst_anno-1| NIL 3580419276
   ("" (SKOLEM!)
    (("" (FLATTEN)
      (("" (LEMMA "tpm_power_on_inst_role")
        (("" (INST?)
          (("" (INST?)
            (("" (SPLIT)
              (("1" (TYPEPRED "ra!1")
                (("1" (EXPAND "role_assignment?")
                  (("1" (INST?)
                    (("1" (EXPAND "annotations")
                      (("1" (SKOLEM -1 "ri")
                        (("1" (INST?)
                          (("1" (INST 1 "ri")
                            (("1" (TYPEPRED "ri")
                              (("1" (REPLACE -4)
                                (("1" (EXPAND "tpm_power_on_role")
                                  (("1" (SKOLEM! -1)
                                    (("1" (REPLACE -1)
                                      (("1" (DELETE -1 -3 -4)
                                        (("1" (SPLIT)
                                          (("1" (PROPAX) NIL NIL)
                                           ("2" (DELETE -1 -2)
                                            (("2"
                                              (CASE-REPLACE
                                               "up({t: trans | t`2 = boot})=up({t: trans | pcr(t`2) = pcr(boot)})")
                                              (("1" (DELETE -1)
                                                (("1" (GRIND) NIL NIL)) NIL)
                                               ("2" (DELETE 2)
                                                (("2" (SMASH) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|power_on| CONST-DECL "tag" |annotated_roles| NIL)
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|tpm_power_on_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_power_on_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|no_assumptions| DEF-DECL "assumptions" |roles| "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|tpm_power_on_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_power_on_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL)
    (|up| ADT-CONSTRUCTOR-DECL "[T -> (up?)]" |lift_adt| NIL)
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|boot| ADT-CONSTRUCTOR-DECL "(boot?)" |tpm| NIL)
    (|pcr| DEF-DECL "mesg" |tpm| NIL)
    (|tpm_power_on_role| CONST-DECL "bool" |annotated_roles| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL) (|state| TYPE-DECL NIL |tpm| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|tpm_power_on_inst_role| FORMULA-DECL NIL |state| NIL))
   SHOSTAK))
 (|tpm_decrypt_inst_anno_TCC1| 0
  (|tpm_decrypt_inst_anno_TCC1-1| NIL 3580413591 ("" (SUBTYPE-TCC) NIL NIL)
   ((|tpm_decrypt_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|tpm_decrypt_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_decrypt_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|tpm_decrypt_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_decrypt_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|created| CONST-DECL "tag" |annotated_roles| NIL)
    (|decrypt| CONST-DECL "tag" |annotated_roles| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|tpm_decrypt_inst_anno| 0
  (|tpm_decrypt_inst_anno-1| NIL 3580485840
   ("" (SKOLEM!)
    (("" (FLATTEN)
      (("" (LEMMA "tpm_decrypt_inst_role")
        (("" (INST?)
          (("" (INST?)
            (("" (SPLIT)
              (("1" (EXPAND "annotations")
                (("1" (EXPAND "tpm_decrypt_inst")
                  (("1"
                    (INST 1
                     "tpm_decrypt_role_item(m!1, current_value!1, k!1, aik!1,
                                 pcrkey!1)")
                    (("1" (EXPAND "pred")
                      (("1" (SMASH)
                        (("1" (EXPAND "tpm_decrypt_role_item")
                          (("1" (SMASH) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (REPLACE -1)
                      (("2" (DELETE -1)
                        (("2" (EXPAND "tpm_decrypt_role")
                          (("2" (INST?) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|tpm_decrypt_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_decrypt_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_index?| CONST-DECL "bool" |traces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|tpm_decrypt_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|no_assumptions| DEF-DECL "assumptions" |roles| "../strand_spaces/")
    (|tpm_decrypt_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_decrypt_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|created| CONST-DECL "tag" |annotated_roles| NIL)
    (|decrypt| CONST-DECL "tag" |annotated_roles| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|bu!1| SKOLEM-CONST-DECL "bundle[mesg, carried_by?]" |state| NIL)
    (|ra!1| SKOLEM-CONST-DECL "assignment(bu!1)" |state| NIL)
    (|z!1| SKOLEM-CONST-DECL "strand[mesg, carried_by?](bu!1`space)" |state|
     NIL)
    (|tpm_decrypt_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|m!1| SKOLEM-CONST-DECL "mesg" |state| NIL)
    (|current_value!1| SKOLEM-CONST-DECL "mesg" |state| NIL)
    (|k!1| SKOLEM-CONST-DECL "akey" |state| NIL)
    (|aik!1| SKOLEM-CONST-DECL "akey" |state| NIL)
    (|pcrkey!1| SKOLEM-CONST-DECL "skey" |state| NIL)
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL) (|state| TYPE-DECL NIL |tpm| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|tpm_decrypt_inst_role| FORMULA-DECL NIL |state| NIL))
   SHOSTAK)))

