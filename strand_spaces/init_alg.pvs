% Message algebra as an initial algebra

% John D. Ramsdell -- The MITRE Corporation -- November 2012

% This algebra is a simplification of the Basic Crypto Algebra in
% which the sorts name has been dropped, tags have there own sort.
% Base sorted messages are called atoms, and in this specification,
% atom was used for the sort instead of base.

% This algebra is unlike the Basic Crypto Algebra in that there are no
% variables, but it is instead generated only by constants and thereby
% making it an initial algebra.  As a result, constants for all the
% atom sorted messages have been added to the signature.

% Copyright (C) 2014 The MITRE Corporation.
% All rights reserved.
% See ../license.txt for terms.

init_alg: theory
begin

  % The top algebra sort is mesg, and the base sorts are akey, skey,
  % text, and data.  When specifying CPSA roles or shape analysis
  % sentences, use only these sorts.

  % Asymmetric keys come in pairs for each n: ak(n) and ik(n).
  % Subsort cmpd is for compound messages and is not used.
  mesg: datatype with subtypes key, text, data, tag, cmpd
  begin
    ak(n: nat): akey? : key
    ik(n: nat): ikey? : key
    sk(n: nat): skey? : key
    hs(n: mesg): hash? : key
    tx(n: nat): text? : text
    dt(n: nat): data? : data
    tg(n: nat): tag?: tag
    pr(fst: mesg, snd: mesg): pair? : cmpd
    en(plt: mesg, ky: key): enc? : cmpd
  end mesg

  % Keys are further classified as being symmetric or asymmetric.

  % Symmetric keys
  skey: type = (skey?)

  % Asymmetric keys come in pairs.  See the definition of invk below.
  akey: type = {x: mesg | akey?(x) or ikey?(x)}
  judgement (akey?) subtype_of akey
  judgement (ikey?) subtype_of akey

  % The inverse of a key
  invk(k: key): key =
    cases k of
      ak(n): ik(n),
      ik(n): ak(n),
      sk(n): sk(n),
      hs(n): hs(n)
    endcases

  invk_akey: lemma forall(n: nat): invk(ak(n)) = ik(n)
  invk_ikey: lemma forall(n: nat): invk(ik(n)) = ak(n)
  invk_skey: lemma forall(k: skey): invk(k) = k
  invk_hash: lemma forall(h: (hash?)): invk(h) = h

  auto_rewrite+ invk_akey, invk_ikey, invk_skey, invk_hash

  invk_invk_identity: theorem forall(k: key): invk(invk(k)) = k

  auto_rewrite+ invk_invk_identity

  invk_bijective: theorem bijective?(invk)

  not_akey_invk_identity: theorem
    forall(k: key): akey?(k) or ikey?(k) or invk(k) = k

  % Atoms are the non-compound terms omitting hashing.
  atom?(x: mesg): bool =
    akey?(x) or ikey?(x) or skey?(x) or text?(x) or data?(x)
  % This type is call base in other documents.
  atom: type = (atom?)
  judgement akey subtype_of atom
  judgement skey subtype_of atom
  judgement text subtype_of atom
  judgement data subtype_of atom

  % Is message x carried by message y?
  carried_by?(x, y: mesg): recursive bool =
  x = y or
  cases y of
    pr(f, s): carried_by?(x, f) or carried_by?(x, s),
    en(p, k): carried_by?(x, p)
  else false
  endcases
  measure y by <<

end init_alg
