(|state|
 (|pcr_TCC1| 0
  (|pcr_TCC1-1| NIL 3598440997 ("" (TERMINATION-TCC) NIL NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[state])" |state| NIL)) NIL))
 (|pcr_injective| 0
  (|pcr_injective-1| NIL 3586756835
   ("" (INDUCT "st0")
    (("1" (SKOLEM!) (("1" (GRIND) NIL NIL)) NIL)
     ("2" (SKOLEM!)
      (("2" (FLATTEN)
        (("2" (SKOLEM!)
          (("2" (SMASH)
            (("2" (EXPAND "pcr" -2)
              (("2" (SMASH)
                (("2" (DECOMPOSE-EQUALITY -2)
                  (("2" (DECOMPOSE-EQUALITY -1)
                    (("2" (REPLACE -1)
                      (("2" (INST?)
                        (("2" (SMASH)
                          (("2" (REPLACE -3)
                            (("2" (DECOMPOSE-EQUALITY 2) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|hash?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|key| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|n| ADT-ACCESSOR-DECL "[key -> mesg]" |init_alg| "../strand_spaces/")
    (|hs| ADT-CONSTRUCTOR-DECL "[mesg -> (hash?)]" |init_alg|
     "../strand_spaces/")
    (|pair?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|pr| ADT-CONSTRUCTOR-DECL "[[mesg, mesg] -> (pair?)]" |init_alg|
     "../strand_spaces/")
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|m| ADT-ACCESSOR-DECL "[(extend?) -> mesg]" |state| NIL)
    (|st| ADT-ACCESSOR-DECL "[(extend?) -> state]" |state| NIL)
    (|state_extend_extensionality| FORMULA-DECL NIL |state| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |state| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|fst| ADT-ACCESSOR-DECL "[(pair?) -> mesg]" |init_alg|
     "../strand_spaces/")
    (|snd| ADT-ACCESSOR-DECL "[(pair?) -> mesg]" |init_alg|
     "../strand_spaces/")
    (|state_induction| FORMULA-DECL NIL |state| NIL)
    (|pcr| DEF-DECL "mesg" |state| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| TYPE-DECL NIL |state| NIL))
   SHOSTAK))
 (|lab_injective| 0
  (|lab_injective-1| NIL 3600197125
   ("" (SKOLEM 1 ("l0" "l1"))
    (("" (GRIND)
      (("1" (DECOMPOSE-EQUALITY -3) (("1" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)
       ("2" (DECOMPOSE-EQUALITY -2)
        (("2" (DECOMPOSE-EQUALITY -1)
          (("1" (GRIND) NIL NIL)
           ("2" (EXPAND "tag") (("2" (PROPAX) NIL NIL)) NIL)
           ("3" (EXPAND "tag") (("3" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL)
       ("3" (DECOMPOSE-EQUALITY -2)
        (("3" (DECOMPOSE-EQUALITY -1)
          (("1" (SMASH) NIL NIL)
           ("2" (EXPAND "tag") (("2" (PROPAX) NIL NIL)) NIL)
           ("3" (EXPAND "tag") (("3" (PROPAX) NIL NIL)) NIL))
          NIL))
        NIL)
       ("4" (DECOMPOSE-EQUALITY -1) (("4" (APPLY-EXTENSIONALITY) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|lab| CONST-DECL "mesg" |state| NIL)
    (|label_exl_extensionality| FORMULA-DECL NIL |state| NIL)
    (|snd| ADT-ACCESSOR-DECL "[(pair?) -> mesg]" |init_alg|
     "../strand_spaces/")
    (|m| SHARED-ADT-ACCESSOR-DECL "[{x: label | exl?(x) OR obl?(x)} -> mesg]"
     |state| NIL)
    (|obl?| ADT-RECOGNIZER-DECL "[label -> boolean]" |state| NIL)
    (|exl?| ADT-RECOGNIZER-DECL "[label -> boolean]" |state| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|label| TYPE-DECL NIL |state| NIL)
    (|tg| ADT-CONSTRUCTOR-DECL "[nat -> (tag?)]" |init_alg|
     "../strand_spaces/")
    (|tag?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|pr| ADT-CONSTRUCTOR-DECL "[[mesg, mesg] -> (pair?)]" |init_alg|
     "../strand_spaces/")
    (|fst| ADT-ACCESSOR-DECL "[(pair?) -> mesg]" |init_alg|
     "../strand_spaces/")
    (|pair?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|n| SHARED-ADT-ACCESSOR-DECL
     "[{x: mesg | key(x) OR text(x) OR data(x) OR tag(x)} -> nat]" |init_alg|
     "../strand_spaces/")
    (|tag| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|data| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|text| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|key| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|label_obl_extensionality| FORMULA-DECL NIL |state| NIL))
   SHOSTAK))
 (|no_circularity_in_extend| 0
  (|no_circularity_in_extend-1| NIL 3579441108
   ("" (SKOLEM!)
    (("" (LEMMA "state_induction")
      (("" (INST -1 "lambda(st:state):st /= extend(m!1,st)")
        (("" (SMASH)
          (("1" (INST?) NIL NIL)
           ("2" (SKOLEM!)
            (("2" (DELETE 2)
              (("2" (FLATTEN)
                (("2" (DECOMPOSE-EQUALITY -1)
                  (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|state_induction| FORMULA-DECL NIL |state| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|m| ADT-ACCESSOR-DECL "[(extend?) -> mesg]" |state| NIL)
    (|st| ADT-ACCESSOR-DECL "[(extend?) -> state]" |state| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |state| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| TYPE-DECL NIL |state| NIL))
   SHOSTAK))
 (|no_circularity_in_double_extend| 0
  (|no_circularity_in_double_extend-1| NIL 3599494440
   ("" (SKOLEM!)
    (("" (LEMMA "state_induction")
      ((""
        (INST -1
         "lambda(st:state):forall(m0,m1:mesg):st/=extend(m0,extend(m1,st))")
        (("" (SMASH)
          (("1" (INST?) NIL NIL)
           ("2" (DELETE 2)
            (("2" (SKOLEM!)
              (("2" (FLATTEN)
                (("2" (SKOLEM!)
                  (("2" (DECOMPOSE-EQUALITY 1)
                    (("2" (DELETE -1)
                      (("2" (INST?) (("2" (SMASH) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|state_induction| FORMULA-DECL NIL |state| NIL)
    (|st| ADT-ACCESSOR-DECL "[(extend?) -> state]" |state| NIL)
    (|m| ADT-ACCESSOR-DECL "[(extend?) -> mesg]" |state| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |state| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| TYPE-DECL NIL |state| NIL))
   SHOSTAK))
 (|subterm_extend| 0
  (|subterm_extend-1| NIL 3599498387
   ("" (INDUCT "st1")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM!)
      (("2" (FLATTEN)
        (("2" (SKOLEM!)
          (("2" (FLATTEN)
            (("2" (EXPAND "subterm" 1)
              (("2" (FLATTEN)
                (("2" (INST?)
                  (("2" (SMASH)
                    (("2" (EXPAND "subterm" -1)
                      (("2" (DECOMPOSE-EQUALITY)
                        (("2" (REPLACE -2)
                          (("2" (EXPAND "subterm" 2) (("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|st| ADT-ACCESSOR-DECL "[(extend?) -> state]" |state| NIL)
    (|m| ADT-ACCESSOR-DECL "[(extend?) -> mesg]" |state| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|state_induction| FORMULA-DECL NIL |state| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |state| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|subterm| ADT-DEF-DECL "boolean" |state| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| TYPE-DECL NIL |state| NIL))
   SHOSTAK))
 (|no_subterm_circularity| 0
  (|no_subterm_circularity-1| NIL 3599494741
   ("" (INDUCT "st")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM!)
      (("2" (FLATTEN)
        (("2" (SKOLEM!)
          (("2" (EXPAND "subterm" -2)
            (("2" (SPLIT)
              (("1" (DELETE -2)
                (("1" (LEMMA "no_circularity_in_extend")
                  (("1" (INST -1 "x!1" "extend(extend1_var!1, extend2_var!1)")
                    (("1" (SMASH) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (LEMMA "subterm_extend")
                (("2" (INST?) (("2" (SMASH) (("2" (INST?) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|no_circularity_in_extend| FORMULA-DECL NIL |state| NIL)
    (|subterm_extend| FORMULA-DECL NIL |state| NIL)
    (|state_induction| FORMULA-DECL NIL |state| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |state| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|subterm| ADT-DEF-DECL "boolean" |state| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| TYPE-DECL NIL |state| NIL))
   SHOSTAK))
 (|init_extend| 0
  (|init_extend-1| NIL 3598810058
   ("" (SKOLEM 1 ("p" "x" "s" "_"))
    (("" (INDUCT "k")
      (("1" (FLATTEN)
        (("1" (TYPEPRED "p")
          (("1" (EXPAND "path?")
            (("1" (FLATTEN) (("1" (DELETE -2 1) (("1" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKOLEM 1 "i")
        (("2" (FLATTEN)
          (("2" (SPLIT)
            (("1" (SKOLEM -1 "j")
              (("1" (FLATTEN) (("1" (INST?) (("1" (SMASH) NIL NIL)) NIL)) NIL))
              NIL)
             ("2" (INST 2 "i")
              (("2" (TYPEPRED "p")
                (("2" (EXPAND "path?")
                  (("2" (FLATTEN)
                    (("2" (INST -2 "i")
                      (("2" (DELETE -1)
                        (("2" (GRIND) (("2" (DECOMPOSE-EQUALITY -3) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|state| TYPE-DECL NIL |state| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|trans| CONST-DECL "bool" |state| NIL)
    (|path?| CONST-DECL "bool" |paths| "../neutral_nodes/")
    (|path| TYPE-EQ-DECL NIL |paths| "../neutral_nodes/")
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |state| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|lab| CONST-DECL "mesg" |state| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|m| ADT-ACCESSOR-DECL "[(extend?) -> mesg]" |state| NIL)
    (|label| TYPE-DECL NIL |state| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|exl?| ADT-RECOGNIZER-DECL "[label -> boolean]" |state| NIL)
    (|obl?| ADT-RECOGNIZER-DECL "[label -> boolean]" |state| NIL)
    (|m| SHARED-ADT-ACCESSOR-DECL "[{x: label | exl?(x) OR obl?(x)} -> mesg]"
     |state| NIL)
    (|st| ADT-ACCESSOR-DECL "[(extend?) -> state]" |state| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|prefix_extend| 0
  (|prefix_extend-1| NIL 3599487042
   ("" (SKOLEM 1 ("p" "x" "st0" "i" "k"))
    (("" (NAME "n" "k-i")
      (("" (CASE-REPLACE "k=n+i")
        (("1" (DELETE -)
          (("1" (GENERALIZE "n" "n" "nat")
            (("1" (SMASH) NIL NIL)
             ("2" (TYPEPRED "p")
              (("2" (EXPAND "path?")
                (("2" (FLATTEN)
                  (("2" (DELETE -1)
                    (("2" (INDUCT "n")
                      (("1" (SMASH)
                        (("1" (EXPAND "subterm") (("1" (PROPAX) NIL NIL)) NIL))
                        NIL)
                       ("2" (SKOLEM 1 "l")
                        (("2" (SMASH)
                          (("1" (INST -4 "i + l")
                            (("1" (EXPAND "trans")
                              (("1" (SMASH)
                                (("1" (INST 2 "i + l")
                                  (("1" (SMASH)
                                    (("1" (SKOLEM -4 "lb")
                                      (("1" (SMASH)
                                        (("1" (REPLACE -3)
                                          (("1" (DECOMPOSE-EQUALITY -6) NIL
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOLEM -1 "j")
                            (("2" (FLATTEN)
                              (("2" (INST 2 "j") (("2" (SMASH) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("3" (INST -3 "i+l")
                            (("3" (EXPAND "trans")
                              (("3" (SKOLEM -3 "lb")
                                (("3" (SMASH)
                                  (("3" (INST 3 "i+l")
                                    (("3" (SMASH)
                                      (("3" (REPLACE -2)
                                        (("3" (DECOMPOSE-EQUALITY -5) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SMASH) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|m| ADT-ACCESSOR-DECL "[(extend?) -> mesg]" |state| NIL)
    (|label| TYPE-DECL NIL |state| NIL)
    (|exl?| ADT-RECOGNIZER-DECL "[label -> boolean]" |state| NIL)
    (|obl?| ADT-RECOGNIZER-DECL "[label -> boolean]" |state| NIL)
    (|m| SHARED-ADT-ACCESSOR-DECL "[{x: label | exl?(x) OR obl?(x)} -> mesg]"
     |state| NIL)
    (|st| ADT-ACCESSOR-DECL "[(extend?) -> state]" |state| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|subterm| ADT-DEF-DECL "boolean" |state| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |state| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../neutral_nodes/")
    (|path?| CONST-DECL "bool" |paths| "../neutral_nodes/")
    (|trans| CONST-DECL "bool" |state| NIL)
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|state| TYPE-DECL NIL |state| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|n| SKOLEM-CONST-DECL "int" |state| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL))
   SHOSTAK))
 (|state_split_helper| 0
  (|state_split_helper-1| NIL 3599492879
   ("" (SKOLEM 1 ("p" "x" "x0" "x1" "st0" "i" "k"))
    (("" (FLATTEN)
      (("" (LEMMA "prefix_extend")
        (("" (INST -1 "p" "x1" "extend(x,st0)" "i" "k")
          (("" (SMASH)
            (("1" (REPLACE -2)
              (("1" (REPLACE -4)
                (("1" (DELETE -1 -2 -4 2)
                  (("1" (EXPAND "subterm")
                    (("1" (SPLIT)
                      (("1" (DECOMPOSE-EQUALITY -1) NIL NIL)
                       ("2" (LEMMA "no_subterm_circularity")
                        (("2" (INST?) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOLEM -3 "j0")
              (("2" (FLATTEN)
                (("2" (LEMMA "prefix_extend")
                  (("2" (INST -1 "p" "x" "st0" "i" "j0")
                    (("2" (SMASH)
                      (("1" (REPLACE -8)
                        (("1" (REPLACE -2)
                          (("1" (DELETE -1 -2 -4 -5 -6 -7 -8 -9 +)
                            (("1" (LEMMA "no_subterm_circularity")
                              (("1" (INST?) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKOLEM -3 "j")
                        (("2" (SMASH)
                          (("2" (INST 2 "j")
                            (("2" (SMASH)
                              (("2" (CASE-REPLACE "j=i")
                                (("1" (DELETE -1 -2 -3 -4 -5 -8 -9 -10 -11 2)
                                  (("1" (REPLACE -1)
                                    (("1" (DELETE -1 -2 1)
                                      (("1"
                                        (LEMMA
                                         "no_circularity_in_double_extend")
                                        (("1" (INST?) (("1" (SMASH) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SMASH) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|state| TYPE-DECL NIL |state| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|trans| CONST-DECL "bool" |state| NIL)
    (|path?| CONST-DECL "bool" |paths| "../neutral_nodes/")
    (|path| TYPE-EQ-DECL NIL |paths| "../neutral_nodes/")
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |state| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|no_circularity_in_double_extend| FORMULA-DECL NIL |state| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|m| ADT-ACCESSOR-DECL "[(extend?) -> mesg]" |state| NIL)
    (|st| ADT-ACCESSOR-DECL "[(extend?) -> state]" |state| NIL)
    (|no_subterm_circularity| FORMULA-DECL NIL |state| NIL)
    (|subterm| ADT-DEF-DECL "boolean" |state| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|prefix_extend| FORMULA-DECL NIL |state| NIL))
   SHOSTAK))
 (|state_split| 0
  (|state_split-1| NIL 3599492337
   ("" (SKOLEM 1 ("p" "x" "x0" "x1" "st0" "i" "k"))
    (("" (FLATTEN)
      (("" (LEMMA "state_split_helper")
        (("" (INST -1 "p" "x" "x0" "x1" "st0" "i" "k")
          (("" (SMASH)
            (("" (SKOLEM -4 "j1")
              (("" (INST 2 "_" "j1")
                (("" (SMASH)
                  (("" (DELETE -1 -3 -4 -5 -6 -7)
                    (("" (LEMMA "init_extend")
                      (("" (INST -1 "p" "x0" "extend(x,st0)" "i")
                        (("" (SMASH)
                          (("" (SKOLEM -2 "j")
                            (("" (FLATTEN)
                              (("" (LEMMA "init_extend")
                                (("" (INST -1 "p" "x" "st0" "j")
                                  (("" (SMASH)
                                    (("" (SKOLEM -2 "j0")
                                      (("" (INST 2 "j0") (("" (SMASH) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|state| TYPE-DECL NIL |state| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|trans| CONST-DECL "bool" |state| NIL)
    (|path?| CONST-DECL "bool" |paths| "../neutral_nodes/")
    (|path| TYPE-EQ-DECL NIL |paths| "../neutral_nodes/")
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|init_extend| FORMULA-DECL NIL |state| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |state| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|state_split_helper| FORMULA-DECL NIL |state| NIL))
   SHOSTAK))
 (|prefix_boot| 0
  (|prefix_boot-1| NIL 3599477634
   ("" (SKOLEM 1 ("p" "i" "k"))
    (("" (NAME "n" "k-i")
      (("" (CASE-REPLACE "k=n+i")
        (("1" (DELETE -1 -1)
          (("1" (GENERALIZE "n" "n" "nat")
            (("1" (SMASH) NIL NIL)
             ("2" (TYPEPRED "p")
              (("2" (EXPAND "path?")
                (("2" (FLATTEN)
                  (("2" (DELETE -1)
                    (("2" (INDUCT "n")
                      (("1" (SMASH)
                        (("1" (DELETE -1 -2 2)
                          (("1" (EXPAND "subterm") (("1" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKOLEM 1 "j_1")
                        (("2" (SMASH)
                          (("1" (INST -4 "i + j_1")
                            (("1" (EXPAND "trans")
                              (("1" (SMASH)
                                (("1" (INST 2 "1 + i + j_1")
                                  (("1" (SMASH)
                                    (("1" (SKOLEM -4 "lb")
                                      (("1" (SMASH)
                                        (("1" (REPLACE -6)
                                          (("1" (EXPAND "subterm" 1)
                                            (("1" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOLEM!)
                            (("2" (INST 2 "j!1") (("2" (SMASH) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (SMASH) NIL NIL))
            NIL))
          NIL)
         ("2" (SMASH) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../neutral_nodes/")
    (|path?| CONST-DECL "bool" |paths| "../neutral_nodes/")
    (|trans| CONST-DECL "bool" |state| NIL)
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|subterm| ADT-DEF-DECL "boolean" |state| NIL)
    (|state| TYPE-DECL NIL |state| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|n| SKOLEM-CONST-DECL "int" |state| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL))
   SHOSTAK))
 (|boot_extend| 0
  (|boot_extend-1| NIL 3599477665
   ("" (SKOLEM 1 ("p" "x" "i" "k"))
    (("" (NAME "n" "k-i-1")
      (("" (CASE-REPLACE "k=n+i+1")
        (("1" (DELETE -)
          (("1" (GENERALIZE "n" "n" "nat")
            (("1" (GRIND) NIL NIL)
             ("2" (TYPEPRED "p")
              (("2" (EXPAND "path?")
                (("2" (FLATTEN)
                  (("2" (DELETE -1)
                    (("2" (INDUCT "n")
                      (("1" (INST -1 "i")
                        (("1" (EXPAND "has") (("1" (GRIND) NIL NIL)) NIL)) NIL)
                       ("2" (SKOLEM 1 "j_1")
                        (("2" (FLATTEN)
                          (("2" (CASE "has(p(j_1 + 1 + i)`1, x)")
                            (("1" (SMASH)
                              (("1" (SKOLEM! -3)
                                (("1" (INST 1 "j!1") (("1" (SMASH) NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SMASH)
                              (("1" (SKOLEM -2 "l")
                                (("1" (INST 2 "l") (("1" (SMASH) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (INST -4 "1 + i + j_1")
                                (("2" (EXPAND "trans")
                                  (("2" (SMASH)
                                    (("2" (SKOLEM -4 "lb")
                                      (("2" (SMASH)
                                        (("1" (DELETE -1 -2 -4 -5 +)
                                          (("1" (GRIND) NIL NIL)) NIL)
                                         ("2" (REPLACE -6)
                                          (("2" (EXPAND "has" -3)
                                            (("2" (REPLACE -3 :DIR RL)
                                              (("2" (INST 2 "1+i+j_1")
                                                (("2" (SMASH) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SMASH) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pcr| DEF-DECL "mesg" |state| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|lab| CONST-DECL "mesg" |state| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |state| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|has| DEF-DECL "bool" |state| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../neutral_nodes/")
    (|path?| CONST-DECL "bool" |paths| "../neutral_nodes/")
    (|trans| CONST-DECL "bool" |state| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|state| TYPE-DECL NIL |state| NIL) (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|n| SKOLEM-CONST-DECL "int" |state| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL))
   SHOSTAK))
 (|prefix_boot_extend| 0
  (|prefix_boot_extend-1| NIL 3599477676
   ("" (SKOLEM 1 ("p" "x" "i" "k"))
    (("" (SMASH)
      (("" (LEMMA "prefix_boot")
        (("" (INST?)
          (("" (SMASH)
            (("" (SKOLEM!)
              (("" (SMASH)
                (("" (LEMMA "boot_extend")
                  (("" (INST -1 "p" "x" "j!1" "k")
                    (("" (SMASH)
                      (("1" (SKOLEM!)
                        (("1" (INST 2 "j!2") (("1" (SMASH) NIL NIL)) NIL)) NIL)
                       ("2" (DELETE 2 3) (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|state| TYPE-DECL NIL |state| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|trans| CONST-DECL "bool" |state| NIL)
    (|path?| CONST-DECL "bool" |paths| "../neutral_nodes/")
    (|path| TYPE-EQ-DECL NIL |paths| "../neutral_nodes/")
    (|boot_extend| FORMULA-DECL NIL |state| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|has| DEF-DECL "bool" |state| NIL)
    (|prefix_boot| FORMULA-DECL NIL |state| NIL))
   SHOSTAK)))

