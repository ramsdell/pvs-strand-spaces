% Blanchet's Simple Example Protocol

% John D. Ramsdell -- The MITRE Corporation -- October 2014

% Copyright (C) 2014 The MITRE Corporation.
% All rights reserved.
% See ../license.txt for terms.

blanchet: theory
begin

  skeletons: library = "../skeletons"
  importing skeletons@adversary

  % The Blanchet Protocol 

  % The init role

  binit_trace: role_trace =
    doubleton_seq(send(en(en(sk(0),
                             ak(invert(asym(0)))),
                          ak(asym(1)))),
                  recv(en(tx(0), sk(0))))

  binit_role: role =
    (# trace   := binit_trace,
       rnon    := no_assumptions(binit_trace`length),
       runique :=  doubleton_seq(singleton[atom](sk(0)), emptyset) #)

  % The responder role

  bresp_trace: role_trace =
    doubleton_seq(recv(en(en(sk(0),
                             ak(invert(asym(0)))),
                          ak(asym(1)))),
                  send(en(tx(0), sk(0))))

  bresp_role: role = simple_role(bresp_trace)

  % The blanchet protocol

  bprot: protocol =
    add(binit_role,
    add(bresp_role,
        adversary_prot))

  enumerate_bprot: lemma
    forall(r: role):
      bprot(r) iff
        r = binit_role or
        r = bresp_role or
        adversary_prot(r)

  % A blanchet specific role assignment
  bprot_assignment(b: bundle): type =
    protocol_assignment(bprot, b)

  % The Corrected Blanchet Protocol 

  % The init role

  cinit_trace: role_trace =
    doubleton_seq(send(en(en(pr(sk(0), ak(asym(1))), 
                             ak(invert(asym(0)))),
                          ak(asym(1)))),
                  recv(en(tx(0), sk(0))))

  cinit_role: role =
    (# trace   := cinit_trace,
       rnon    := no_assumptions(cinit_trace`length),
       runique :=  doubleton_seq(singleton[atom](sk(0)), emptyset) #)

  % The responder role

  cresp_trace: role_trace =
    doubleton_seq(recv(en(en(pr(sk(0), ak(asym(1))), 
                             ak(invert(asym(0)))),
                          ak(asym(1)))),
                  send(en(tx(0), sk(0))))

  cresp_role: role = simple_role(cresp_trace)

  % The blanchet protocol

  cprot: protocol =
    add(cinit_role,
    add(cresp_role,
        adversary_prot))

  enumerate_cprot: lemma
    forall(r: role):
      cprot(r) iff
        r = cinit_role or
        r = cresp_role or
        adversary_prot(r)

  % A blanchet specific role assignment
  cprot_assignment(b: bundle): type =
    protocol_assignment(cprot, b)

  pmap(r: (cprot)): (bprot) =
    if r = cinit_role then
      binit_role
    elsif r = cresp_role then
      bresp_role
    else
      r
    endif

  pmap_trace_length: lemma
    forall(r: (cprot)):
      length(r`trace) = length(pmap(r)`trace)

  resp_inst: lemma
    forall(c: trace, s: subst):
      length(c) <= length(cresp_trace) and
      instance(cresp_trace, c) = up(s) implies
        up?(instance(bresp_trace, instantiate(bresp_trace, length(c), s)))
       
  bmap(b1: bundle, pa1: cprot_assignment(b1)):
      [b0: bundle, bprot_assignment(b0)] =
    let pa0 = pmap o pa1,
        ss1 = b1`space,
        ss0 =
          (# length := length(ss1),
             seq    := lambda(i: below[length(ss1)]):
               let s = instance(pa1(i)`trace, ss1(i)) in
               instantiate(pa0(i)`trace, length(ss1(i)), down(s)) #) in
    ((# space := ss0, comm := b1`comm #), pa0)

end blanchet
