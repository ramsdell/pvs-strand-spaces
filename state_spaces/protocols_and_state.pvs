% Definition of compatibility between a protocol and state transitions

% John D. Ramsdell -- The MITRE Corporation -- January 2013

% Copyright (C) 2014 The MITRE Corporation.
% All rights reserved.
% See ../license.txt for terms.

protocols_and_state[state: type, trans: setof[[state, state]]]: theory
begin

  importing paths[state, trans]

  anno: type = setof[trans]

  strand_spaces: library = "../strand_spaces"
  importing strand_spaces@adversary[anno]

  % Is transition relation t compatible with bundle b and role assignment ra?
  compat(b: bundle, ra: role_assignment(b))
        % Existentially quantified varables follow
        (i: nat, f: [(anno_node?(b, ra)) -> below[i]], p: path): bool =
                  % f maps annotated nodes to steps of the path
                  % p o f maps annotated nodes to states
                  % i is the number of annotated nodes in the bundle
    bijective?(f) % Must be able to map from steps to annotated nodes too
    and           % Make sure the bundle order is respected by f
                  % This definition strengthens the one in the paper
    (forall(n0, n1: (anno_node?(b, ra))):
      prec?(b)(n0, n1) iff f(n0) < f(n1))    % Iff was implies!
    and           % Make sure the annotations are satisfied by path p
    forall(n: (anno_node?(b, ra)), tn: anno):
      annotations(b, ra)(n)(tn) implies
        tn(p(f(n)), p(f(n)+1))

  % Is the transition relation compatible with bundle b and role assignment ra?
  compatible(b: bundle, ra: role_assignment(b)): bool =
    exists(i: nat, f: [(anno_node?(b, ra)) -> below[i]], p: path):
      compat(b, ra)(i, f, p)

  annotated_nodes_totally_ordered: lemma
  forall(b: bundle, ra: role_assignment(b),
         n0, n1: (anno_node?(b, ra))):
    compatible(b, ra) implies
      n0 = n1 or prec?(b)(n0, n1) or prec?(b)(n1, n0)

end protocols_and_state
