% Events and Traces

% John D. Ramsdell -- The MITRE Corporation -- October 2014

% This theory defines events and traces, along with some predicates
% about the relation of a message to a trace.  In particular, a message
% may originate in a trace, which means the message is carried by some
% event and the first event in the trace in which it is carried is
% a send.  The concepts are defined by functions are not true
% predicates, because when true, the position in the trace that
% demonstrates the property is returned.

% Copyright (C) 2014 The MITRE Corporation.
% All rights reserved.
% See ../license.txt for terms.

traces: theory
begin

  importing nonempty_finite_sequences
  importing free_alg

  % A messaging event is either a message reception or a transmission.
  event: datatype
  begin
    recv(t: mesg): recv?         % Inbound message
    send(t: mesg): send?         % Outbound message
  end event

  subst_evt(e: event, s: subst): event =
    cases e of
      recv(t): recv(subst(t, s)),
      send(t): send(subst(t, s))
    endcases

  % A traces is a nonempty finite sequence of events.
  trace: type = nonempty_finite_sequence[event]

  % Parameters

  param?(c: trace)(x: vari): bool =
    exists(i: index(c)): subterm(x,t(c(i)))

  % Atoms in a trace

  trace_atom?(c:trace)(x: atom): bool =
    exists(i: index(c)): subterm(x, t(c(i)))

  % Origination

  % In trace c, does m originate at index i?
  originates_index?(c: trace, m: mesg, i: index(c)): bool =
    cases c(i) of
      recv(ti): false,
      send(ti):
        carried_by?(m, ti) and
        forall(j: below(i)): not carried_by?(m, t(c(j)))
    endcases

  % Acquired message (used with variables of sort message (mvar?))

  % In trace c, is m acquired at index i?
  acquired_index?(c: trace, m: mesg, i: index(c)): bool =
    cases c(i) of
      recv(ti):
        carried_by?(m, ti) and
        forall(j: below(i)): not subterm(m, t(c(j))),
      send(ti): false
    endcases

  instance_at(pat: trace, tgt: {c: trace | length(c) <= length(pat)},
              i: upto[length(tgt)], s: subst): recursive lift[subst] =
    if i = length(tgt) then
      up(s)
    elsif recv?(pat(i)) = recv?(tgt(i)) then
      cases match(t(pat(i)), t(tgt(i)), s) of
        bottom: bottom,
        up(s): instance_at(pat, tgt, i + 1, s)
      endcases
    else
      bottom
    endif
    measure length(tgt) - i

  % If target tgt is an instance of pattern pat, return the
  % substition that demonstrates this fact.

  instance(pat: trace,
           tgt: {c: trace | length(c) <= length(pat)}): lift[subst] =
    instance_at(pat, tgt, 0, null)

  instantiate(pat: trace, h: {h: upto[length(pat)] | h > 0},
              s: subst): {c: trace | length(c) = h} =
    (# length := h,
       seq    := lambda(i: below[h]):
                   subst_evt(pat(i), s) #)

  instance_orients_index: lemma
    forall(pat: trace, tgt: {c: trace | length(c) <= length(pat)},
           r, s: subst, i: upto[length(tgt)]):
      instance_at(pat, tgt, i, r) = up(s) implies
        forall(j: index(tgt)):
          j >= i implies
            recv?(pat(j)) = recv?(tgt(j))

  instance_orients: lemma
    forall(pat: trace, tgt: {c: trace | length(c) <= length(pat)}):
      up?(instance(pat, tgt)) implies
        forall(i: index(tgt)):
          recv?(pat(i)) = recv?(tgt(i))

  instance_subst: lemma
    forall(pat: trace, tgt: {c: trace | length(c) <= length(pat)},
           i: index(tgt), r, s: subst):
      instance_at(pat, tgt, i, r) = up(s) implies
        up?(match(t(pat(i)), t(tgt(i)), r)) and
        exists(u, v: mesg):
          up(s) = match(u, v, down(match(t(pat(i)), t(tgt(i)), r)))

  instance_instantiates_index: lemma
    forall(pat: trace, tgt: {c: trace | length(c) <= length(pat)},
           i: upto[length(tgt)], r, s: subst):
      instance_at(pat, tgt, i, r) = up(s) implies
        forall(j: index(tgt)):
          j >= i implies
            instantiate(pat, length(tgt), s)(j) = tgt(j)

  instance_instantiates: lemma
    forall(pat: trace, tgt: {c: trace | length(c) <= length(pat)}, s: subst):
      instance(pat, tgt) = up(s) implies
        instantiate(pat, length(tgt), s) = tgt

  instance_instantiates_alt: lemma
    forall(pat: trace, tgt: {c: trace | length(c) <= length(pat)}):
      up?(instance(pat, tgt)) implies
        instantiate(pat, length(tgt), down(instance(pat, tgt))) = tgt

  instance_binds_index: lemma
    forall(pat: trace, tgt: {c: trace | length(c) <= length(pat)},
           i: upto[length(tgt)], r, s: subst):
      instance_at(pat, tgt, i, r) = up(s) implies
        forall(j: index(tgt), x: vari):
          j >= i implies
            subterm(x, t(pat(j))) implies up?(find(x, s))

  instance_binds: lemma
    forall(pat: trace, tgt: {c: trace | length(c) <= length(pat)}, s: subst):
      instance(pat, tgt) = up(s) implies
        forall(i: index(tgt), x: vari):
          subterm(x, t(pat(i))) implies up?(find(x, s))

end traces
