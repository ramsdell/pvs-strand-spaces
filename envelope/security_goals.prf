(|security_goals|
 (|epsilon_extend| 0
  (|epsilon_extend-1| NIL 3604154453
   ("" (SKOLEM 1 ("x" "s" "st"))
    (("" (FLATTEN)
      (("" (EXPAND "pcr" -1 1)
        (("" (SMASH)
          (("" (DECOMPOSE-EQUALITY -1)
            (("" (DECOMPOSE-EQUALITY -1)
              (("" (DECOMPOSE-EQUALITY 2)
                (("" (DELETE -1 2)
                  (("" (LEMMA "epsilon_ax[state]")
                    (("" (INST?)
                      (("" (SPLIT)
                        (("1" (GRIND)
                          (("1" (REPLACE -2 :DIR RL) (("1" (SMASH) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (INST?) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|snd| ADT-ACCESSOR-DECL "[(pair?) -> mesg]" |init_alg|
     "../strand_spaces/")
    (|fst| ADT-ACCESSOR-DECL "[(pair?) -> mesg]" |init_alg|
     "../strand_spaces/")
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL)
    (|state_extend_extensionality| FORMULA-DECL NIL |tpm| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |tpm| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|epsilon| CONST-DECL "T" |epsilons| NIL)
    (|st| ADT-ACCESSOR-DECL "[(extend?) -> state]" |tpm| NIL)
    (|m| ADT-ACCESSOR-DECL "[(extend?) -> mesg]" |tpm| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|state| TYPE-DECL NIL |tpm| NIL)
    (|pr| ADT-CONSTRUCTOR-DECL "[[mesg, mesg] -> (pair?)]" |init_alg|
     "../strand_spaces/")
    (|pair?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|hs| ADT-CONSTRUCTOR-DECL "[mesg -> (hash?)]" |init_alg|
     "../strand_spaces/")
    (|n| ADT-ACCESSOR-DECL "[key -> mesg]" |init_alg| "../strand_spaces/")
    (|key| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|hash?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|pcr| DEF-DECL "mesg" |tpm| NIL))
   SHOSTAK))
 (|exists_extend_strand_both_TCC1| 0
  (|exists_extend_strand_both_TCC1-1| NIL 3595700036 ("" (SUBTYPE-TCC) NIL NIL)
   ((|alice_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|tpm_quote_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_quote_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_quote_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_quote_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_quote_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_decrypt_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_decrypt_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_decrypt_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_decrypt_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_decrypt_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|decrypt| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_create_key_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_create_key_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_create_key_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|created| CONST-DECL "tag" |annotated_roles| NIL)
    (|create_key| CONST-DECL "tag" |annotated_roles| NIL)
    (|alice_pov| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|alice_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|alice_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|alice_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|obtain_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|obtain| CONST-DECL "tag" |annotated_roles| NIL)
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|refusal| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse| CONST-DECL "tag" |annotated_roles| NIL)
    (|quote| CONST-DECL "tag" |annotated_roles| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL))
   NIL))
 (|exists_extend_strand_both_TCC2| 0
  (|exists_extend_strand_both_TCC2-1| NIL 3595700036 ("" (SUBTYPE-TCC) NIL NIL)
   ((|alice_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|tpm_quote_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_quote_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_quote_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_quote_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_quote_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_decrypt_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_decrypt_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_decrypt_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_decrypt_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_decrypt_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|decrypt| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_create_key_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_create_key_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_create_key_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|created| CONST-DECL "tag" |annotated_roles| NIL)
    (|create_key| CONST-DECL "tag" |annotated_roles| NIL)
    (|alice_pov| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|alice_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|alice_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|alice_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|obtain_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|obtain| CONST-DECL "tag" |annotated_roles| NIL)
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|refusal| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse| CONST-DECL "tag" |annotated_roles| NIL)
    (|quote| CONST-DECL "tag" |annotated_roles| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL))
   NIL))
 (|exists_extend_strand_both_TCC3| 0
  (|exists_extend_strand_both_TCC3-1| NIL 3595700036 ("" (SUBTYPE-TCC) NIL NIL)
   ((|alice_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|tpm_quote_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_quote_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_quote_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_quote_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_quote_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_decrypt_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_decrypt_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_decrypt_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_decrypt_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_decrypt_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|decrypt| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_create_key_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_create_key_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_create_key_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|created| CONST-DECL "tag" |annotated_roles| NIL)
    (|create_key| CONST-DECL "tag" |annotated_roles| NIL)
    (|alice_pov| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|alice_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|alice_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|alice_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|obtain_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|obtain| CONST-DECL "tag" |annotated_roles| NIL)
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|refusal| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse| CONST-DECL "tag" |annotated_roles| NIL)
    (|quote| CONST-DECL "tag" |annotated_roles| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL))
   NIL))
 (|exists_extend_strand_both_TCC4| 0
  (|exists_extend_strand_both_TCC4-1| NIL 3598075442 ("" (SUBTYPE-TCC) NIL NIL)
   ((|alice_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|tpm_quote_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_quote_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_quote_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_quote_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_quote_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_decrypt_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_decrypt_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_decrypt_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_decrypt_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_decrypt_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|decrypt| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_create_key_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_create_key_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_create_key_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|created| CONST-DECL "tag" |annotated_roles| NIL)
    (|create_key| CONST-DECL "tag" |annotated_roles| NIL)
    (|alice_pov| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|alice_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|alice_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|alice_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|obtain_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|obtain| CONST-DECL "tag" |annotated_roles| NIL)
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|refusal| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse| CONST-DECL "tag" |annotated_roles| NIL)
    (|quote| CONST-DECL "tag" |annotated_roles| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL))
   NIL))
 (|exists_extend_strand_both_TCC5| 0
  (|exists_extend_strand_both_TCC5-1| NIL 3598075442 ("" (SUBTYPE-TCC) NIL NIL)
   ((|alice_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|tpm_quote_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_quote_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_quote_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_quote_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_quote_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_decrypt_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_decrypt_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_decrypt_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_decrypt_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_decrypt_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|decrypt| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_create_key_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_create_key_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_create_key_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|created| CONST-DECL "tag" |annotated_roles| NIL)
    (|create_key| CONST-DECL "tag" |annotated_roles| NIL)
    (|alice_pov| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|alice_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|alice_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|alice_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|obtain_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|obtain| CONST-DECL "tag" |annotated_roles| NIL)
    (|refusal| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse| CONST-DECL "tag" |annotated_roles| NIL)
    (|quote| CONST-DECL "tag" |annotated_roles| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL))
   NIL))
 (|exists_extend_strand_both_TCC6| 0
  (|exists_extend_strand_both_TCC6-1| NIL 3598075442 ("" (SUBTYPE-TCC) NIL NIL)
   ((|alice_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|tpm_quote_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_quote_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_quote_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_quote_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_quote_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_decrypt_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_decrypt_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_decrypt_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_decrypt_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_decrypt_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|decrypt| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_create_key_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_create_key_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_create_key_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|created| CONST-DECL "tag" |annotated_roles| NIL)
    (|create_key| CONST-DECL "tag" |annotated_roles| NIL)
    (|alice_pov| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|alice_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|alice_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|alice_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|obtain_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|obtain| CONST-DECL "tag" |annotated_roles| NIL)
    (|refusal| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse| CONST-DECL "tag" |annotated_roles| NIL)
    (|quote| CONST-DECL "tag" |annotated_roles| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL))
   NIL))
 (|exists_extend_strand_both_TCC7| 0
  (|exists_extend_strand_both_TCC7-1| NIL 3598075442 ("" (SUBTYPE-TCC) NIL NIL)
   ((|alice_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|tpm_quote_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_quote_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_quote_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_quote_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_quote_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_decrypt_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_decrypt_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_decrypt_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_decrypt_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_decrypt_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|decrypt| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_create_key_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_create_key_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_create_key_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|created| CONST-DECL "tag" |annotated_roles| NIL)
    (|create_key| CONST-DECL "tag" |annotated_roles| NIL)
    (|alice_pov| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|alice_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|alice_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|alice_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|obtain_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|obtain| CONST-DECL "tag" |annotated_roles| NIL)
    (|refusal| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse| CONST-DECL "tag" |annotated_roles| NIL)
    (|quote| CONST-DECL "tag" |annotated_roles| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL))
   NIL))
 (|exists_extend_strand_both| 0
  (|exists_extend_strand_both-1| NIL 3595700036
   ("" (SKOLEM 1 ("bu" "ra"))
    (("" (FLATTEN)
      (("" (SKOLEM!)
        (("" (SKOLEM!)
          (("" (FLATTEN)
            (("" (EXPAND "alice_shape")
              (("" (FLATTEN)
                (("" (LEMMA "state_split_and_prefix_boot_extend")
                  (("" (INST?)
                    (("" (SPLIT)
                      (("1" (INST? :WHERE -8)
                        (("1" (INST? :WHERE -11)
                          (("1" (INST?)
                            (("1" (SPLIT)
                              (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)
                               ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)
                               ("5"
                                (CASE
                                    "exists(st: state): pcr(st) = hs(pr(n!1, origin!1))")
                                (("1" (DELETE -3 -4 -5 -6 -7)
                                  (("1" (DELETE -4 -5 -6 -7 -8)
                                    (("1" (DELETE -4 -5 -6 -7 -8)
                                      (("1" (DELETE -4 -5 -6 -7 -8)
                                        (("1" (DELETE -4 -5 -6 -7 -8)
                                          (("1" (DELETE -4 -5 -6 -7 -8)
                                            (("1" (DELETE -2 -3)
                                              (("1" (DELETE 2 3)
                                                (("1" (SKOLEM!)
                                                  (("1"
                                                    (LEMMA "epsilon_extend")
                                                    (("1" (INST?)
                                                      (("1" (SMASH)
                                                        (("1"
                                                          (CASE
                                                              "has(epsilon! (st: state): pcr(st) = hs(pr(n!1, origin!1)), n!1) = has(st!1,n!1)")
                                                          (("1" (REPLACE -1)
                                                            (("1"
                                                              (DELETE -1 -2)
                                                              (("1" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (DELETE 2)
                                                            (("2"
                                                              (LEMMA
                                                               "epsilon_ax[state]")
                                                              (("2"
                                                                (INST? :WHERE
                                                                 1)
                                                                (("2" (SMASH)
                                                                  (("1"
                                                                    (REPLACE -3
                                                                             :DIR
                                                                             RL)
                                                                    (("1"
                                                                      (SMASH)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2" (INST?)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (DELETE 2 3 4)
                                  (("2" (DELETE -2 -3 -4 -5 -6)
                                    (("2" (DELETE -3 -4 -5 -6 -7 -8)
                                      (("2" (DELETE -3 -4 -5 -6 -7 -8)
                                        (("2" (DELETE -3 -4 -5 -6 -7 -8)
                                          (("2" (DELETE -3 -4 -5 -6 -7 -8)
                                            (("2"
                                              (LEMMA
                                               "tpm_extend_enc_inst_anno")
                                              (("2" (INST?)
                                                (("2" (INST?)
                                                  (("2" (SPLIT)
                                                    (("1" (DELETE -3)
                                                      (("1"
                                                        (EXPAND "compatible")
                                                        (("1"
                                                          (SKOLEM -2
                                                           ("i" "f" "p"))
                                                          (("1"
                                                            (EXPAND "compat")
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (DELETE -2 -3)
                                                                (("1" (INST?)
                                                                  (("1" (SPLIT)
                                                                    (("1"
                                                                      (INST?)
                                                                      (("1"
                                                                        (SMASH)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (EXPAND
                                                                     "anno_node?")
                                                                    (("2"
                                                                      (INST?)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("6" (DELETE 2 3 -)
                                (("6" (GRIND)
                                  (("6" (DECOMPOSE-EQUALITY)
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (EXPAND "tag")
                                      (("2" (PROPAX) NIL NIL)) NIL)
                                     ("3" (EXPAND "tag")
                                      (("3" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|alice_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|state_split_and_prefix_boot_extend| FORMULA-DECL NIL |state| NIL)
    (|refuse| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_extend_enc_inst_anno| FORMULA-DECL NIL |state| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |tpm| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|anno| TYPE-EQ-DECL NIL |protocols_and_state| "../state_spaces/")
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|anno_node?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|bu| SKOLEM-CONST-DECL "bundle[mesg, carried_by?]" |security_goals| NIL)
    (|ra| SKOLEM-CONST-DECL "assignment(bu)" |security_goals| NIL)
    (|z2!1| SKOLEM-CONST-DECL "strand[mesg, carried_by?](bu`space)"
     |security_goals| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|epsilon| CONST-DECL "T" |epsilons| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|has| DEF-DECL "bool" |tpm| NIL)
    (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|epsilon_extend| FORMULA-DECL NIL |security_goals| NIL)
    (|pcr| DEF-DECL "mesg" |tpm| NIL)
    (|key| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|text| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|data| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|tag| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|n| SHARED-ADT-ACCESSOR-DECL
     "[{x: mesg | key(x) OR text(x) OR data(x) OR tag(x)} -> nat]" |init_alg|
     "../strand_spaces/")
    (|tg| ADT-CONSTRUCTOR-DECL "[nat -> (tag?)]" |init_alg|
     "../strand_spaces/")
    (|hash?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|hs| ADT-CONSTRUCTOR-DECL "[mesg -> (hash?)]" |init_alg|
     "../strand_spaces/")
    (|pair?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|pr| ADT-CONSTRUCTOR-DECL "[[mesg, mesg] -> (pair?)]" |init_alg|
     "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|tag?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|tag| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|obtain| CONST-DECL "tag" |annotated_roles| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL) (|state| TYPE-DECL NIL |tpm| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/"))
   SHOSTAK))
 (|alice_pov_implies_extend_strands_TCC1| 0
  (|alice_pov_implies_extend_strands_TCC1-1| NIL 3596032639
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|alice_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|tpm_quote_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_quote_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_quote_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_quote_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_quote_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_decrypt_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_decrypt_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_decrypt_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_decrypt_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_decrypt_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|decrypt| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_create_key_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_create_key_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_create_key_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|created| CONST-DECL "tag" |annotated_roles| NIL)
    (|create_key| CONST-DECL "tag" |annotated_roles| NIL)
    (|alice_pov| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|alice_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|alice_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|alice_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|obtain_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|obtain| CONST-DECL "tag" |annotated_roles| NIL)
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|refusal| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse| CONST-DECL "tag" |annotated_roles| NIL)
    (|quote| CONST-DECL "tag" |annotated_roles| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL))
   NIL))
 (|alice_pov_implies_extend_strands_TCC2| 0
  (|alice_pov_implies_extend_strands_TCC2-1| NIL 3598075442
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|alice_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|tpm_quote_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_quote_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_quote_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_quote_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_quote_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_decrypt_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_decrypt_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_decrypt_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_decrypt_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_decrypt_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|decrypt| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_create_key_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_create_key_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_create_key_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|created| CONST-DECL "tag" |annotated_roles| NIL)
    (|create_key| CONST-DECL "tag" |annotated_roles| NIL)
    (|alice_pov| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|alice_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|alice_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|alice_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|obtain_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|obtain| CONST-DECL "tag" |annotated_roles| NIL)
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|refusal| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse| CONST-DECL "tag" |annotated_roles| NIL)
    (|quote| CONST-DECL "tag" |annotated_roles| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL))
   NIL))
 (|alice_pov_implies_extend_strands_TCC3| 0
  (|alice_pov_implies_extend_strands_TCC3-1| NIL 3598075442
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|alice_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|tpm_quote_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_quote_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_quote_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_quote_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_quote_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_decrypt_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_decrypt_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_decrypt_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_decrypt_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_decrypt_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|decrypt| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_create_key_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpm_create_key_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_create_key_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|created| CONST-DECL "tag" |annotated_roles| NIL)
    (|create_key| CONST-DECL "tag" |annotated_roles| NIL)
    (|alice_pov| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|alice_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|alice_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|alice_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|obtain_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|obtain| CONST-DECL "tag" |annotated_roles| NIL)
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|refusal| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|refuse| CONST-DECL "tag" |annotated_roles| NIL)
    (|quote| CONST-DECL "tag" |annotated_roles| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL))
   NIL))
 (|alice_pov_implies_extend_strands| 0
  (|alice_pov_implies_extend_strands-1| NIL 3596032784
   ("" (SKOLEM!)
    (("" (FLATTEN)
      (("" (SKOLEM!)
        (("" (FLATTEN)
          (("" (LEMMA "alice_shape_analysis_sentence")
            (("" (INST?)
              (("1" (SPLIT -1)
                (("1" (SKOLEM! -1)
                  (("1" (INST?)
                    (("1" (LEMMA "exists_extend_strand_both")
                      (("1" (INST?)
                        (("1" (SPLIT -1)
                          (("1" (INST?)
                            (("1" (SPLIT -1)
                              (("1" (SPLIT 1)
                                (("1" (PROPAX) NIL NIL)
                                 ("2" (SKOLEM! -1)
                                  (("2" (INST?)
                                    (("2" (FLATTEN)
                                      (("2" (DELETE 2)
                                        (("2" (DELETE -4 -5 -6)
                                          (("2" (SMASH) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SPLIT 1)
                                (("1" (PROPAX) NIL NIL)
                                 ("2" (SKOLEM! -1)
                                  (("2" (INST?)
                                    (("2" (FLATTEN)
                                      (("2" (DELETE 1)
                                        (("2" (DELETE -4 -5 -6)
                                          (("2" (SMASH) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (PROPAX) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL)
               ("2" (DELETE - 2)
                (("2" (EXPAND "run?")
                  (("2" (TYPEPRED "ra!1") (("2" (INST?) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|run| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|bu!1| SKOLEM-CONST-DECL "bundle[mesg, carried_by?]" |security_goals| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|run?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL) (|state| TYPE-DECL NIL |tpm| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|exists_extend_strand_both| FORMULA-DECL NIL |security_goals| NIL)
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|protocol_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|alice_shape_analysis_sentence| FORMULA-DECL NIL
     |shape_analysis_sentences| NIL))
   SHOSTAK)))

