% The adversary model for the message algebra defined in the init_alg
% theory, where anno is the type of role annotations

% John D. Ramsdell -- The MITRE Corporation -- December 2012

% Copyright (C) 2014 The MITRE Corporation.
% All rights reserved.
% See ../license.txt for terms.

adversary[anno: type]: theory
begin

  importing init_alg
  importing roles[anno, mesg, carried_by?]

  % The five adversary roles

  % Create an atom

  % The trace
  create_trace(x: atom): trace =
    singleton_seq(send(x))

  % The role
  create_role(ri: role_item): bool =
    exists(x: atom): ri = simple_role_item(create_trace(x))

  create_anno: lemma
    forall(bu: bundle, ra: role_assignment(bu), n: node(bu`space)):
      ra(n`1) = create_role implies
        not anno_node?(bu, ra)(n)

  % Create a tag

  tag_trace(x: tag): trace =
    singleton_seq(send(x))

  tag_role(ri: role_item): bool =
    exists(x: tag): ri = simple_role_item(tag_trace(x))

  tag_anno: lemma
    forall(bu: bundle, ra: role_assignment(bu), n: node(bu`space)):
      ra(n`1) = tag_role implies
        not anno_node?(bu, ra)(n)

  % Hash a message

  hash_trace(x: mesg): trace =
    doubleton_seq(recv(x), send(hs(x)))

  hash_role(ri: role_item): bool =
    exists(x: mesg): ri = simple_role_item(hash_trace(x))

  hash_anno: lemma
    forall(bu: bundle, ra: role_assignment(bu), n: node(bu`space)):
      ra(n`1) = hash_role implies
        not anno_node?(bu, ra)(n)

  % Pair two messages

  pair_trace(x, y: mesg): trace =
    tripleton_seq(recv(x), recv(y), send(pr(x, y)))

  pair_role(ri: role_item): bool =
    exists(x, y: mesg): ri = simple_role_item(pair_trace(x, y))

  pair_anno: lemma
    forall(bu: bundle, ra: role_assignment(bu), n: node(bu`space)):
      ra(n`1) = pair_role implies
        not anno_node?(bu, ra)(n)

  % Separate two messages in a pair

  sep_trace(x, y: mesg): trace =
    tripleton_seq(recv(pr(x,y)), send(x), send(y))

  sep_role(ri: role_item): bool =
    exists(x, y: mesg): ri = simple_role_item(sep_trace(x, y))

  sep_anno: lemma
    forall(bu: bundle, ra: role_assignment(bu), n: node(bu`space)):
      ra(n`1) = sep_role implies
        not anno_node?(bu, ra)(n)

  % Encrypt a message with a key

  enc_trace(x: mesg, k: key): trace =
    tripleton_seq(recv(x), recv(k), send(en(x, k)))

  enc_role(ri: role_item): bool =
    exists(x: mesg, k: key): ri = simple_role_item(enc_trace(x, k))

  enc_anno: lemma
    forall(bu: bundle, ra: role_assignment(bu), n: node(bu`space)):
      ra(n`1) = enc_role implies
        not anno_node?(bu, ra)(n)

  % Decrypt a message with the inverse of a key

  dec_trace(x: mesg, k: key): trace =
    tripleton_seq(recv(en(x, k)), recv(invk(k)), send(x))

  dec_role(ri : role_item): bool =
    exists(x: mesg, k: key): ri = simple_role_item(dec_trace(x, k))

  dec_anno: lemma
    forall(bu: bundle, ra: role_assignment(bu), n: node(bu`space)):
      ra(n`1) = dec_role implies
        not anno_node?(bu, ra)(n)

  % All the adversary roles as a finite set
  adversary_roles: protocol =
    add(create_role,
        add(tag_role,
            add(hash_role,
                add(pair_role,
                    add(sep_role,
                        add(enc_role,
                            singleton(dec_role)))))))

  enumerate_adversary_roles: lemma
  forall(r: role):
    adversary_roles(r) iff
      r = create_role or
      r = tag_role or
      r = hash_role or
      r = pair_role or
      r = sep_role or
      r = enc_role or
      r = dec_role

  adversary_anno: lemma
    forall(bu: bundle, ra: role_assignment(bu), n: node(bu`space)):
      adversary_roles(ra(n`1)) implies
        not anno_node?(bu, ra)(n)

  adversary_strands_are_short: lemma
    forall(ss: strand_space, s: strand(ss), h: nat, r: (adversary_roles)):
      h >= 4 implies not role_pred(ss)(s, h, r)

end adversary
