(|bundles|
 (|starts_at?_TCC1| 0
  (|starts_at?_TCC1-1| NIL 3607673199 ("" (SUBTYPE-TCC) NIL NIL)
   ((|start_node?| CONST-DECL "bool" |bundles| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|prec_is_strict| 0
  (|prec_is_strict-1| NIL 3564911041
   ("" (SKOLEM 1 "b") (("" (TYPEPRED "b") (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|well_formed_next?| CONST-DECL "bool" |bundles| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|sync_at| CONST-DECL "(gtrans)" |strand_spaces| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|prec?| CONST-DECL "bool" |bundles| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (/= CONST-DECL "boolean" |notequal| NIL))
   SHOSTAK))
 (|left_comm_send| 0
  (|left_comm_send-1| NIL 3564911089
   ("" (SKOLEM 1 ("b" "n0" "n1"))
    (("" (TYPEPRED "b")
      (("" (EXPAND "bundle?")
        (("" (EXPAND "well_formed_recv?")
          (("" (EXPAND "event_at")
            (("" (EXPAND "well_formed_comm?")
              (("" (SMASH)
                (("" (INST -1 "n0" "n1")
                  (("" (SMASH) (("" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|well_formed_next?| CONST-DECL "bool" |bundles| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|sync_at| CONST-DECL "(gtrans)" |strand_spaces| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|prec?| CONST-DECL "bool" |bundles| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| NIL))
   SHOSTAK))
 (|right_comm_recv| 0
  (|right_comm_recv-1| NIL 3564911391
   ("" (SKOLEM 1 ("b" "n0" "n1"))
    (("" (TYPEPRED "b")
      (("" (EXPAND "bundle?")
        (("" (EXPAND "well_formed_comm?")
          (("" (SMASH) (("" (INST -1 "n0" "n1") (("" (SMASH) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/"))
   SHOSTAK))
 (|comm_injective| 0
  (|comm_injective-1| NIL 3564911466
   ("" (SKOLEM 1 ("b" "n0" "n1" "n2"))
    (("" (FLATTEN)
      (("" (TYPEPRED "b")
        (("" (EXPAND "bundle?")
          (("" (EXPAND "well_formed_recv?")
            (("" (FLATTEN)
              (("" (INST -3 "n2")
                (("" (SPLIT)
                  (("1" (EXPAND "exists1")
                    (("1" (FLATTEN)
                      (("1" (EXPAND "unique?")
                        (("1" (INST -2 "n0" "n1") (("1" (SMASH) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (LEMMA "right_comm_recv" ("b" "b" "n0" "n0" "n1" "n2"))
                    (("2" (SMASH) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|right_comm_recv| FORMULA-DECL NIL |bundles| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|prec_is_transitive| 0
  (|prec_is_transitive-1| NIL 3578729392
   ("" (SKOLEM 1 ("b" "x" "y" "z"))
    (("" (LEMMA "prec_is_strict")
      (("" (INST?)
        (("" (EXPAND "strict_order?")
          (("" (FLATTEN)
            (("" (EXPAND "transitive?")
              (("" (DELETE -1)
                (("" (INST -1 "x" "y" "z") (("" (SMASH) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prec_is_strict| FORMULA-DECL NIL |bundles| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL))
   SHOSTAK))
 (|comm_prec| 0
  (|comm_prec-1| NIL 3579251820
   ("" (SKOLEM!)
    (("" (EXPAND "prec?")
      (("" (FLATTEN)
        (("" (EXPAND "TC") (("" (EXPAND "before?") (("" (SMASH) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prec?| CONST-DECL "bool" |bundles| NIL)
    (TC INDUCTIVE-DECL "bool" |relations| NIL)
    (|before?| CONST-DECL "bool" |bundles| NIL))
   SHOSTAK))
 (|next_prec| 0
  (|next_prec-1| NIL 3598427687
   ("" (SKOLEM 1 ("b" "n0" "n1"))
    (("" (FLATTEN)
      (("" (EXPAND "prec?")
        (("" (EXPAND "TC")
          (("" (FLATTEN)
            (("" (DELETE 2)
              (("" (EXPAND "before?") (("" (SMASH) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((TC INDUCTIVE-DECL "bool" |relations| NIL)
    (|before?| CONST-DECL "bool" |bundles| NIL)
    (|prec?| CONST-DECL "bool" |bundles| NIL))
   SHOSTAK))
 (|strand_succession_prec| 0
  (|strand_succession_prec-1| NIL 3578844107
   ("" (SKOLEM 1 ("b" "n0" "n1"))
    (("" (SMASH)
      (("" (NAME "i" "n1`2-n0`2-1")
        (("" (CASE "prec?(b)(n0, (n1`1,n1`2))")
          (("1" (CASE "n1=(n1`1, n1`2)")
            (("1" (REPLACE -1) (("1" (SMASH) NIL NIL)) NIL)
             ("2" (DECOMPOSE-EQUALITY 1) NIL NIL))
            NIL)
           ("2" (DELETE 2)
            (("2" (REPLACE -2 :DIR RL)
              (("2" (CASE-REPLACE "n1`2=i+n0`2+1")
                (("1" (SMASH)
                  (("1" (DELETE -1 -3 -2)
                    (("1"
                      (GENERALIZE "i" "i" "below(b`space(n0`1)`length-n0`2-1)"
                       :FNUMS 1)
                      (("1" (INDUCT "i")
                        (("1" (SMASH)
                          (("1" (EXPAND "prec?")
                            (("1" (EXPAND "TC")
                              (("1" (EXPAND "before?") (("1" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKOLEM 1 "jb")
                          (("2" (SMASH)
                            (("2" (LEMMA "prec_is_transitive")
                              (("2"
                                (INST -1 "b" "n0" "(n0`1, 1 + n0`2 + jb)"
                                 "(n0`1, 2 + n0`2 + jb)")
                                (("2" (SMASH)
                                  (("2" (DELETE 2 -1)
                                    (("2" (EXPAND "prec?")
                                      (("2" (EXPAND "TC")
                                        (("2" (EXPAND "before?")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SMASH) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prec?| CONST-DECL "bool" |bundles| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prec_is_transitive| FORMULA-DECL NIL |bundles| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (TC INDUCTIVE-DECL "bool" |relations| NIL)
    (|before?| CONST-DECL "bool" |bundles| NIL)
    (|below_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|prec_increases_TCC1| 0
  (|prec_increases_TCC1-1| NIL 3579251731
   ("" (SKOLEM 1 ("b" "n0" "n1"))
    (("" (FLATTEN) (("" (DELETE -1) (("" (SMASH) NIL NIL)) NIL)) NIL)) NIL)
   ((|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|finite_node_type| FORMULA-DECL NIL |strand_spaces| NIL))
   NIL))
 (|prec_increases_TCC2| 0
  (|prec_increases_TCC2-1| NIL 3579251731 ("" (ASSUMING-TCC) NIL NIL)
   ((|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|prec?| CONST-DECL "bool" |bundles| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|sync_at| CONST-DECL "(gtrans)" |strand_spaces| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|well_formed_next?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|prec_increases| 0
  (|prec_increases-1| NIL 3579251862
   ("" (SKOLEM 1 ("b" "n0" "n1"))
    (("" (FLATTEN)
      (("" (LEMMA "left_card_increases[node(b`space), prec?(b)]")
        (("" (INST?) (("" (SMASH) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL)
    (|prec?| CONST-DECL "bool" |bundles| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|left_card_increases| FORMULA-DECL NIL |finite_strict_orders|
     "../strand_spaces/"))
   SHOSTAK))
 (|carried_recv_implies_send_TCC1| 0
  (|carried_recv_implies_send_TCC1-1| NIL 3594377300 ("" (SUBTYPE-TCC) NIL NIL)
   ((|event_at| CONST-DECL "event" |strand_spaces| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|carried_recv_implies_send_TCC2| 0
  (|carried_recv_implies_send_TCC2-1| NIL 3594377300 ("" (SUBTYPE-TCC) NIL NIL)
   ((|event_at| CONST-DECL "event" |strand_spaces| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|well_formed_next?| CONST-DECL "bool" |bundles| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|sync_at| CONST-DECL "(gtrans)" |strand_spaces| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|prec?| CONST-DECL "bool" |bundles| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|path| TYPE-EQ-DECL NIL |paths| "../transitions/")
    (|path?| CONST-DECL "bool" |paths| "../transitions/")
    (|init?| FORMAL-CONST-DECL "setof[state]" |bundles| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|carried_recv_implies_send| 0
  (|carried_recv_implies_send-1| NIL 3578811450
   ("" (SKOLEM 1 ("b" "m" "n0"))
    (("" (SMASH)
      (("" (TYPEPRED "b")
        (("" (EXPAND "bundle?")
          (("" (FLATTEN)
            (("" (EXPAND "well_formed_recv?")
              (("" (INST? -3)
                (("" (SMASH)
                  (("" (EXPAND "exists1")
                    (("" (SMASH)
                      (("" (SKOLEM!)
                        (("" (INST?)
                          (("" (SMASH)
                            (("" (EXPAND "well_formed_comm?")
                              (("" (INST?) (("" (SMASH) NIL NIL)) NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|well_formed_recv?| CONST-DECL "bool" |bundles| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|carried_send_implies_recv_TCC1| 0
  (|carried_send_implies_recv_TCC1-1| NIL 3594377300 ("" (SUBTYPE-TCC) NIL NIL)
   ((|event_at| CONST-DECL "event" |strand_spaces| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|carried_send_implies_recv| 0
  (|carried_send_implies_recv-1| NIL 3578815141
   ("" (SKOLEM 1 ("b" "m" "n0"))
    (("" (FLATTEN)
      (("" (EXPAND "event_at")
        (("" (SMASH)
          (("" (EXPAND "appears_at?")
            (("" (EXPAND "appears_index?")
              (("" (SKOLEM 1 "j")
                (("" (INST 1 "(n0`1,j)") (("" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|appears_index?| CONST-DECL "bool" |traces| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|carried_by_event?| CONST-DECL "bool" |traces| NIL)
    (|appears_at?| CONST-DECL "bool" |strand_spaces| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| NIL))
   SHOSTAK))
 (|carried_sync_implies_sync_TCC1| 0
  (|carried_sync_implies_sync_TCC1-1| NIL 3607524079 ("" (SUBTYPE-TCC) NIL NIL)
   ((|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|carried_sync_implies_sync_TCC2| 0
  (|carried_sync_implies_sync_TCC2-1| NIL 3607673199
   ("" (SKOLEM!)
    (("" (FLATTEN)
      (("" (TYPEPRED "b!1")
        (("" (EXPAND "bundle?")
          (("" (EXPAND "well_formed_next?")
            (("" (FLATTEN)
              (("" (DELETE 1)
                (("" (SKOLEM! 1)
                  (("" (FLATTEN) (("" (INST? -4) (("" (SMASH) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|well_formed_next?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|carried_sync_implies_sync| 0
  (|carried_sync_implies_sync-1| NIL 3607524126
   ("" (SKOLEM 1 ("b" "m" "n0"))
    (("" (CASE "tran_node?(b`space)(n0)")
      (("1" (TYPEPRED "b")
        (("1" (EXPAND "bundle?")
          (("1" (EXPAND "well_formed_next?")
            (("1" (FLATTEN)
              (("1" (SKOLEM -6 ("i" "f"))
                (("1" (CASE "f(n0)=0")
                  (("1" (FLATTEN)
                    (("1" (INST -9 "n0") (("1" (GRIND) NIL NIL)) NIL)) NIL)
                   ("2" (FLATTEN)
                    (("2" (DELETE 2 -1 -2 -3)
                      (("2" (EXPAND "bijective?")
                        (("2" (EXPAND "surjective?")
                          (("2" (FLATTEN)
                            (("2" (INST -4 "f(n0)-1")
                              (("1" (SKOLEM -4 "n1")
                                (("1" (INST -2 "n1" "n0")
                                  (("1" (INST -5 "n1" "n0")
                                    (("1" (INST 2 "n1") (("1" (SMASH) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SMASH) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (GRIND) NIL NIL))
      NIL))
    NIL)
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|init?| FORMAL-CONST-DECL "setof[state]" |bundles| NIL)
    (|path?| CONST-DECL "bool" |paths| "../transitions/")
    (|path| TYPE-EQ-DECL NIL |paths| "../transitions/")
    (|starts_at?| CONST-DECL "bool" |bundles| NIL)
    (|start_node?| CONST-DECL "bool" |bundles| NIL)
    (|sync_at| CONST-DECL "(gtrans)" |strand_spaces| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|prec?| CONST-DECL "bool" |bundles| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|b| SKOLEM-CONST-DECL "bundle" |bundles| NIL)
    (|i| SKOLEM-CONST-DECL "nat" |bundles| NIL)
    (|f| SKOLEM-CONST-DECL "[(tran_node?(b`space)) -> below[i]]" |bundles| NIL)
    (|n0| SKOLEM-CONST-DECL
     "node[state, trans, mesg, carried_by?, encode](b`space)" |bundles| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|well_formed_next?| CONST-DECL "bool" |bundles| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|carried_sync_implies_prec| 0
  (|carried_sync_implies_prec-1| NIL 3607699835
   ("" (SKOLEM 1 ("b" "m" "n0"))
    (("" (FLATTEN)
      (("" (EXPAND "sync_at")
        (("" (EXPAND "appears_at?")
          (("" (EXPAND "appears_index?")
            (("" (SMASH)
              (("1" (SKOLEM 2 "j")
                (("1" (INST 2 "(n0`1, j)") (("1" (GRIND) NIL NIL)) NIL)) NIL)
               ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
               ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|appears_at?| CONST-DECL "bool" |strand_spaces| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| NIL)
    (|carried_by_event?| CONST-DECL "bool" |traces| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|appears_index?| CONST-DECL "bool" |traces| NIL)
    (|sync_at| CONST-DECL "(gtrans)" |strand_spaces| NIL))
   SHOSTAK))
 (|carried_implies_origination| 0
  (|carried_implies_origination-1| NIL 3564916519
   ("" (SKOLEM 1 ("b" "_" "m"))
    (("" (MEASURE-INDUCT+ "left_card[node(b`space), prec?(b)](n0)" "n0")
      ((""
        (CASE
            "recv?(event_at(b`space)(x!1)) or send?(event_at(b`space)(x!1)) or sync?(event_at(b`space)(x!1))")
        (("1" (SPLIT)
          (("1" (LEMMA "carried_recv_implies_send")
            (("1" (INST -1 "b" "m" "x!1")
              (("1" (SMASH)
                (("1" (SKOLEM -2 "n1")
                  (("1" (INST -3 "n1")
                    (("1" (SMASH)
                      (("1" (EXPAND "carried_by_event?")
                        (("1" (SMASH)
                          (("1" (DELETE -1 -3 -5 +)
                            (("1" (TYPEPRED "b")
                              (("1" (EXPAND "bundle?")
                                (("1" (EXPAND "well_formed_comm?")
                                  (("1" (FLATTEN)
                                    (("1" (INST?) (("1" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (LEMMA "comm_prec")
                        (("2" (INST?)
                          (("2" (LEMMA "prec_increases")
                            (("2" (INST?) (("2" (SMASH) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (GRIND) NIL NIL))
                NIL))
              NIL))
            NIL)
           ("2" (LEMMA "carried_send_implies_recv")
            (("2" (INST -1 "b" "m" "x!1")
              (("2" (SMASH)
                (("1" (INST 1 "x!1")
                  (("1" (EXPAND "originates_at?" 1) (("1" (PROPAX) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (SKOLEM -2 "n1")
                  (("2" (INST -3 "n1")
                    (("2" (SMASH)
                      (("2" (LEMMA "strand_succession_prec")
                        (("2" (INST?)
                          (("2" (LEMMA "prec_increases")
                            (("2" (INST?) (("2" (SMASH) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (DELETE -2 2) (("3" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("3" (LEMMA "carried_sync_implies_sync")
            (("3" (INST?)
              (("3" (INST?)
                (("3" (SMASH)
                  (("1" (INST 1 "x!1")
                    (("1" (EXPAND "originates_at?" 1) (("1" (PROPAX) NIL NIL))
                      NIL))
                    NIL)
                   ("2" (SKOLEM -2 "n1")
                    (("2" (INST -3 "n1")
                      (("2" (SMASH)
                        (("1" (EXPAND "sync_at")
                          (("1" (CASE "sync?(event_at(b`space)(n1))")
                            (("1" (EXPAND "carried_by_event?")
                              (("1" (SMASH) NIL NIL)) NIL)
                             ("2" (DELETE -1 -3 -4 2 3)
                              (("2" (TYPEPRED "b")
                                (("2" (EXPAND "bundle?")
                                  (("2" (EXPAND "well_formed_next?")
                                    (("2" (FLATTEN)
                                      (("2" (INST? -4) (("2" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (LEMMA "next_prec")
                          (("2" (INST?)
                            (("2" (LEMMA "prec_increases")
                              (("2" (INST?) (("2" (SMASH) NIL NIL)) NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (EXPAND "carried_by_event?" -3)
                    (("3" (SMASH)
                      (("1" (GRIND) NIL NIL)
                       ("2" (LEMMA "carried_sync_implies_prec")
                        (("2" (INST?)
                          (("2" (SMASH)
                            (("1" (INST 2 "x!1")
                              (("1" (EXPAND "originates_at?")
                                (("1" (PROPAX) NIL NIL)) NIL))
                              NIL)
                             ("2" (SKOLEM -2 "n1")
                              (("2" (INST -3 "n1")
                                (("2" (SMASH)
                                  (("2" (LEMMA "strand_succession_prec")
                                    (("2" (INST?)
                                      (("2" (LEMMA "prec_increases")
                                        (("2" (INST?) (("2" (SMASH) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (EXPAND "sync_at") (("3" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (GRIND) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|carried_by_event?| CONST-DECL "bool" |traces| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| NIL)
    (|originates_at?| CONST-DECL "bool" |bundles| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prec?| CONST-DECL "bool" |bundles| NIL)
    (|left_card| CONST-DECL "nat" |finite_strict_orders| "../strand_spaces/")
    (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|finite_node_type| FORMULA-DECL NIL |strand_spaces| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|prec_is_strict| FORMULA-DECL NIL |bundles| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| NIL)
    (|well_formed_next?| CONST-DECL "bool" |bundles| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|sync_at| CONST-DECL "(gtrans)" |strand_spaces| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|prec_increases| FORMULA-DECL NIL |bundles| NIL)
    (|comm_prec| FORMULA-DECL NIL |bundles| NIL)
    (|carried_recv_implies_send| FORMULA-DECL NIL |bundles| NIL)
    (|strand_succession_prec| FORMULA-DECL NIL |bundles| NIL)
    (|carried_send_implies_recv| FORMULA-DECL NIL |bundles| NIL)
    (|next_prec| FORMULA-DECL NIL |bundles| NIL)
    (|carried_sync_implies_prec| FORMULA-DECL NIL |bundles| NIL)
    (|carried_sync_implies_sync| FORMULA-DECL NIL |bundles| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|recv?| ADT-RECOGNIZER-DECL "[event -> boolean]" |traces| NIL)
    (|send?| ADT-RECOGNIZER-DECL "[event -> boolean]" |traces| NIL)
    (|sync?| ADT-RECOGNIZER-DECL "[event -> boolean]" |traces| NIL))
   SHOSTAK))
 (|never_carried_iff_non_origination| 0
  (|never_carried_iff_non_origination-1| NIL 3564916825
   ("" (SKOLEM 1 ("b" "m"))
    (("" (EXPAND "never_carried?")
      (("" (EXPAND "non")
        (("" (SMASH)
          (("1" (SKOLEM 1 "n") (("1" (INST?) (("1" (GRIND) NIL NIL)) NIL)) NIL)
           ("2" (SKOLEM 1 "n")
            (("2" (LEMMA "carried_implies_origination")
              (("2" (INST?)
                (("2" (SMASH)
                  (("2" (SKOLEM -2 "n1") (("2" (INST?) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|never_carried?| CONST-DECL "bool" |strand_spaces| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|event_at| CONST-DECL "event" |strand_spaces| NIL)
    (|carried_by_event?| CONST-DECL "bool" |traces| NIL)
    (|appears_index?| CONST-DECL "bool" |traces| NIL)
    (|appears_at?| CONST-DECL "bool" |strand_spaces| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|start_node?| CONST-DECL "bool" |bundles| NIL)
    (|sync_at| CONST-DECL "(gtrans)" |strand_spaces| NIL)
    (|starts_at?| CONST-DECL "bool" |bundles| NIL)
    (|originates_at?| CONST-DECL "bool" |bundles| NIL)
    (|carried_implies_origination| FORMULA-DECL NIL |bundles| NIL)
    (|non| CONST-DECL "bool" |bundles| NIL))
   SHOSTAK))
 (|uniquely_originating_node_prec| 0
  (|uniquely_originating_node_prec-1| NIL 3578758064
   ("" (SKOLEM 1 ("b" "m" "n0" "n1"))
    (("" (FLATTEN)
      ((""
        (CASE
            "FORALL (n1: node[state, trans, mesg, carried_by?,encode](b`space)):
        carried_by_event?(m, event_at(b`space)(n1)) 
         IMPLIES n0 = n1 OR prec?(b)(n0, n1)")
        (("1" (INST?) (("1" (SMASH) NIL NIL)) NIL)
         ("2" (DELETE -2 2 3)
          (("2" (MEASURE-INDUCT+ "left_card[node(b`space), prec?(b)](n1)" "n1")
            (("2"
              (CASE
                  "recv?(event_at(b`space)(x!1)) or send?(event_at(b`space)(x!1)) or sync?(event_at(b`space)(x!1)) ")
              (("1" (SPLIT)
                (("1" (LEMMA "carried_recv_implies_send")
                  (("1" (INST -1 "b" "m" "x!1")
                    (("1" (SMASH)
                      (("1" (SKOLEM -2 "n3")
                        (("1" (INST -3 "n3")
                          (("1" (SMASH)
                            (("1" (TYPEPRED "b")
                              (("1" (EXPAND "bundle?")
                                (("1" (EXPAND "well_formed_comm?")
                                  (("1" (FLATTEN)
                                    (("1" (INST?)
                                      (("1" (SMASH)
                                        (("1" (REPLACE -10)
                                          (("1" (LEMMA "comm_prec")
                                            (("1" (INST?)
                                              (("1" (SMASH) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (LEMMA "comm_prec")
                              (("2" (INST?)
                                (("2" (SMASH)
                                  (("2" (LEMMA "prec_is_transitive")
                                    (("2" (INST -1 "b" "n0" "n3" "x!1")
                                      (("2" (SMASH)
                                        (("2" (LEMMA "comm_prec")
                                          (("2" (INST? :WHERE -4)
                                            (("2" (SMASH) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (TYPEPRED "b")
                              (("3" (EXPAND "bundle?")
                                (("3" (EXPAND "well_formed_comm?")
                                  (("3" (FLATTEN)
                                    (("3" (INST?)
                                      (("3" (SMASH) (("3" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("4" (LEMMA "comm_prec")
                              (("4" (INST? :WHERE -3)
                                (("4" (LEMMA "prec_increases")
                                  (("4" (INST?) (("4" (SMASH) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (GRIND) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (LEMMA "carried_send_implies_recv")
                  (("2" (INST?)
                    (("2" (INST -1 "m")
                      (("2" (SMASH)
                        (("1" (EXPAND "uniq")
                          (("1" (INST -5 "x!1")
                            (("1" (SMASH)
                              (("1" (EXPAND "originates_at?")
                                (("1" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKOLEM -2 "y")
                          (("2" (FLATTEN)
                            (("2" (LEMMA "strand_succession_prec")
                              (("2" (INST -1 "b" "y" "x!1")
                                (("2" (SMASH)
                                  (("2" (INST -6 "y")
                                    (("2" (SMASH)
                                      (("1" (LEMMA "prec_is_transitive")
                                        (("1" (INST -1 "b" "n0" "y" "x!1")
                                          (("1" (SMASH) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (LEMMA "prec_increases")
                                        (("2" (INST?) (("2" (SMASH) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (GRIND) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (LEMMA "carried_sync_implies_sync")
                  (("3" (INST?)
                    (("3" (INST?)
                      (("3" (SMASH)
                        (("1" (EXPAND "uniq")
                          (("1" (INST -5 "x!1")
                            (("1" (EXPAND "originates_at?")
                              (("1" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (SKOLEM -2 "y")
                          (("2" (FLATTEN)
                            (("2" (LEMMA "next_prec")
                              (("2" (INST? :WHERE -3)
                                (("2" (SMASH)
                                  (("2" (INST -5 "y")
                                    (("2" (SMASH)
                                      (("1" (LEMMA "prec_is_transitive")
                                        (("1" (INST -1 "b" "n0" "y" "x!1")
                                          (("1" (SMASH) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (TYPEPRED "b")
                                        (("2" (EXPAND "bundle?")
                                          (("2" (EXPAND "well_formed_next?")
                                            (("2" (FLATTEN)
                                              (("2" (INST? -4)
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (LEMMA "prec_increases")
                                        (("3" (INST?) (("3" (SMASH) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (EXPAND "carried_by_event?" -3)
                          (("3" (SMASH)
                            (("1" (EXPAND "sync_at") (("1" (PROPAX) NIL NIL))
                              NIL)
                             ("2" (LEMMA "carried_sync_implies_prec")
                              (("2" (INST?)
                                (("2" (SMASH)
                                  (("1" (EXPAND "uniq")
                                    (("1" (INST -5 "x!1")
                                      (("1" (EXPAND "originates_at?")
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (SKOLEM -2 "y")
                                    (("2" (FLATTEN)
                                      (("2" (LEMMA "strand_succession_prec")
                                        (("2" (INST? :WHERE -3)
                                          (("2" (SMASH)
                                            (("2" (INST -6 "y")
                                              (("2" (SMASH)
                                                (("1"
                                                  (LEMMA "prec_is_transitive")
                                                  (("1"
                                                    (INST -1 "b" "n0" "y"
                                                     "x!1")
                                                    (("1" (SMASH) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (LEMMA "prec_increases")
                                                  (("2" (INST?)
                                                    (("2" (SMASH) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (EXPAND "sync_at")
                                    (("3" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SMASH) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sync?| ADT-RECOGNIZER-DECL "[event -> boolean]" |traces| NIL)
    (|send?| ADT-RECOGNIZER-DECL "[event -> boolean]" |traces| NIL)
    (|recv?| ADT-RECOGNIZER-DECL "[event -> boolean]" |traces| NIL)
    (|carried_sync_implies_sync| FORMULA-DECL NIL |bundles| NIL)
    (|carried_sync_implies_prec| FORMULA-DECL NIL |bundles| NIL)
    (|next_prec| FORMULA-DECL NIL |bundles| NIL)
    (|carried_send_implies_recv| FORMULA-DECL NIL |bundles| NIL)
    (|strand_succession_prec| FORMULA-DECL NIL |bundles| NIL)
    (|uniq| CONST-DECL "bool" |bundles| NIL)
    (|originates_at?| CONST-DECL "bool" |bundles| NIL)
    (|carried_recv_implies_send| FORMULA-DECL NIL |bundles| NIL)
    (|prec_increases| FORMULA-DECL NIL |bundles| NIL)
    (|well_formed_next?| CONST-DECL "bool" |bundles| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|sync_at| CONST-DECL "(gtrans)" |strand_spaces| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|prec_is_transitive| FORMULA-DECL NIL |bundles| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| NIL)
    (|comm_prec| FORMULA-DECL NIL |bundles| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prec_is_strict| FORMULA-DECL NIL |bundles| NIL)
    (|finite_node_type| FORMULA-DECL NIL |strand_spaces| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|left_card| CONST-DECL "nat" |finite_strict_orders| "../strand_spaces/")
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|prec?| CONST-DECL "bool" |bundles| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| NIL)
    (|carried_by_event?| CONST-DECL "bool" |traces| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL))
   SHOSTAK))
 (|after_is_strict| 0
  (|after_is_strict-1| NIL 3579018905
   ("" (SKOLEM 1 "b")
    (("" (LEMMA "prec_is_strict")
      (("" (INST?)
        (("" (EXPAND "after?")
          (("" (EXPAND "strict_order?")
            (("" (EXPAND "irreflexive?")
              (("" (SMASH)
                (("" (DELETE -1)
                  (("" (EXPAND "transitive?")
                    (("" (SKOLEM!)
                      (("" (INST -1 "z!1" "y!1" "x!1") (("" (SMASH) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prec_is_strict| FORMULA-DECL NIL |bundles| NIL)
    (|after?| CONST-DECL "bool" |bundles| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL))
   SHOSTAK))
 (|prec_decreases_TCC1| 0
  (|prec_decreases_TCC1-1| NIL 3579251731
   ("" (SKOLEM 1 ("b" "n0" "n1"))
    (("" (FLATTEN) (("" (LEMMA "after_is_strict") (("" (INST?) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|after_is_strict| FORMULA-DECL NIL |bundles| NIL))
   NIL))
 (|prec_decreases| 0
  (|prec_decreases-1| NIL 3579251939
   ("" (SKOLEM 1 ("b" "n0" "n1"))
    (("" (FLATTEN)
      (("" (LEMMA "left_card_increases[node(b`space), after?(b)]")
        (("" (INST -1 "n1" "n0")
          (("" (EXPAND "after?") (("" (SMASH) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL)
    (|after?| CONST-DECL "bool" |bundles| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|left_card_increases| FORMULA-DECL NIL |finite_strict_orders|
     "../strand_spaces/"))
   SHOSTAK))
 (|prec_trans_precedes| 0
  (|prec_trans_precedes-1| NIL 3579094609
   ("" (SKOLEM 1 ("b" "_" "n2"))
    (("" (MEASURE-INDUCT+ "left_card[node(b`space), after?(b)](n0)" "n0")
      (("1" (EXPAND "prec?" -2)
        (("1" (EXPAND "TC")
          (("1" (SPLIT)
            (("1" (PROPAX) NIL NIL)
             ("2" (SKOLEM -1 "a")
              (("2" (INST -2 "a")
                (("2" (DELETE 1)
                  (("2" (SPLIT)
                    (("1" (INST 1 "a")
                      (("1" (EXPAND "prec?") (("1" (SMASH) NIL NIL)) NIL)) NIL)
                     ("2" (SKOLEM -1 "w")
                      (("2" (INST 1 "w")
                        (("2" (EXPAND "prec?")
                          (("2" (SMASH)
                            (("2" (LEMMA "prec_is_transitive")
                              (("2" (INST -1 "b" "x!1" "a" "w")
                                (("2" (EXPAND "prec?") (("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (EXPAND "prec?") (("3" (FLATTEN) NIL NIL)) NIL)
                     ("4"
                      (LEMMA "left_card_increases[node(b`space), after?(b)]")
                      (("1" (INST?)
                        (("1" (EXPAND "after?")
                          (("1" (EXPAND "prec?") (("1" (SMASH) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (LEMMA "after_is_strict") (("2" (INST?) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (LEMMA "after_is_strict") (("2" (INST?) NIL NIL)) NIL))
      NIL))
    NIL)
   ((IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|prec?| CONST-DECL "bool" |bundles| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|before?| CONST-DECL "bool" |bundles| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|after?| CONST-DECL "bool" |bundles| NIL)
    (|left_card| CONST-DECL "nat" |finite_strict_orders| "../strand_spaces/")
    (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|finite_node_type| FORMULA-DECL NIL |strand_spaces| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|after_is_strict| FORMULA-DECL NIL |bundles| NIL)
    (TC INDUCTIVE-DECL "bool" |relations| NIL)
    (|left_card_increases| FORMULA-DECL NIL |finite_strict_orders|
     "../strand_spaces/")
    (|prec_is_transitive| FORMULA-DECL NIL |bundles| NIL))
   SHOSTAK))
 (|after_send_implies_after_previous_start| 0
  (|after_send_implies_after_previous_start-1| NIL 3579098291
   ("" (SKOLEM 1 ("b" "_" "n1"))
    (("" (MEASURE-INDUCT+ "left_card[node(b`space), after?(b)](n0)" "n0")
      (("" (EXPAND "prec?" -2)
        (("" (EXPAND "TC")
          (("" (SPLIT)
            (("1" (EXPAND "before?")
              (("1" (DELETE -2)
                (("1" (TYPEPRED "b")
                  (("1" (EXPAND "bundle?")
                    (("1" (FLATTEN)
                      (("1" (EXPAND "well_formed_comm?")
                        (("1" (DELETE -2 -3)
                          (("1" (INST -1 "x!1" "n1")
                            (("1" (SMASH)
                              (("1" (EXPAND "well_formed_next?")
                                (("1" (SMASH)
                                  (("1" (INST?)
                                    (("1" (SMASH) (("1" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOLEM!)
              (("2" (INST -2 "z!1")
                (("2" (SMASH)
                  (("1" (EXPAND "prec?") (("1" (PROPAX) NIL NIL)) NIL)
                   ("2" (LEMMA "left_card_increases[node(b`space), after?(b)]")
                    (("2" (INST?)
                      (("2" (EXPAND "after?")
                        (("2" (EXPAND "prec?") (("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|prec?| CONST-DECL "bool" |bundles| NIL)
    (|send?| ADT-RECOGNIZER-DECL "[event -> boolean]" |traces| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| NIL)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|measure_induction| FORMULA-DECL NIL |measure_induction| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|naturalnumber| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|after?| CONST-DECL "bool" |bundles| NIL)
    (|left_card| CONST-DECL "nat" |finite_strict_orders| "../strand_spaces/")
    (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|finite_node_type| FORMULA-DECL NIL |strand_spaces| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|after_is_strict| FORMULA-DECL NIL |bundles| NIL)
    (TC INDUCTIVE-DECL "bool" |relations| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|left_card_increases| FORMULA-DECL NIL |finite_strict_orders|
     "../strand_spaces/")
    (|before?| CONST-DECL "bool" |bundles| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|well_formed_next?| CONST-DECL "bool" |bundles| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| NIL))
   SHOSTAK))
 (|after_send_implies_after_previous_TCC1| 0
  (|after_send_implies_after_previous_TCC1-1| NIL 3579094609
   ("" (SKOLEM!)
    (("" (TYPEPRED "n1!1`1")
      (("" (TYPEPRED "n1!1`2") (("" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|prec?| CONST-DECL "bool" |bundles| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL))
 (|after_send_implies_after_previous| 0
  (|after_send_implies_after_previous-1| NIL 3579096605
   ("" (SKOLEM 1 ("b" "n0" "n1"))
    (("" (LEMMA "after_send_implies_after_previous_start")
      (("" (INST?)
        (("" (SMASH)
          (("" (LEMMA "prec_trans_precedes")
            (("" (INST -1 "b" "n0" "n1")
              (("" (SMASH)
                (("1" (DELETE -1 2)
                  (("1" (EXPAND "before?")
                    (("1" (TYPEPRED "b")
                      (("1" (EXPAND "bundle?")
                        (("1" (EXPAND "well_formed_comm?")
                          (("1" (FLATTEN)
                            (("1" (SPLIT)
                              (("1" (INST?) (("1" (SMASH) NIL NIL)) NIL)
                               ("2" (EXPAND "well_formed_next?")
                                (("2" (DELETE -2)
                                  (("2" (SMASH)
                                    (("2" (INST?)
                                      (("2" (SMASH) (("2" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKOLEM -2 "a")
                  (("2" (FLATTEN)
                    (("2" (EXPAND "before?")
                      (("2" (SMASH)
                        (("1" (DELETE -1 -2 -5 +)
                          (("1" (TYPEPRED "b")
                            (("1" (EXPAND "bundle?")
                              (("1" (EXPAND "well_formed_comm?")
                                (("1" (FLATTEN)
                                  (("1" (INST?)
                                    (("1" (DELETE -2 -3 -4 -5)
                                      (("1" (SMASH) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (DELETE -1 -2 -5 +)
                          (("2" (TYPEPRED "b")
                            (("2" (EXPAND "bundle?")
                              (("2" (FLATTEN)
                                (("2" (EXPAND "well_formed_next?")
                                  (("2" (SMASH)
                                    (("2" (INST?)
                                      (("2" (SMASH) (("2" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (REPLACE -3 :DIR RL)
                          (("3" (REPLACE -4 :DIR RL)
                            (("3" (DELETE -1 -3 -4 -5 -6 1)
                              (("3" (CASE "a=(a`1,a`2)")
                                (("1" (REPLACE -1) (("1" (SMASH) NIL NIL)) NIL)
                                 ("2" (DECOMPOSE-EQUALITY 1) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|after_send_implies_after_previous_start| FORMULA-DECL NIL |bundles| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|prec?| CONST-DECL "bool" |bundles| NIL)
    (|well_formed_next?| CONST-DECL "bool" |bundles| NIL)
    (|before?| CONST-DECL "bool" |bundles| NIL)
    (|prec_trans_precedes| FORMULA-DECL NIL |bundles| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL))
   SHOSTAK))
 (|next_prec_is_strict_total| 0
  (|next_prec_is_strict_total-1| NIL 3598716638
   ("" (SKOLEM 1 "b")
    (("" (TYPEPRED "b")
      (("" (EXPAND "bundle?")
        (("" (EXPAND "well_formed_next?")
          (("" (FLATTEN)
            (("" (DELETE -1 -2 -3 -4 -5)
              (("" (SKOLEM -1 ("i" "f"))
                (("" (FLATTEN)
                  (("" (DELETE -3)
                    ((""
                      (LEMMA
                       "tc_strict_total[(tran_node?(b`space)), next_prec_pred(b)]")
                      (("" (INST -1 "i" "f")
                        (("" (EXPAND "bijective?")
                          (("" (EXPAND "next_prec?")
                            (("" (SMASH)
                              (("1" (DELETE -1 -3 -4) (("1" (GRIND) NIL NIL))
                                NIL)
                               ("2" (DELETE 2)
                                (("2"
                                  (LEMMA
                                   "tc_ordered[(tran_node?(b`space)), next_prec_pred(b)]")
                                  (("2" (INST -1 "i" "f")
                                    (("2" (EXPAND "bijective?")
                                      (("2" (SMASH)
                                        (("2" (DELETE -1 -2 2)
                                          (("2" (SKOLEM 1 ("x" "y"))
                                            (("2" (INST?)
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|well_formed_next?| CONST-DECL "bool" |bundles| NIL)
    (|tc_strict_total| FORMULA-DECL NIL |tc_props| "../transitions/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|next_prec_pred| CONST-DECL "bool" |bundles| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|trichotomous?| CONST-DECL "bool" |orders| NIL)
    (|strict_total_order?| CONST-DECL "bool" |orders| NIL)
    (|tc_ordered| FORMULA-DECL NIL |tc_props| "../transitions/")
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|next_prec?| CONST-DECL "bool" |bundles| NIL))
   SHOSTAK))
 (|next_prec_is_prec| 0
  (|next_prec_is_prec-1| NIL 3598418557
   ("" (SKOLEM 1 ("b" "n0" "n1"))
    (("" (FLATTEN)
      (("" (TYPEPRED "n0")
        (("" (TYPEPRED "n1")
          (("" (EXPAND "next_prec?")
            (("" (LEMMA "TC_induction[node(b`space)]")
              (("" (SMASH)
                (("" (INST -1 "b`next" "prec?(b)")
                  (("" (SMASH)
                    (("1" (INST?)
                      (("1" (SMASH)
                        (("1" (DELETE 2)
                          (("1" (LEMMA "TC_induction[(tran_node?(b`space))]")
                            (("1" (INST -1 "next_prec_pred(b)" "TC(b`next)")
                              (("1" (SMASH)
                                (("1" (INST -1 "n0" "n1")
                                  (("1" (GRIND) NIL NIL)) NIL)
                                 ("2" (DELETE 2 -1)
                                  (("2" (SKOLEM!)
                                    (("2" (SMASH)
                                      (("1" (EXPAND "next_prec_pred")
                                        (("1" (DELETE -2 -3)
                                          (("1" (EXPAND "TC")
                                            (("1" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOLEM -1 "z")
                                        (("2" (FLATTEN)
                                          (("2" (CASE "TC(b`next)(x!1, y!1)")
                                            (("1" (DELETE -2 -3 -4 -5 -6 -7)
                                              (("1" (GRIND) NIL NIL)) NIL)
                                             ("2" (DELETE 2)
                                              (("2" (DELETE -1 -3 -5 -6)
                                                (("2" (EXPAND "TC" 1)
                                                  (("2" (FLATTEN)
                                                    (("2" (INST 2 "z")
                                                      (("2" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (DELETE -3 2)
                      (("2" (SKOLEM 1 ("x" "y"))
                        (("2" (SMASH)
                          (("1" (EXPAND "prec?")
                            (("1" (EXPAND "TC")
                              (("1" (EXPAND "before?") (("1" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOLEM -1 "z")
                            (("2" (FLATTEN)
                              (("2" (LEMMA "prec_is_transitive")
                                (("2" (INST -1 "b" "x" "z" "y")
                                  (("2" (SMASH) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|TC_induction| FORMULA-DECL NIL |relations| NIL)
    (|prec?| CONST-DECL "bool" |bundles| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|before?| CONST-DECL "bool" |bundles| NIL)
    (|prec_is_transitive| FORMULA-DECL NIL |bundles| NIL)
    (TC INDUCTIVE-DECL "bool" |relations| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|next_prec_pred| CONST-DECL "bool" |bundles| NIL)
    (|next_prec?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|prec_is_next_prec| 0
  (|prec_is_next_prec-1| NIL 3598729036
   ("" (SKOLEM 1 ("b" "n0" "n1"))
    (("" (LEMMA "next_prec_is_strict_total")
      (("" (INST?)
        (("" (EXPAND "strict_total_order?")
          (("" (EXPAND "trichotomous?")
            (("" (FLATTEN)
              (("" (INST?)
                (("" (LEMMA "next_prec_is_prec")
                  (("" (INST -1 "b" "n1" "n0")
                    (("" (LEMMA "prec_is_strict")
                      (("" (INST?)
                        (("" (EXPAND "strict_order?")
                          (("" (FLATTEN)
                            (("" (DELETE -4 -5)
                              (("" (SMASH)
                                (("1" (DELETE -3 1)
                                  (("1" (EXPAND "transitive?")
                                    (("1" (INST -2 "n0" "n1" "n0")
                                      (("1" (SMASH)
                                        (("1" (EXPAND "irreflexive?")
                                          (("1" (INST?) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REPLACE -3)
                                  (("2" (EXPAND "irreflexive?")
                                    (("2" (INST?) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|next_prec_is_strict_total| FORMULA-DECL NIL |bundles| NIL)
    (|strict_total_order?| CONST-DECL "bool" |orders| NIL)
    (|next_prec_is_prec| FORMULA-DECL NIL |bundles| NIL)
    (|prec_is_strict| FORMULA-DECL NIL |bundles| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|trichotomous?| CONST-DECL "bool" |orders| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL))
   SHOSTAK))
 (|next_prec_is_prec_rew| 0
  (|next_prec_is_prec_rew-1| NIL 3598732531
   ("" (SKOLEM!)
    (("" (LEMMA "next_prec_is_prec")
      (("" (INST?)
        (("" (LEMMA "prec_is_next_prec")
          (("" (INST?) (("" (SMASH) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|next_prec_is_prec| FORMULA-DECL NIL |bundles| NIL)
    (|prec_is_next_prec| FORMULA-DECL NIL |bundles| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL))
   SHOSTAK))
 (|transition_nodes_totally_ordered| 0
  (|transition_nodes_totally_ordered-1| NIL 3594425692
   ("" (SKOLEM 1 ("b" "n0" "n1"))
    (("" (LEMMA "next_prec_is_strict_total")
      (("" (INST?)
        (("" (EXPAND "strict_total_order?")
          (("" (FLATTEN)
            (("" (EXPAND "trichotomous?")
              (("" (INST?) (("" (SMASH) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|next_prec_is_strict_total| FORMULA-DECL NIL |bundles| NIL)
    (|strict_total_order?| CONST-DECL "bool" |orders| NIL)
    (|trichotomous?| CONST-DECL "bool" |orders| NIL)
    (|next_prec_is_prec_rew| FORMULA-DECL NIL |bundles| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL))
   SHOSTAK))
 (|next_prec_ordered| 0
  (|next_prec_ordered-1| NIL 3598915312
   ("" (SKOLEM 1 ("b" "i" "f"))
    (("" (FLATTEN)
      (("" (SKOLEM 1 ("m" "n"))
        ((""
          (CASE "FORALL (m, n: (tran_node?(b`space))):
        next_prec_pred(b)(m, n) IFF 1 + f(m) = f(n)")
          (("1" (DELETE -3)
            (("1" (CASE "next_prec?(b)(m, n) IFF f(m) < f(n)")
              (("1" (SMASH) NIL NIL)
               ("2" (DELETE 2)
                (("2" (EXPAND "next_prec?")
                  (("2"
                    (LEMMA
                     "tc_ordered[(tran_node?(b`space)),next_prec_pred(b)]")
                    (("2" (INST -1 "i" "f")
                      (("2" (SPLIT)
                        (("1" (INST -1 "m" "n") NIL NIL) ("2" (PROPAX) NIL NIL)
                         ("3" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (DELETE 2 -1)
            (("2" (SKOLEM 1 ("x" "y"))
              (("2" (INST -1 "x" "y")
                (("2" (SMASH)
                  (("1" (DELETE 1) (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (DELETE -1) (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|state| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|trans| FORMAL-CONST-DECL "setof[[state, state]]" |bundles| NIL)
    (|mesg| FORMAL-TYPE-DECL NIL |bundles| NIL)
    (|carried_by?| FORMAL-CONST-DECL "[mesg, mesg -> bool]" |bundles| NIL)
    (|encode| FORMAL-CONST-DECL "[state -> mesg]" |bundles| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|tran_node?| CONST-DECL "bool" |strand_spaces| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|next_prec_pred| CONST-DECL "bool" |bundles| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|next_prec?| CONST-DECL "bool" |bundles| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|next_prec_is_prec_rew| FORMULA-DECL NIL |bundles| NIL)
    (|tc_ordered| FORMULA-DECL NIL |tc_props| "../transitions/"))
   SHOSTAK)))

