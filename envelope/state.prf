(|state|
 (|state_induced_tpm_extend_enc_role| 0
  (|state_induced_tpm_extend_enc_role-1| NIL 3582808825
   ("" (SKOLEM 1 ("bu" "ra" "i" "f" "p" "n" "x"))
    (("" (FLATTEN)
      (("" (TYPEPRED "ra")
        (("" (DELETE -1)
          (("" (TYPEPRED "n")
            (("" (EXPAND "compat")
              (("" (FLATTEN)
                (("" (DELETE -3 -4)
                  (("" (LEMMA "enumerate_annotated_roles")
                    (("" (INST?)
                      (("" (SMASH)
                        (("1" (LEMMA "tpm_state_init_anno")
                          (("1" (INST?)
                            (("1" (SMASH)
                              (("1" (INST?) (("1" (SMASH) NIL NIL)) NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (LEMMA "tpm_power_on_anno")
                          (("2" (INST?)
                            (("2" (SMASH)
                              (("2" (INST?) (("2" (SMASH) NIL NIL)) NIL)) NIL))
                            NIL))
                          NIL)
                         ("3" (LEMMA "tpm_quote_anno")
                          (("3" (INST?)
                            (("3" (INST?)
                              (("3" (SMASH)
                                (("3" (SKOLEM! -4)
                                  (("3" (SMASH)
                                    (("3" (LEMMA "no_circularity_in_extend")
                                      (("3" (INST?)
                                        (("3" (SMASH)
                                          (("3" (INST?) (("3" (SMASH) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("4" (LEMMA "tpm_create_key_anno")
                          (("4" (INST?) (("4" (SMASH) NIL NIL)) NIL)) NIL)
                         ("5" (LEMMA "tpm_decrypt_anno")
                          (("5" (INST?)
                            (("5" (SMASH)
                              (("5" (SKOLEM! -4)
                                (("5" (SMASH)
                                  (("5" (LEMMA "no_circularity_in_extend")
                                    (("5" (INST?)
                                      (("5" (SMASH)
                                        (("5" (INST?) (("5" (SMASH) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("6" (LEMMA "alice_anno")
                          (("6" (INST?) (("6" (SMASH) NIL NIL)) NIL)) NIL)
                         ("7" (LEMMA "adversary_anno")
                          (("7" (INST?) (("7" (SMASH) NIL NIL)) NIL)) NIL)
                         ("8" (EXPAND "protocol_assignment?")
                          (("8" (INST?)
                            (("8" (EXPAND "member") (("8" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|member| CONST-DECL "bool" |sets| NIL)
    (|adversary_anno| FORMULA-DECL NIL |adversary| "../strand_spaces/")
    (|alice_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|tpm_decrypt_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|tpm_create_key_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|tpm_quote_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|no_circularity_in_extend| FORMULA-DECL NIL |tpm| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pcr| DEF-DECL "mesg" |tpm| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|tpm_power_on_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|tpm_state_init_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|anno| TYPE-EQ-DECL NIL |protocols_and_state| "../state_spaces/")
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|boot| ADT-CONSTRUCTOR-DECL "(boot?)" |tpm| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|enumerate_annotated_roles| FORMULA-DECL NIL |annotated_roles| NIL)
    (|anno_node?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL) (|state| TYPE-DECL NIL |tpm| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|prefix_boot_extend_anno| 0
  (|prefix_boot_extend_anno-1| NIL 3580455419
   ("" (SKOLEM!)
    (("" (FLATTEN)
      (("" (EXPAND "compatible")
        (("" (SKOLEM!)
          (("" (EXPAND "compat")
            (("" (FLATTEN)
              (("" (INST-CP -2 "n0!1" "n1!1")
                (("" (INST-CP -4 "n0!1" "a0!1")
                  (("" (INST-CP -4 "n1!1" "a1!1")
                    (("" (SMASH)
                      (("" (EXPAND "subset?")
                        (("" (INST -10 "(p!1(f!1(n0!1)), p!1(1 + f!1(n0!1)))")
                          ((""
                            (INST -11 "(p!1(f!1(n1!1)), p!1(1 + f!1(n1!1)))")
                            (("" (EXPAND "member")
                              (("" (REPLACE -10 :DIR RL)
                                (("" (REPLACE -11 :DIR RL)
                                  (("" (DELETE -10 -11)
                                    (("" (LEMMA "prefix_boot_extend")
                                      ((""
                                        (INST -1 "p!1" "x!1" "1 + f!1(n0!1)"
                                         "f!1(n1!1)")
                                        (("" (SMASH)
                                          (("" (SKOLEM -2 "j")
                                            (("" (FLATTEN)
                                              (("" (EXPAND "bijective?")
                                                (("" (FLATTEN)
                                                  (("" (EXPAND "surjective?")
                                                    (("" (INST -6 "j")
                                                      (("1" (SKOLEM -6 "n")
                                                        (("1"
                                                          (REPLACE -6 :DIR RL)
                                                          (("1" (DELETE -6)
                                                            (("1"
                                                              (INST-CP -6
                                                               "n0!1" "n")
                                                              (("1"
                                                                (INST-CP -6 "n"
                                                                 "n1!1")
                                                                (("1" (SMASH)
                                                                  (("1"
                                                                    (DELETE 1)
                                                                    (("1"
                                                                      (INST-CP
                                                                       -12 "n"
                                                                       "{t: trans | t`2 = extend(x!1, t`1)}")
                                                                      (("1"
                                                                        (SMASH)
                                                                        (("1"
                                                                          (INST?)
                                                                          (("1"
                                                                            (SMASH)
                                                                            (("1"
                                                                              (INST
                                                                               1
                                                                               "n"
                                                                               "p!1(f!1(n))")
                                                                              (("1"
                                                                                (SMASH)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "state_induced_tpm_extend_enc_role")
                                                                                  (("1"
                                                                                    (INST?)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "compat")
                                                                                      (("1"
                                                                                        (SMASH)
                                                                                        (("1"
                                                                                          (LEMMA
                                                                                           "tpm_extend_enc_anno")
                                                                                          (("1"
                                                                                            (INST
                                                                                             -1
                                                                                             "bu!1"
                                                                                             "ra!1"
                                                                                             "n")
                                                                                            (("1"
                                                                                              (SMASH)
                                                                                              (("1"
                                                                                                (SKOLEM!
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (INST-CP
                                                                                                   -4
                                                                                                   "n"
                                                                                                   "{t: trans |
                     pcr(t`1) = current_value!1 AND
                      t`2 = extend(value!1, t`1)}")
                                                                                                  (("1"
                                                                                                    (SMASH)
                                                                                                    (("1"
                                                                                                      (REPLACE
                                                                                                       -5
                                                                                                       :DIR
                                                                                                       RL)
                                                                                                      (("1"
                                                                                                        (SMASH)
                                                                                                        (("1"
                                                                                                          (REPLACE
                                                                                                           -10)
                                                                                                          (("1"
                                                                                                            (DECOMPOSE-EQUALITY
                                                                                                             -6)
                                                                                                            (("1"
                                                                                                              (REPLACE
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (PROPAX)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (SMASH) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|prefix_boot_extend| FORMULA-DECL NIL |tpm| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|j| SKOLEM-CONST-DECL "nat" |state| NIL)
    (|i!1| SKOLEM-CONST-DECL "nat" |state| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |tpm| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|state_induced_tpm_extend_enc_role| FORMULA-DECL NIL |state| NIL)
    (|tpm_extend_enc_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|pcr| DEF-DECL "mesg" |tpm| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|m| ADT-ACCESSOR-DECL "[(extend?) -> mesg]" |tpm| NIL)
    (|st| ADT-ACCESSOR-DECL "[(extend?) -> state]" |tpm| NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|anno_node?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |protocols_and_state| "../state_spaces/")
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL) (|state| TYPE-DECL NIL |tpm| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/"))
   SHOSTAK))
 (|long_strands_are_alice_or_extend_enc| 0
  (|long_strands_are_alice_or_extend_enc-1| NIL 3580232491
   ("" (SKOLEM!)
    (("" (FLATTEN)
      (("" (TYPEPRED "r!1")
        (("" (LEMMA "enumerate_annotated_roles")
          (("" (INST?)
            (("" (LEMMA "enumerate_adversary_roles")
              (("" (INST?) (("" (FLATTEN) (("" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|enumerate_annotated_roles| FORMULA-DECL NIL |annotated_roles| NIL)
    (|enumerate_adversary_roles| FORMULA-DECL NIL |adversary|
     "../strand_spaces/")
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|atom?| CONST-DECL "bool" |init_alg| "../strand_spaces/")
    (|atom| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|create_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|simple_role_item| CONST-DECL "role_item" |roles| "../strand_spaces/")
    (|no_annotations| DEF-DECL "annotations" |roles| "../strand_spaces/")
    (|no_assumptions| DEF-DECL "assumptions" |roles| "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|role_pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_index?| CONST-DECL "bool" |traces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|tag?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|tag| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|tag_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|tag_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|hash_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|hash_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|pair_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|pair_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|sep_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|sep_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|hash?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|key| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|enc_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|dec_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|pcr| DEF-DECL "mesg" |tpm| NIL)
    (|tpm_state_init_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_state_init_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_state_init_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_state_init_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_state_init_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|power_on| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_power_on_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_power_on_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_power_on_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_power_on_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_power_on_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|quote| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_quote_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_quote_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_quote_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_quote_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_quote_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|create_key| CONST-DECL "tag" |annotated_roles| NIL)
    (|created| CONST-DECL "tag" |annotated_roles| NIL)
    (|tpm_create_key_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_create_key_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_create_key_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_create_key_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|decrypt| CONST-DECL "tag" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|tpm_decrypt_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|tpm_decrypt_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_decrypt_annotations| CONST-DECL "annotations" |annotated_roles| NIL)
    (|tpm_decrypt_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_decrypt_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL) (|state| TYPE-DECL NIL |tpm| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|tpm_extend_enc_inst_role| 0
  (|tpm_extend_enc_inst_role-1| NIL 3580232668
   ("" (SKOLEM!)
    (("" (FLATTEN)
      (("" (SMASH)
        (("" (LEMMA "long_strands_are_alice_or_extend_enc")
          (("" (TYPEPRED "ra!1")
            (("" (INST -3 "bu!1`space" "z!1" "5" "ra!1(z!1)")
              (("1" (EXPAND "role_assignment?")
                (("1" (INST -1 "z!1")
                  (("1" (SKOLEM -1 "ri")
                    (("1" (EXPAND "role_pred")
                      (("1" (SMASH)
                        (("1" (TYPEPRED "ri")
                          (("1" (REPLACE -4)
                            (("1" (DELETE -3 -4 -7 -8 -9 +)
                              (("1" (EXPAND "alice_role")
                                (("1" (SKOLEM!)
                                  (("1" (REPLACE -1)
                                    (("1" (DELETE -1)
                                      (("1" (EXPAND "inst")
                                        (("1" (FLATTEN)
                                          (("1" (DELETE -2 -3)
                                            (("1" (EXPAND "prefix?")
                                              (("1" (FLATTEN)
                                                (("1" (INST -2 "1")
                                                  (("1" (INST -5 "1")
                                                    (("1" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (INST? 1)
                          (("2" (EXPAND "pred") (("2" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "protocol_assignment?")
                (("2" (INST?)
                  (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|long_strands_are_alice_or_extend_enc| FORMULA-DECL NIL |state| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|bu!1| SKOLEM-CONST-DECL "bundle[mesg, carried_by?]" |state| NIL)
    (|ra!1| SKOLEM-CONST-DECL "assignment(bu!1)" |state| NIL)
    (|z!1| SKOLEM-CONST-DECL "strand[mesg, carried_by?](bu!1`space)" |state|
     NIL)
    (|role_pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|finite_extend| APPLICATION-JUDGEMENT "finite_set[T]" |extend_set_props|
     NIL)
    (|nonempty_extend| APPLICATION-JUDGEMENT "(nonempty?[T])"
     |extend_set_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|alice_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|no_annotations| DEF-DECL "annotations" |roles| "../strand_spaces/")
    (|alice_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|alice_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|alice_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|obtain_pcr| CONST-DECL "mesg" |annotated_roles| NIL)
    (|obtain| CONST-DECL "tag" |annotated_roles| NIL)
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|alice_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL) (|state| TYPE-DECL NIL |tpm| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|tpm_extend_enc_inst_rew| FORMULA-DECL NIL |strands| NIL))
   SHOSTAK))
 (|tpm_extend_enc_inst_anno_TCC1| 0
  (|tpm_extend_enc_inst_anno_TCC1-1| NIL 3581321927 ("" (SUBTYPE-TCC) NIL NIL)
   ((|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|tpm_extend_enc_inst_anno| 0
  (|tpm_extend_enc_inst_anno-1| NIL 3581325128
   ("" (SKOLEM!)
    (("" (FLATTEN)
      (("" (LEMMA "tpm_extend_enc_inst_role")
        (("" (INST?)
          (("" (INST?)
            (("" (SPLIT)
              (("1" (EXPAND "annotations")
                (("1" (EXPAND "tpm_extend_enc_inst")
                  (("1" (EXPAND "pred")
                    (("1"
                      (INST 1
                       "           tpm_extend_enc_role_item(value!1, current_value!1, pcrkey!1,
                                    esk!1, tne!1, tpmkey!1)
")
                      (("1" (SMASH)
                        (("1" (DELETE -1 -2)
                          (("1" (GRIND)
                            (("1" (DECOMPOSE-EQUALITY)
                              (("1" (DECOMPOSE-EQUALITY)
                                (("1" (SMASH)
                                  (("1" (EXPAND "pcr" -2)
                                    (("1" (SMASH)
                                      (("1" (DECOMPOSE-EQUALITY -2)
                                        (("1" (DECOMPOSE-EQUALITY -1)
                                          (("1" (REPLACE -1 :DIR RL)
                                            (("1" (DELETE -1)
                                              (("1" (REPLACE -1 :DIR RL)
                                                (("1" (DELETE -1)
                                                  (("1" (SMASH)
                                                    (("1" (REPLACE -1)
                                                      (("1"
                                                        (APPLY-EXTENSIONALITY
                                                         2)
                                                        NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (REPLACE -2)
                                    (("2" (DELETE -2)
                                      (("2" (REPLACE -1 :DIR RL)
                                        (("2" (DELETE -1)
                                          (("2" (SMASH) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (REPLACE -1)
                        (("2" (DELETE -1)
                          (("2" (EXPAND "tpm_extend_enc_role")
                            (("2" (INST?) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|tpmkey!1| SKOLEM-CONST-DECL "akey" |state| NIL)
    (|tne!1| SKOLEM-CONST-DECL "data" |state| NIL)
    (|esk!1| SKOLEM-CONST-DECL "skey" |state| NIL)
    (|pcrkey!1| SKOLEM-CONST-DECL "skey" |state| NIL)
    (|current_value!1| SKOLEM-CONST-DECL "mesg" |state| NIL)
    (|value!1| SKOLEM-CONST-DECL "mesg" |state| NIL)
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|z!1| SKOLEM-CONST-DECL "strand[mesg, carried_by?](bu!1`space)" |state|
     NIL)
    (|ra!1| SKOLEM-CONST-DECL "assignment(bu!1)" |state| NIL)
    (|bu!1| SKOLEM-CONST-DECL "bundle[mesg, carried_by?]" |state| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |tpm| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|pr| ADT-CONSTRUCTOR-DECL "[[mesg, mesg] -> (pair?)]" |init_alg|
     "../strand_spaces/")
    (|pair?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|hs| ADT-CONSTRUCTOR-DECL "[mesg -> (hash?)]" |init_alg|
     "../strand_spaces/")
    (|hash?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|pcr| DEF-DECL "mesg" |tpm| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|up| ADT-CONSTRUCTOR-DECL "[T -> (up?)]" |lift_adt| NIL)
    (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL)
    (|lift_up_extensionality| FORMULA-DECL NIL |lift_adt| NIL)
    (|snd| ADT-ACCESSOR-DECL "[(pair?) -> mesg]" |init_alg|
     "../strand_spaces/")
    (|fst| ADT-ACCESSOR-DECL "[(pair?) -> mesg]" |init_alg|
     "../strand_spaces/")
    (|state_extend_extensionality| FORMULA-DECL NIL |tpm| NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|key| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|n| ADT-ACCESSOR-DECL "[key -> mesg]" |init_alg| "../strand_spaces/")
    (|m| ADT-ACCESSOR-DECL "[(extend?) -> mesg]" |tpm| NIL)
    (|st| ADT-ACCESSOR-DECL "[(extend?) -> state]" |tpm| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|tpm_extend_enc_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL) (|state| TYPE-DECL NIL |tpm| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|tpm_extend_enc_inst_role| FORMULA-DECL NIL |state| NIL))
   SHOSTAK))
 (|exists_extend_anno| 0
  (|exists_extend_anno-1| NIL 3580234900
   ("" (SKOLEM 1 ("bu" "ra" "value" "st" "n"))
    (("" (FLATTEN)
      (("" (EXPAND "compatible")
        (("" (SKOLEM -1 ("i" "f" "p"))
          (("" (LEMMA "state_induced_tpm_extend_enc_role")
            (("" (INST?)
              (("" (INST -1 "n" "value")
                (("" (SPLIT -1)
                  (("1" (CASE "n`2=4")
                    (("1" (EXPAND "annotations")
                      (("1" (SKOLEM -4 "ri")
                        (("1" (TYPEPRED "ri")
                          (("1" (REPLACE -3)
                            (("1" (EXPAND "tpm_extend_enc_role" -1)
                              (("1" (SKOLEM! -1)
                                (("1" (SPLIT 1)
                                  (("1" (PROPAX) NIL NIL)
                                   ("2"
                                    (INST 1 "pcrkey!1" "esk!1" "tne!1"
                                     "tpmkey!1")
                                    (("2" (REPLACE -2)
                                      (("2"
                                        (CASE
                                            "value=value!1 and pcr(st)=current_value!1")
                                        (("1" (FLATTEN)
                                          (("1" (REPLACE -1)
                                            (("1" (REPLACE -2 :DIR RL)
                                              (("1"
                                                (EXPAND "tpm_extend_enc_inst")
                                                (("1" (EXPAND "pred")
                                                  (("1" (SMASH) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (REPLACE -1)
                                          (("2" (FLATTEN)
                                            (("2" (DELETE -1 -2 -3 -4 -5 2)
                                              (("2"
                                                (CASE "up({t: trans |
            pcr(t`1) = current_value!1 AND t`2 = extend(value!1, t`1)})
       = up({t: trans | t`1 = st AND t`2 = extend(value, t`1)})")
                                                (("1" (DELETE -2)
                                                  (("1" (DECOMPOSE-EQUALITY)
                                                    (("1" (DECOMPOSE-EQUALITY)
                                                      (("1"
                                                        (INST -1
                                                         "(st,extend(value,st))")
                                                        (("1" (SMASH)
                                                          (("1"
                                                            (DECOMPOSE-EQUALITY
                                                             -2)
                                                            NIL NIL))
                                                          NIL)
                                                         ("2" (EXPAND "trans")
                                                          (("2" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (DELETE 2)
                                                  (("2" (GRIND)
                                                    (("2"
                                                      (DECOMPOSE-EQUALITY -1)
                                                      (("2"
                                                        (DECOMPOSE-EQUALITY -1)
                                                        (("2"
                                                          (DECOMPOSE-EQUALITY
                                                           1)
                                                          (("2"
                                                            (DECOMPOSE-EQUALITY
                                                             1)
                                                            (("2" (INST?)
                                                              (("2" (SMASH)
                                                                (("1"
                                                                  (REPLACE -2)
                                                                  (("1"
                                                                    (DELETE -2)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1 :DIR
                                                                       RL)
                                                                      (("1"
                                                                        (DELETE
                                                                         -)
                                                                        (("1"
                                                                          (DECOMPOSE-EQUALITY
                                                                           2)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (DECOMPOSE-EQUALITY
                                                                   2)
                                                                  (("2"
                                                                    (DECOMPOSE-EQUALITY
                                                                     1)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -2)
                                                                      (("1"
                                                                        (SMASH)
                                                                        NIL
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (REPLACE
                                                                       -2)
                                                                      (("2"
                                                                        (REPLACE
                                                                         -1
                                                                         :DIR
                                                                         RL)
                                                                        (("2"
                                                                          (SMASH)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("3"
                                                                  (DECOMPOSE-EQUALITY
                                                                   -4)
                                                                  (("3"
                                                                    (DECOMPOSE-EQUALITY
                                                                     -1)
                                                                    (("3"
                                                                      (REPLACE
                                                                       -1 :DIR
                                                                       RL)
                                                                      (("3"
                                                                        (DELETE
                                                                         -1)
                                                                        (("3"
                                                                          (REPLACE
                                                                           -1
                                                                           :DIR
                                                                           RL)
                                                                          (("3"
                                                                            (SMASH)
                                                                            (("3"
                                                                              (REPLACE
                                                                               -2)
                                                                              (("3"
                                                                                (APPLY-EXTENSIONALITY
                                                                                 1)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SMASH)
                      (("2" (LEMMA "tpm_extend_enc_anno")
                        (("2" (INST?) (("2" (SMASH) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL)
                   ("3" (EXPAND "compat")
                    (("3" (FLATTEN)
                      (("3" (INST? -3) (("3" (SMASH) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|anno_node?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|anno| TYPE-EQ-DECL NIL |protocols_and_state| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|tpm_extend_enc_anno| FORMULA-DECL NIL |annotated_roles| NIL)
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|tpm_extend_enc_role| CONST-DECL "bool" |annotated_roles| NIL)
    (|pr| ADT-CONSTRUCTOR-DECL "[[mesg, mesg] -> (pair?)]" |init_alg|
     "../strand_spaces/")
    (|pair?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|hs| ADT-CONSTRUCTOR-DECL "[mesg -> (hash?)]" |init_alg|
     "../strand_spaces/")
    (|hash?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|lift_up_extensionality| FORMULA-DECL NIL |lift_adt| NIL)
    (|n| ADT-ACCESSOR-DECL "[key -> mesg]" |init_alg| "../strand_spaces/")
    (|key| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|state_extend_extensionality| FORMULA-DECL NIL |tpm| NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|fst| ADT-ACCESSOR-DECL "[(pair?) -> mesg]" |init_alg|
     "../strand_spaces/")
    (|snd| ADT-ACCESSOR-DECL "[(pair?) -> mesg]" |init_alg|
     "../strand_spaces/")
    (|mesg_pr_extensionality| FORMULA-DECL NIL |init_alg| "../strand_spaces/")
    (|mesg_hs_extensionality| FORMULA-DECL NIL |init_alg| "../strand_spaces/")
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|m| ADT-ACCESSOR-DECL "[(extend?) -> mesg]" |tpm| NIL)
    (|st| ADT-ACCESSOR-DECL "[(extend?) -> state]" |tpm| NIL)
    (|value| SKOLEM-CONST-DECL "mesg" |state| NIL)
    (|st| SKOLEM-CONST-DECL "state" |state| NIL)
    (|down| ADT-ACCESSOR-DECL "[(up?) -> T]" |lift_adt| NIL)
    (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL)
    (|up| ADT-CONSTRUCTOR-DECL "[T -> (up?)]" |lift_adt| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |tpm| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pcr| DEF-DECL "mesg" |tpm| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|state_induced_tpm_extend_enc_role| FORMULA-DECL NIL |state| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/"))
   SHOSTAK))
 (|exists_prefix_boot_extend_strand_TCC1| 0
  (|exists_prefix_boot_extend_strand_TCC1-1| NIL 3580232491
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|exists_prefix_boot_extend_strand_TCC2| 0
  (|exists_prefix_boot_extend_strand_TCC2-1| NIL 3580232491
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|exists_prefix_boot_extend_strand_TCC3| 0
  (|exists_prefix_boot_extend_strand_TCC3-1| NIL 3580232491
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|exists_prefix_boot_extend_strand| 0
  (|exists_prefix_boot_extend_strand-1| NIL 3580239523
   ("" (SKOLEM 1 ("bu" "ra"))
    (("" (FLATTEN)
      (("" (SKOLEM!)
        (("" (FLATTEN)
          (("" (LEMMA "tpm_extend_enc_inst_anno")
            (("" (INST?)
              (("" (INST?)
                (("" (LEMMA "tpm_extend_enc_inst_anno")
                  (("" (INST? :WHERE -5)
                    (("" (INST?)
                      (("" (SPLIT -2)
                        (("1" (SPLIT -2)
                          (("1"
                            (CASE
                                "anno_node?(bu,ra)(z0!1,4) and anno_node?(bu,ra)(z1!1,4)")
                            (("1" (FLATTEN)
                              (("1" (LEMMA "prefix_boot_extend_anno")
                                (("1"
                                  (INST -1 "bu" "ra" "(z0!1,4)" "(z1!1,4)"
                                   "x!1" "{t: trans |
                     pcr(t`1) = pcr(st0!1) AND t`2 = extend(value0!1, t`1)}"
                                   "{t: trans |
                     pcr(t`1) = pcr(st1!1) AND t`2 = extend(value1!1, t`1)}"
                                   "_" "_")
                                  (("1"
                                    (INST -1 "extend(value0!1,st0!1)" "st1!1")
                                    (("1" (SPLIT -1)
                                      (("1" (PROPAX) NIL NIL)
                                       ("2" (SKOLEM -1 ("n" "st"))
                                        (("2" (DELETE 1)
                                          (("2" (FLATTEN)
                                            (("2" (LEMMA "exists_extend_anno")
                                              (("2" (INST? :WHERE -2)
                                                (("2" (SPLIT -1)
                                                  (("1" (FLATTEN)
                                                    (("1" (SKOLEM! -2)
                                                      (("1" (INST? 1 :WHERE -2)
                                                        (("1" (SMASH)
                                                          (("1"
                                                            (CASE-REPLACE
                                                             "n=(n`1,4)")
                                                            (("1" (SMASH)
                                                              (("1"
                                                                (LEMMA
                                                                 "after_send_implies_after_previous")
                                                                (("1"
                                                                  (INST? :WHERE
                                                                   -10)
                                                                  (("1" (SMASH)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "after_send_implies_after_previous")
                                                                      (("1"
                                                                        (INST?
                                                                         :WHERE
                                                                         -2)
                                                                        (("1"
                                                                          (SMASH)
                                                                          (("1"
                                                                            (REPLACE
                                                                             -2)
                                                                            (("1"
                                                                              (DELETE
                                                                               -2
                                                                               -3
                                                                               -4
                                                                               -5)
                                                                              (("1"
                                                                                (DELETE
                                                                                 -2
                                                                                 -3
                                                                                 -4
                                                                                 -5)
                                                                                (("1"
                                                                                  (DELETE
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   -5)
                                                                                  (("1"
                                                                                    (DELETE
                                                                                     -2
                                                                                     -3
                                                                                     -4
                                                                                     -5)
                                                                                    (("1"
                                                                                      (DELETE
                                                                                       -2
                                                                                       -3
                                                                                       -4
                                                                                       -5)
                                                                                      (("1"
                                                                                        (DELETE
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         -5)
                                                                                        (("1"
                                                                                          (DELETE
                                                                                           -2
                                                                                           -3
                                                                                           -4
                                                                                           -5)
                                                                                          (("1"
                                                                                            (DELETE
                                                                                             1)
                                                                                            (("1"
                                                                                              (LEMMA
                                                                                               "prec_is_strict")
                                                                                              (("1"
                                                                                                (INST?)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "strict_order?")
                                                                                                  (("1"
                                                                                                    (FLATTEN)
                                                                                                    (("1"
                                                                                                      (DELETE
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "irreflexive?")
                                                                                                        (("1"
                                                                                                          (INST?)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (DELETE
                                                                       2)
                                                                      (("2"
                                                                        (DELETE
                                                                         -1 -2
                                                                         -3 -4)
                                                                        (("2"
                                                                          (DELETE
                                                                           -1
                                                                           -2
                                                                           -3
                                                                           -4)
                                                                          (("2"
                                                                            (DELETE
                                                                             -1
                                                                             -2
                                                                             -3
                                                                             -4)
                                                                            (("2"
                                                                              (DELETE
                                                                               -1
                                                                               -2
                                                                               -3
                                                                               -4)
                                                                              (("2"
                                                                                (DELETE
                                                                                 -1
                                                                                 -2
                                                                                 -3)
                                                                                (("2"
                                                                                  (DELETE
                                                                                   -3
                                                                                   -4
                                                                                   -5
                                                                                   -6
                                                                                   -7)
                                                                                  (("2"
                                                                                    (GRIND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (SMASH) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (CASE-REPLACE
                                                             "n=(n`1,4)")
                                                            (("1" (SMASH)
                                                              (("1"
                                                                (LEMMA
                                                                 "after_send_implies_after_previous")
                                                                (("1"
                                                                  (INST? -1
                                                                   :WHERE -9)
                                                                  (("1" (SMASH)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -2)
                                                                      (("1"
                                                                        (DELETE
                                                                         -1 -2
                                                                         -3)
                                                                        (("1"
                                                                          (DELETE
                                                                           -14
                                                                           -15
                                                                           -16
                                                                           -17)
                                                                          (("1"
                                                                            (DELETE
                                                                             -14
                                                                             -15
                                                                             -16
                                                                             -17)
                                                                            (("1"
                                                                              (DELETE
                                                                               -14
                                                                               -15
                                                                               -16
                                                                               -17)
                                                                              (("1"
                                                                                (DELETE
                                                                                 1)
                                                                                (("1"
                                                                                  (DELETE
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   -5)
                                                                                  (("1"
                                                                                    (DELETE
                                                                                     -2
                                                                                     -3
                                                                                     -4
                                                                                     -5)
                                                                                    (("1"
                                                                                      (DELETE
                                                                                       -2
                                                                                       -3)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "prefix?")
                                                                                        (("1"
                                                                                          (FLATTEN)
                                                                                          (("1"
                                                                                            (INST
                                                                                             -2
                                                                                             "4")
                                                                                            (("1"
                                                                                              (INST
                                                                                               -5
                                                                                               "4")
                                                                                              (("1"
                                                                                                (GRIND)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (DELETE
                                                                       2)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "event_at")
                                                                        (("2"
                                                                          (DELETE
                                                                           -10
                                                                           -11
                                                                           -12
                                                                           -13)
                                                                          (("2"
                                                                            (DELETE
                                                                             -10
                                                                             -11
                                                                             -12
                                                                             -13)
                                                                            (("2"
                                                                              (DELETE
                                                                               -10
                                                                               -11
                                                                               -12
                                                                               -13)
                                                                              (("2"
                                                                                (DELETE
                                                                                 -10
                                                                                 -11
                                                                                 -12
                                                                                 -13)
                                                                                (("2"
                                                                                  (DELETE
                                                                                   -1
                                                                                   -2
                                                                                   -3)
                                                                                  (("2"
                                                                                    (DELETE
                                                                                     -2
                                                                                     -3
                                                                                     -4)
                                                                                    (("2"
                                                                                      (DELETE
                                                                                       -2
                                                                                       -3
                                                                                       -4)
                                                                                      (("2"
                                                                                        (GRIND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (SMASH) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (PROPAX) NIL NIL)
                                                   ("3" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (PROPAX) NIL NIL)
                                       ("4" (PROPAX) NIL NIL)
                                       ("5" (PROPAX) NIL NIL)
                                       ("6"
                                        (CASE
                                            "prec?(bu)((z1!1, 3), (z1!1, 4))")
                                        (("1" (LEMMA "prec_is_transitive")
                                          (("1" (INST? :WHERE 1)
                                            (("1" (INST? :WHERE -2)
                                              (("1" (SMASH) NIL NIL)
                                               ("2"
                                                (DELETE -1 -2 -3 -4 -5 -6 -7 -9
                                                        -10 2 3 4)
                                                (("2" (SMASH) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (DELETE 2 3 4)
                                          (("2"
                                            (LEMMA "strand_succession_prec")
                                            (("2" (INST? :WHERE 1)
                                              (("1" (SMASH) NIL NIL)
                                               ("2" (SMASH) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (SMASH) NIL NIL))
                                        NIL)
                                       ("7" (DELETE - 2 3)
                                        (("7" (EXPAND "subset?")
                                          (("7" (SKOLEM!)
                                            (("7" (EXPAND "member")
                                              (("7" (SMASH) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("8" (DELETE - 2 3)
                                        (("8" (EXPAND "subset?")
                                          (("8" (SKOLEM!)
                                            (("8" (EXPAND "member")
                                              (("8" (SMASH) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("9" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (DELETE -3 -4 -5 -6 -7)
                              (("2" (DELETE 2 3)
                                (("2" (EXPAND "anno_node?")
                                  (("2" (SMASH)
                                    (("1" (INST?) NIL NIL)
                                     ("2" (INST?) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|pcr| DEF-DECL "mesg" |tpm| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |tpm| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|z1!1| SKOLEM-CONST-DECL "strand[mesg, carried_by?](bu`space)" |state|
     NIL)
    (|bu| SKOLEM-CONST-DECL "bundle[mesg, carried_by?]" |state| NIL)
    (|ra| SKOLEM-CONST-DECL "assignment(bu)" |state| NIL)
    (|z0!1| SKOLEM-CONST-DECL "strand[mesg, carried_by?](bu`space)" |state|
     NIL)
    (|exists_extend_anno| FORMULA-DECL NIL |state| NIL)
    (|tpm_extend_enc_inst_rew| FORMULA-DECL NIL |strands| NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prec_is_strict| FORMULA-DECL NIL |bundles| "../strand_spaces/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|after_send_implies_after_previous| FORMULA-DECL NIL |bundles|
     "../strand_spaces/")
    (|strand_succession_prec| FORMULA-DECL NIL |bundles| "../strand_spaces/")
    (|prec_is_transitive| FORMULA-DECL NIL |bundles| "../strand_spaces/")
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|prefix_boot_extend_anno| FORMULA-DECL NIL |state| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|anno_node?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|tpm_extend_enc_inst_anno| FORMULA-DECL NIL |state| NIL))
   SHOSTAK))
 (|subterm_order| 0
  (|subterm_order-1| NIL 3598036406
   ("" (INDUCT "st0")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM!)
      (("2" (FLATTEN)
        (("2" (INDUCT "st1")
          (("1" (SMASH)
            (("1" (INST?)
              (("1" (SMASH) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (SKOLEM 1 ("v" "s"))
            (("2" (FLATTEN)
              (("2" (EXPAND "subterm" -3)
                (("2" (SMASH)
                  (("1" (DECOMPOSE-EQUALITY -2)
                    (("1" (REPLACE -1)
                      (("1" (REPLACE -2)
                        (("1" (DELETE -1 -2) (("1" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (DELETE -1 -3)
                    (("2" (GRIND)
                      (("1" (REPLACE -1 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)
                       ("2" (GENERALIZE "extend2_var!1" "x" "state")
                        (("2" (INDUCT "x")
                          (("1" (SMASH) NIL NIL)
                           ("2" (SKOLEM 1 ("val" "sta"))
                            (("2" (FLATTEN)
                              (("2" (SMASH)
                                (("2" (REPLACE -1 :DIR RL)
                                  (("2" (DELETE -1) (("2" (SMASH) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |tpm| NIL)
    (|boot| ADT-CONSTRUCTOR-DECL "(boot?)" |tpm| NIL)
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|m| ADT-ACCESSOR-DECL "[(extend?) -> mesg]" |tpm| NIL)
    (|st| ADT-ACCESSOR-DECL "[(extend?) -> state]" |tpm| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|state_induction| FORMULA-DECL NIL |tpm| NIL)
    (|subterm| ADT-DEF-DECL "boolean" |tpm| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[state])" |tpm| NIL)
    (|strict_well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|state| TYPE-DECL NIL |tpm| NIL))
   SHOSTAK))
 (|subterm_no_circularity_in_extend| 0
  (|subterm_no_circularity_in_extend-1| NIL 3598030892
   ("" (SKOLEM!)
    (("" (LEMMA "subterm_order")
      (("" (INST?)
        (("" (SMASH) (("" (DELETE -1) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|subterm_order| FORMULA-DECL NIL |state| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[state])" |tpm| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |tpm| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL))
   SHOSTAK))
 (|state_split_and_prefix_boot_extend_aux_TCC1| 0
  (|state_split_and_prefix_boot_extend_aux_TCC1-1| NIL 3598026123
   ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|state_split_and_prefix_boot_extend_aux_TCC2| 0
  (|state_split_and_prefix_boot_extend_aux_TCC2-1| NIL 3598026123
   ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|state_split_and_prefix_boot_extend_aux_TCC3| 0
  (|state_split_and_prefix_boot_extend_aux_TCC3-1| NIL 3598026123
   ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|state_split_and_prefix_boot_extend_aux_TCC4| 0
  (|state_split_and_prefix_boot_extend_aux_TCC4-1| NIL 3598026123
   ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|state_split_and_prefix_boot_extend_aux_TCC5| 0
  (|state_split_and_prefix_boot_extend_aux_TCC5-1| NIL 3598026123
   ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|state_split_and_prefix_boot_extend_aux_TCC6| 0
  (|state_split_and_prefix_boot_extend_aux_TCC6-1| NIL 3598026123
   ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|state_split_and_prefix_boot_extend_aux| 0
  (|state_split_and_prefix_boot_extend_aux-1| NIL 3598026124
   ("" (SKOLEM 1 ("bu" "ra"))
    (("" (FLATTEN)
      (("" (SKOLEM!)
        (("" (FLATTEN)
          ((""
            (CASE
                "prec?(bu)((z0!1, 4), (z1!1, 4)) or prec?(bu)((z1!1, 4), (z0!1, 4))")
            (("1" (SPLIT)
              (("1" (CASE "prec?(bu)((z0!1, 4), (z1!1, 3))")
                (("1" (DELETE -2)
                  (("1" (LEMMA "exists_prefix_boot_extend_strand")
                    (("1" (INST? -1)
                      (("1" (SPLIT)
                        (("1" (INST? -1 :WHERE -2)
                          (("1" (INST?)
                            (("1" (INST?)
                              (("1" (INST?)
                                (("1" (SPLIT)
                                  (("1"
                                    (LEMMA "subterm_no_circularity_in_extend")
                                    (("1" (INST?) NIL NIL)) NIL)
                                   ("2" (SKOLEM!)
                                    (("2" (FLATTEN)
                                      (("2" (INST?) (("2" (SMASH) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (PROPAX) NIL NIL)
                                   ("4" (PROPAX) NIL NIL)
                                   ("5" (PROPAX) NIL NIL)
                                   ("6" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (LEMMA "after_send_implies_after_previous")
                  (("2" (DELETE 3 -6)
                    (("2" (INST? :WHERE -2)
                      (("1" (SPLIT)
                        (("1"
                          (CASE
                              "event_at(bu`space)(z0!1, 4) = event_at(bu`space)(z1!1, 4)")
                          (("1" (DELETE -2 -3 -4 1)
                            (("1" (SMASH)
                              (("1" (DELETE -4 -5 -6 -9 -10 -11)
                                (("1" (GRIND)
                                  (("1" (DECOMPOSE-EQUALITY -7)
                                    (("1" (DECOMPOSE-EQUALITY -1)
                                      (("1" (DECOMPOSE-EQUALITY -1)
                                        (("1" (DECOMPOSE-EQUALITY -1)
                                          (("1" (DECOMPOSE-EQUALITY -1) NIL
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL))
                          NIL)
                         ("2" (SMASH) NIL NIL) ("3" (PROPAX) NIL NIL)
                         ("4" (DELETE -1 -2 -3 2 3)
                          (("4" (SMASH)
                            (("4" (DELETE -3 -4 -5) (("4" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SMASH) NIL NIL) ("3" (SMASH) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (SMASH) NIL NIL))
                NIL)
               ("2" (CASE "prec?(bu)((z1!1, 4), (z0!1, 3))")
                (("1" (DELETE -2)
                  (("1" (LEMMA "exists_prefix_boot_extend_strand")
                    (("1" (INST?)
                      (("1" (SPLIT)
                        (("1" (INST? -1 :WHERE -2)
                          (("1" (INST?)
                            (("1" (INST?)
                              (("1" (INST?)
                                (("1" (SPLIT)
                                  (("1"
                                    (LEMMA "subterm_no_circularity_in_extend")
                                    (("1" (INST?) NIL NIL)) NIL)
                                   ("2" (SKOLEM!)
                                    (("2" (FLATTEN)
                                      (("2" (INST?) (("2" (SMASH) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (PROPAX) NIL NIL)
                                   ("4" (PROPAX) NIL NIL)
                                   ("5" (PROPAX) NIL NIL)
                                   ("6" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (DELETE 3 -5)
                  (("2" (LEMMA "after_send_implies_after_previous")
                    (("2" (INST? -1 :WHERE -2)
                      (("1" (SPLIT)
                        (("1"
                          (CASE
                              "event_at(bu`space)(z0!1, 4) = event_at(bu`space)(z1!1, 4)")
                          (("1" (DELETE -2 -3 -4 1)
                            (("1" (SMASH)
                              (("1" (DELETE -4 -5 -6 -9 -10 -11)
                                (("1" (GRIND)
                                  (("1" (DECOMPOSE-EQUALITY -7)
                                    (("1" (DECOMPOSE-EQUALITY -1)
                                      (("1" (DECOMPOSE-EQUALITY -1)
                                        (("1" (DECOMPOSE-EQUALITY -1)
                                          (("1" (DECOMPOSE-EQUALITY -1) NIL
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL))
                          NIL)
                         ("2" (SMASH) NIL NIL) ("3" (PROPAX) NIL NIL)
                         ("4" (DELETE -1 -2 -4 2 3)
                          (("4" (SMASH)
                            (("4" (DELETE -3 -4 -5) (("4" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SMASH) NIL NIL) ("3" (SMASH) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (SMASH) NIL NIL))
                NIL))
              NIL)
             ("2" (FLATTEN)
              (("2" (LEMMA "annotated_nodes_totally_ordered")
                (("2" (INST?)
                  (("2" (INST?)
                    (("1" (DELETE 4 -5)
                      (("1" (SPLIT)
                        (("1" (DECOMPOSE-EQUALITY -1)
                          (("1"
                            (CASE
                                "event_at(bu`space)(z0!1, 4) =event_at(bu`space)(z1!1, 4)")
                            (("1" (DELETE -2 -3 1 2)
                              (("1" (SMASH)
                                (("1" (DELETE -4 -5 -6 -9 -10 -11)
                                  (("1" (GRIND)
                                    (("1" (DECOMPOSE-EQUALITY -7)
                                      (("1" (DECOMPOSE-EQUALITY -1)
                                        (("1" (DECOMPOSE-EQUALITY -1)
                                          (("1" (DECOMPOSE-EQUALITY -1)
                                            (("1" (DECOMPOSE-EQUALITY -1) NIL
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL)
                         ("4" (PROPAX) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (DELETE -2 -4 2 3 4 5)
                      (("2" (LEMMA "tpm_extend_enc_inst_anno")
                        (("2" (INST?)
                          (("2" (INST?)
                            (("2" (SPLIT)
                              (("1" (EXPAND "anno_node?")
                                (("1" (INST?) NIL NIL)) NIL)
                               ("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (SMASH) NIL NIL)
                     ("4" (DELETE -3 -4 2 3 4 5)
                      (("4" (LEMMA "tpm_extend_enc_inst_anno")
                        (("4" (INST?)
                          (("4" (INST?)
                            (("4" (SPLIT)
                              (("1" (EXPAND "anno_node?")
                                (("1" (INST?) NIL NIL)) NIL)
                               ("2" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("5" (SMASH) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (SMASH) NIL NIL) ("4" (SMASH) NIL NIL) ("5" (SMASH) NIL NIL)
             ("6" (SMASH) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|anno| TYPE-EQ-DECL NIL |protocols_and_state| "../state_spaces/")
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |tpm| NIL)
    (|tpm_extend_enc_inst_anno| FORMULA-DECL NIL |state| NIL)
    (|anno_node?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|ra| SKOLEM-CONST-DECL "assignment(bu)" |state| NIL)
    (|annotated_nodes_totally_ordered| FORMULA-DECL NIL |protocols_and_state|
     "../state_spaces/")
    (|after_send_implies_after_previous| FORMULA-DECL NIL |bundles|
     "../strand_spaces/")
    (|z1!1| SKOLEM-CONST-DECL "strand[mesg, carried_by?](bu`space)" |state|
     NIL)
    (|bu| SKOLEM-CONST-DECL "bundle[mesg, carried_by?]" |state| NIL)
    (|z0!1| SKOLEM-CONST-DECL "strand[mesg, carried_by?](bu`space)" |state|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|tpm_extend_enc_inst_rew| FORMULA-DECL NIL |strands| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pcr| DEF-DECL "mesg" |tpm| NIL)
    (|pr| ADT-CONSTRUCTOR-DECL "[[mesg, mesg] -> (pair?)]" |init_alg|
     "../strand_spaces/")
    (|pair?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|hs| ADT-CONSTRUCTOR-DECL "[mesg -> (hash?)]" |init_alg|
     "../strand_spaces/")
    (|hash?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|originates_index?| CONST-DECL "bool" |traces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|ky| ADT-ACCESSOR-DECL "[(enc?) -> key]" |init_alg| "../strand_spaces/")
    (|plt| ADT-ACCESSOR-DECL "[(enc?) -> mesg]" |init_alg| "../strand_spaces/")
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|n| ADT-ACCESSOR-DECL "[key -> mesg]" |init_alg| "../strand_spaces/")
    (|fst| ADT-ACCESSOR-DECL "[(pair?) -> mesg]" |init_alg|
     "../strand_spaces/")
    (|snd| ADT-ACCESSOR-DECL "[(pair?) -> mesg]" |init_alg|
     "../strand_spaces/")
    (|t| SHARED-ADT-ACCESSOR-DECL "[event -> mesg]" |traces|
     "../strand_spaces/")
    (|send?| ADT-RECOGNIZER-DECL "[event -> boolean]" |traces|
     "../strand_spaces/")
    (|send| ADT-CONSTRUCTOR-DECL "[mesg -> (send?)]" |traces|
     "../strand_spaces/")
    (|key| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|enc?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|en| ADT-CONSTRUCTOR-DECL "[[mesg, key] -> (enc?)]" |init_alg|
     "../strand_spaces/")
    (|tag?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|tg| ADT-CONSTRUCTOR-DECL "[nat -> (tag?)]" |init_alg|
     "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|subterm_no_circularity_in_extend| FORMULA-DECL NIL |state| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|exists_prefix_boot_extend_strand| FORMULA-DECL NIL |state| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   SHOSTAK))
 (|state_split_and_prefix_boot_extend_TCC1| 0
  (|state_split_and_prefix_boot_extend_TCC1-1| NIL 3604151154
   ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|state_split_and_prefix_boot_extend_TCC2| 0
  (|state_split_and_prefix_boot_extend_TCC2-1| NIL 3604151154
   ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|state_split_and_prefix_boot_extend_TCC3| 0
  (|state_split_and_prefix_boot_extend_TCC3-1| NIL 3604151154
   ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|state_split_and_prefix_boot_extend_TCC4| 0
  (|state_split_and_prefix_boot_extend_TCC4-1| NIL 3604151154
   ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|state_split_and_prefix_boot_extend_TCC5| 0
  (|state_split_and_prefix_boot_extend_TCC5-1| NIL 3604151154
   ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|state_split_and_prefix_boot_extend_TCC6| 0
  (|state_split_and_prefix_boot_extend_TCC6-1| NIL 3604151154
   ("" (SUBTYPE-TCC) NIL NIL)
   ((/= CONST-DECL "boolean" |notequal| NIL)
    (|tpm_extend_enc_inst| CONST-DECL "bool" |annotated_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_extend_enc_role_item| CONST-DECL "role_item" |annotated_roles| NIL)
    (|tpm_extend_enc_annotations| CONST-DECL "annotations" |annotated_roles|
     NIL)
    (|tpm_extend_enc_runique| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_rnon| CONST-DECL "assumptions" |annotated_roles| NIL)
    (|tpm_extend_enc_trace| CONST-DECL "trace" |annotated_roles| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|state| CONST-DECL "tag" |annotated_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend| CONST-DECL "tag" |annotated_roles| NIL)
    (|establish_transport| CONST-DECL "tag" |annotated_roles| NIL)
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|state_split_and_prefix_boot_extend| 0
  (|state_split_and_prefix_boot_extend-1| NIL 3604151154
   ("" (SKOLEM 1 ("bu" "ra"))
    (("" (FLATTEN)
      (("" (SKOLEM!)
        (("" (FLATTEN)
          (("" (LEMMA "epsilon_ax[state]")
            (("" (INST?)
              (("" (SPLIT)
                (("1" (LEMMA "state_split_and_prefix_boot_extend_aux")
                  (("1" (INST?)
                    (("1" (SPLIT)
                      (("1" (INST?)
                        (("1" (INST? :WHERE -6)
                          (("1"
                            (INST -1 "value0!1" "pcrkey0!1" "esk0!1" "tne0!1"
                             "tpmkey0!1" "value1!1" "pcrkey1!1" "esk1!1"
                             "tne1!1" "tpmkey1!1")
                            (("1" (SMASH) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (DELETE -3 -4 2 3 4)
                  (("2" (LEMMA "tpm_extend_enc_inst_anno")
                    (("2" (INST?)
                      (("2" (INST?)
                        (("2" (SPLIT)
                          (("1" (EXPAND "compatible")
                            (("1" (SKOLEM -2 ("i" "f" "p"))
                              (("1" (EXPAND "compat")
                                (("1" (FLATTEN)
                                  (("1" (INST? -4)
                                    (("1" (DELETE -5 -2 -3)
                                      (("1" (SMASH) (("1" (INST?) NIL NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "anno_node?")
                                      (("2" (INST? 1) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|pcr| DEF-DECL "mesg" |tpm| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|path?| CONST-DECL "bool" |paths| "../state_spaces/")
    (|path| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|z0!1| SKOLEM-CONST-DECL "strand[mesg, carried_by?](bu`space)" |state|
     NIL)
    (|ra| SKOLEM-CONST-DECL "assignment(bu)" |state| NIL)
    (|bu| SKOLEM-CONST-DECL "bundle[mesg, carried_by?]" |state| NIL)
    (|anno_node?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|anno| TYPE-EQ-DECL NIL |protocols_and_state| "../state_spaces/")
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|extend?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|extend| ADT-CONSTRUCTOR-DECL "[[mesg, state] -> (extend?)]" |tpm| NIL)
    (|compat| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|compatible| CONST-DECL "bool" |protocols_and_state| "../state_spaces/")
    (|tpm_extend_enc_inst_anno| FORMULA-DECL NIL |state| NIL)
    (|state_split_and_prefix_boot_extend_aux| FORMULA-DECL NIL |state| NIL)
    (|epsilon| CONST-DECL "T" |epsilons| NIL)
    (|tpm_extend_enc_inst_rew| FORMULA-DECL NIL |strands| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL)
    (|epsilon_ax| FORMULA-DECL NIL |epsilons| NIL))
   SHOSTAK)))

