% Message algebra as a free algebra

% John D. Ramsdell -- The MITRE Corporation -- September 2014

% This algebra is a simplification of the Basic Crypto Algebra in
% which the sorts name has been dropped, tags have there own sort.
% Base sorted messages are called atoms, and in this specification,
% atom was used for the sort instead of base.

% Copyright (C) 2014 The MITRE Corporation.
% All rights reserved.
% See ../license.txt for terms.

free_alg: theory
begin

  % Asymmetric keys

  asymkey: datatype
  begin
    asym(n: nat): asymkey?         % Variable of sort akey
    invert(n: asymkey): invkey?
  end asymkey

  invert_ax: axiom
    forall(k: asymkey):
      invert(invert(k)) = k

  % The top algebra sort is mesg, and the base sorts are akey, skey,
  % text, and data.  When specifying CPSA roles or shape analysis
  % sentences, use only these sorts.  Subsort cmpd is for compound
  % messages and is not used.
  mesg: datatype with subtypes key, text, data, tag, cmpd
  begin
    ak(kk: asymkey): akey? : key
    sk(n: nat): skey? : key        % Variable of sort skey
    hs(n: mesg): hash? :cmpd       % Hash of a message
    tx(n: nat): text? : text       % Variable of sort text
    dt(n: nat): data? : data       % Variable of sort data
    tg(n: nat): tag?: tag          % Tag constants
    vm(n: nat): mvar? : cmpd       % Variable of sort message
    pr(fst: mesg, snd: mesg): pair? : cmpd % Pair
    en(plt: mesg, ky: key): enc? : cmpd % Encryption
  end mesg

  % Keys are further classified as being symmetric or asymmetric.

  % Symmetric keys
  skey: type = (skey?)

  % Asymmetric keys
  akey: type = (akey?)

  % The inverse of a key
  invk(k: key): key =
    cases k of
      ak(a): ak(invert(a)),
      sk(n): sk(n)
    endcases

  invk_skey: lemma forall(k: (skey?)): invk(k) = k

  auto_rewrite+ invk_skey

  invk_invk_identity: theorem forall(k: key): invk(invk(k)) = k

  auto_rewrite+ invk_invk_identity

  not_akey_invk_identity: theorem
    forall(k: key): akey?(k) or invk(k) = k

  % Atoms are the non-compound terms omitting hashing.
  atom?(x: mesg): bool =
    akey?(x) or skey?(x) or text?(x) or data?(x)
  % This type is call base in other documents.
  atom: type = (atom?)
  judgement akey subtype_of atom
  judgement skey subtype_of atom
  judgement text subtype_of atom
  judgement data subtype_of atom

  % Is message x carried by message y?
  carried_by?(x, y: mesg): recursive bool =
  x = y or
  cases y of
    pr(f, s): carried_by?(x, f) or carried_by?(x, s),
    en(p, k): carried_by?(x, p)
  else false
  endcases
  measure y by <<

  carried_by_subterm: lemma
   forall(x, y: mesg):
     carried_by?(x, y) implies subterm(x, y)

  subterm_transitive: lemma
    forall(x, y, z: mesg):
      subterm(x, y) and subterm(y, z) implies subterm(x, z)

  % Variables

  vari?(m: mesg): bool =
    akey?(m) and asymkey?(kk(m)) or
    skey?(m) or text?(m) or data?(m) or mvar?(m)

  vari: type = (vari?)

  % Sort reserving mapping

  mapping?(x: vari, m: mesg): bool =
    akey?(x) and akey?(m) or
    skey?(x) and skey?(m) or
    text?(x) and text?(m) or
    data?(x) and data?(m) or
    mvar?(x)

  % Substitutions

  subst: type = list[(mapping?)]

  % The domain of a substitution
  dom(s: subst)(x: vari): recursive bool =
    cases s of
      null: false,
      cons(p, r):
        x = p`1 or dom(r)(x)
    endcases
    measure length(s)

  lookup(x: vari, s: subst): recursive mesg =
    cases s of
      null: x,
      cons(p, r):
        let (y, m) = p in
        if x = y then
          m
        else
          lookup(x, r)
        endif
    endcases
    measure length(s)

  lookup_mapping: lemma
    forall(x: vari, s: subst):
      mapping?(x, lookup(x, s))

  lookup_akey: lemma
    forall(x: vari, s: subst):
      akey?(x) implies akey?(lookup(x, s))

  lookup_skey: lemma
    forall(x: vari, s: subst):
      skey?(x) implies skey?(lookup(x, s))

  subst_akey(k: asymkey, s: subst): recursive (akey?) =
    cases k of
      asym(n): lookup(ak(k), s),
      invert(k0):
        cases subst_akey(k0, s) of
          ak(k1):
            cases k1 of
              asym(n): ak(invert(asym(n))),
              invert(k2): ak(k2)
            endcases
        endcases
    endcases
    measure k by <<

  % Apply a substitution.  Notice the function has a dependent type.

  subst(m: mesg, s: subst): recursive {x: mesg | key(m) implies key(x)} =
    if akey?(m) then
      subst_akey(kk(m), s)
    elsif vari?(m) then
      lookup(m, s)
    elsif tag?(m) then
      m
    elsif pair?(m) then
      pr(subst(fst(m), s), subst(snd(m), s))
    elsif enc?(m) then
      en(subst(plt(m), s), subst(ky(m), s))
    else
      hs(subst(n(m), s))
    endif
    measure m by <<

  % Matching

  find(x: vari, s: subst): recursive lift[mesg] =
    cases s of
      null: bottom,
      cons(p, r):
        let (y, m) = p in
        if x = y then
          up(m)
        else
          find(x, r)
        endif
    endcases
    measure length(s)

  find_lookup: lemma
    forall(x: vari, s: subst):
      up?(find(x, s)) implies lookup(x, s) = down(find(x, s))

  auto_rewrite+ find_lookup

  find_mapping: lemma
    forall(x: vari, s: subst):
      up?(find(x, s)) implies mapping?(x, down(find(x, s)))

  % Akey specific matching definition and lemmas

  match_akey(p, t: asymkey, s: subst): recursive lift[subst] =
    cases p of
      asym(n):
        cases find(ak(p), s) of
          bottom: up(cons((ak(p), ak(t)), s)),
          up(m): if m = ak(t) then up(s) else bottom endif
        endcases,
      invert(k):
        if asymkey?(t) then
          match_akey(k, invert(t), s)
        else
          match_akey(k, n(t), s)
        endif
    endcases
    measure p by <<

  match_akey_invert: lemma
    forall(x, y: asymkey, s: subst):
      match_akey(invert(x), y, s) = match_akey(x, invert(y), s)

  auto_rewrite+ match_akey_invert

  match_akey_append: lemma
    forall(x, y: asymkey, s: subst):
      let t = match_akey(x, y, s) in
      up?(t) implies
        exists(u: subst):
          down(t) = append(u, s)

  match_akey_find: lemma
    forall(v: vari, w: mesg, x, y: asymkey, s: subst):
     let t = match_akey(x, y, s) in
     find(v, s) = up(w) and up?(t) implies
       find(v, down(t)) = up(w)

  match_akey_subst: lemma
    forall(x, y: asymkey, s: subst):
      let t = match_akey(x, y, s) in
      up?(t) implies subst_akey(x, down(t)) = ak(y)

  match_match_akey: lemma
    forall(v, w, x, y: asymkey, s: subst):
      let t = match_akey(v, w, s) in
      up?(t) implies
        let u = match_akey(x, y, down(t)) in
        up?(u) implies subst(ak(v), down(u)) = ak(w)

  % Matching

  match(p, t: mesg , s: subst): recursive lift[subst] =
    if akey?(p) and akey?(t) then
      match_akey(kk(p), kk(t), s)
    elsif vari?(p) then
      if mapping?(p, t) then
        cases find(p, s) of
          bottom: up(cons((p, t), s)),
          up(m): if m = t then up(s) else bottom endif
        endcases
      else
        bottom
      endif
    elsif tag?(p) then
      if p = t then up(s) else bottom endif
    elsif pair?(p) and pair?(t) then
      cases match(fst(p), fst(t), s) of
        bottom: bottom,
        up(u): match(snd(p), snd(t), u)
      endcases
    elsif enc?(p) and enc?(t) then
      cases match(plt(p), plt(t), s) of
        bottom: bottom,
        up(u): match(ky(p), ky(t), u)
      endcases
    elsif hash?(p) and hash?(t) then
      match(n(p), n(t), s)
    else
      bottom
    endif
    measure p by <<

  match_append_var: lemma
    forall(x: vari, y: mesg, s: subst):
      let t = match(x, y, s) in
      up?(t) implies
        exists(u: subst):
          down(t) = append(u, s)

  % An interesting lemma that is not used.
  match_append: lemma
    forall(x, y: mesg, s: subst):
      let t = match(x, y, s) in
      up?(t) implies
        exists(u: subst):
          down(t) = append(u, s)

  % Lemmas on the correctness of matching

  match_find: lemma
    forall(v: vari, w, x, y: mesg, s: subst):
     let t = match(x, y, s) in
     find(v, s) = up(w) and up?(t) implies
       find(v, down(t)) = up(w)

  match_match_subst_var: lemma
    forall(v: vari, w, x, y: mesg, s: subst):
      let t = match(v, w, s) in
      up?(t) implies
        let u = match(x, y, down(t)) in
        up?(u) implies subst(v, down(u)) = w

  match_match_subst: lemma
    forall(v, w, x, y: mesg, s: subst):
      let t = match(v, w, s) in
      up?(t) implies
        let u = match(x, y, down(t)) in
        up?(u) implies subst(v, down(u)) = w

  match_subst_var: lemma
    forall(x: vari, y: mesg, s: subst):
      let t = match(x, y, s) in
      up?(t) implies subst(x, down(t)) = y

  % The relation between matching and substitution.

  match_subst: theorem
    forall(x, y: mesg, s: subst):
      let t = match(x, y, s) in
      up?(t) implies subst(x, down(t)) = y

  % Lemmas about variables in patterns

  var_subst_subterm: lemma
    forall(v: vari, x: mesg, s: subst):
      subterm(v, x) and up?(find(v, s)) implies
        subterm(subst(v, s), subst(x, s))

  % If a variable is in the pattern, it gets bound by matching.
  var_match_binds: lemma
    forall(v: vari, x, y: mesg, s: subst):
      let t = match(x, y, s) in
      up?(t) and subterm(v, x) implies
        up?(find(v, down(t)))

  % If a variable is in the pattern, its substitution is in the
  % overall substitution.
  var_match_subst: lemma
    forall(v: vari, x, y: mesg, s: subst):
      let t = match(x, y, s) in
      up?(t) and subterm(v, x) implies
        subterm(subst(v, down(t)), subst(x, down(t)))

  % A lemma about variables of sort message

  mvar_subst: lemma
    forall(u: (mvar?), x: mesg, s: subst):
      subterm(u, subst(x, s)) implies
        exists(w: (mvar?)): 
          subterm(w, x) and
          subterm(u, subst(w, s))

  % If x matches y to produce t, and there is an mvar v in y, then there
  % is an mvar u in x that maps to a term that contains v.
  mvar_match_subst: lemma
    forall(v: (mvar?), x, y: mesg, s: subst):
      let t = match(x, y, s) in
      up?(t) and subterm(v, y) implies
        exists(u: (mvar?)): 
          subterm(u, x) and 
          up?(find(u, down(t))) and
          subterm(v, subst(u, down(t)))

  auto_rewrite- match_akey_invert

  % Positions

  % The direction when traversing a binary term
  direction: datatype
  begin
    left: left?
    right: right?
  end direction

  pre_position: type = list[direction]

  akey_position?(k: asymkey)(p: pre_position): recursive bool =
    cases p of
      null: true,
      cons(d, r):
        cases k of
          invert(k0): d = left and akey_position?(k0)(r)
          else false
        endcases
    endcases
    measure k by <<

  % A position navigates through binary terms to denote a term
  position?(m: mesg)(p: pre_position): recursive bool =
    cases p of
      null: true,
      cons(d, r):
        cases m of
          pr(f, s):
            cases d of
  	      left: position?(f)(r),
	      right: position?(s)(r)
            endcases,
          en(t, k):
            cases d of
	      left: position?(t)(r),
	      right: position?(k)(r)
            endcases,
          hs(t):
            d = left and position?(t)(r)
          else
            akey?(m) and akey_position?(kk(m))(p)
        endcases
    endcases
    measure m by <<

  position(m: mesg): type = (position?(m))

  akey_term_at(k: asymkey, p: (akey_position?(k))): recursive asymkey =
    cases p of
      null: k,
      cons(d, r): akey_term_at(n(k), r)
    endcases
    measure k by <<

  % The term at a given position
  term_at(m: mesg, p: position(m)): recursive mesg =
    cases p of
      null: m,
      cons(d, r):
        cases m of
          pr(f, s):
            cases d of
   	      left: term_at(f, r),
	      right: term_at(s, r)
            endcases,
          en(t, k):
            cases d of
	      left: term_at(t, r),
	      right: term_at(k, r)
            endcases,
          hs(t): term_at(t, r)
          else
            ak(akey_term_at(kk(m), p))
        endcases
    endcases
    measure m by <<

end free_alg
