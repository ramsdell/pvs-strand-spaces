(|traces|
 (|originates_index?_TCC1| 0
  (|originates_index?_TCC1-1| NIL 3607879048 ("" (SUBTYPE-TCC) NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL))
   NIL))
 (|acquired_index?_TCC1| 0
  (|acquired_index?_TCC1-1| NIL 3621335105 ("" (SUBTYPE-TCC) NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL))
   NIL))
 (|instance_at_TCC1| 0
  (|instance_at_TCC1-1| NIL 3621347594 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL))
 (|instance_at_TCC2| 0
  (|instance_at_TCC2-1| NIL 3621347594 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |nat_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|instance_at_TCC3| 0
  (|instance_at_TCC3-1| NIL 3621347594 ("" (TERMINATION-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |nat_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|instance_at_TCC4| 0
  (|instance_at_TCC4-1| NIL 3622041272 ("" (SUBTYPE-TCC) NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|subst| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|mapping?| CONST-DECL "bool" |free_alg| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|vari| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|vari?| CONST-DECL "bool" |free_alg| NIL)
    (|mesg| TYPE-DECL NIL |free_alg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |nat_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|instance_at_TCC5| 0
  (|instance_at_TCC5-1| NIL 3622041272 ("" (TERMINATION-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL))
   NIL))
 (|instance_TCC1| 0
  (|instance_TCC1-1| NIL 3621347594 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL))
 (|instantiate_TCC1| 0
  (|instantiate_TCC1-1| NIL 3621852734 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL))
 (|instantiate_TCC2| 0
  (|instantiate_TCC2-1| NIL 3621852734 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL))
 (|instance_orients_index_TCC1| 0
  (|instance_orients_index_TCC1-1| NIL 3622238714 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL))
 (|instance_orients_index| 0
  (|instance_orients_index-1| NIL 3622238820
   ("" (SKOLEM 1 ("pat" "tgt" "r" "s" "i"))
    (("" (TYPEPRED "i")
      (("" (NAME "k" "length(tgt)-i")
        (("" (CASE-REPLACE "i=length(tgt)-k")
          (("1" (CASE "k<=length(tgt)")
            (("1" (GENERALIZE "r" "r" :FNUMS 0)
              (("1" (GENERALIZE "k" "k" "upto[length(tgt)]" :FNUMS 0)
                (("1" (SMASH) NIL NIL)
                 ("2" (INDUCT "k")
                  (("1" (GRIND) NIL NIL)
                   ("2" (SKOLEM 1 "a")
                    (("2" (FLATTEN)
                      (("2" (SKOLEM 1 "q")
                        (("2" (FLATTEN)
                          (("2" (SKOLEM 1 "jj")
                            (("2" (FLATTEN)
                              (("2" (EXPAND "instance_at" -3)
                                (("2" (SMASH)
                                  (("1" (INST? -2 :WHERE -5)
                                    (("1" (SMASH)
                                      (("1" (INST -3 "jj")
                                        (("1" (SMASH) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (INST? -2 :WHERE -3)
                                    (("2" (SMASH)
                                      (("2" (INST -3 "jj")
                                        (("2" (SMASH) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("3" (INST? -2 :WHERE -5)
                                    (("3" (SMASH)
                                      (("3" (INST -3 "jj")
                                        (("3" (SMASH) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("4" (INST? -2 :WHERE -3)
                                    (("4" (SMASH)
                                      (("4" (INST -3 "jj")
                                        (("4" (SMASH) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SMASH) NIL NIL))
              NIL)
             ("2" (SMASH) NIL NIL))
            NIL)
           ("2" (SMASH) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |nat_types| NIL)
    (|mesg| TYPE-DECL NIL |free_alg| NIL)
    (|vari?| CONST-DECL "bool" |free_alg| NIL)
    (|vari| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|mapping?| CONST-DECL "bool" |free_alg| NIL)
    (|subst| TYPE-EQ-DECL NIL |free_alg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL) NIL
    (|instance_at| DEF-DECL "lift[subst]" |traces| NIL)
    (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL)
    (|up| ADT-CONSTRUCTOR-DECL "[T -> (up?)]" |lift_adt| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences| NIL)
    (|recv?| ADT-RECOGNIZER-DECL "[event -> boolean]" |traces| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|down| ADT-ACCESSOR-DECL "[(up?) -> T]" |lift_adt| NIL)
    (|match| DEF-DECL "lift[subst]" |free_alg| NIL)
    (|t| SHARED-ADT-ACCESSOR-DECL "[event -> mesg]" |traces| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL NIL NIL
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|instance_orients_TCC1| 0
  (|instance_orients_TCC1-1| NIL 3622237893 ("" (SUBTYPE-TCC) NIL NIL)
   ((|instance| CONST-DECL "lift[subst]" |traces| NIL)) NIL))
 (|instance_orients| 0
  (|instance_orients-1| NIL 3622237893
   ("" (SKOLEM 1 ("pat" "tgt"))
    (("" (EXPAND "instance")
      (("" (FLATTEN)
        (("" (LEMMA "instance_orients_index")
          (("" (INST?)
            (("" (INST -1 "down(instance_at(pat, tgt, 0, null))")
              (("" (SMASH) (("" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|instance| CONST-DECL "lift[subst]" |traces| NIL)
    (|instance_orients_index| FORMULA-DECL NIL |traces| NIL)
    (|down| ADT-ACCESSOR-DECL "[(up?) -> T]" |lift_adt| NIL) NIL NIL
    (|instance_at| DEF-DECL "lift[subst]" |traces| NIL)
    (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL) NIL
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|lift_up_extensionality| FORMULA-DECL NIL |lift_adt| NIL)
    (|up| ADT-CONSTRUCTOR-DECL "[T -> (up?)]" |lift_adt| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |nat_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|subst| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|mapping?| CONST-DECL "bool" |free_alg| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|vari| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|vari?| CONST-DECL "bool" |free_alg| NIL)
    (|mesg| TYPE-DECL NIL |free_alg| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL))
   SHOSTAK))
 (|instance_subst_TCC1| 0
  (|instance_subst_TCC1-1| NIL 3622101792 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL))
 (|instance_subst_TCC2| 0
  (|instance_subst_TCC2-1| NIL 3622101792 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL))
 (|instance_subst| 0
  (|instance_subst-1| NIL 3622102006
   ("" (SKOLEM 1 ("pat" "tgt" "i" "r" "s"))
    (("" (TYPEPRED "i")
      (("" (NAME "k" "length(tgt)-i-1")
        (("" (CASE-REPLACE "i=length(tgt)-k-1")
          (("1" (CASE "k<length(tgt)")
            (("1" (DELETE -2 -3)
              (("1" (GENERALIZE "r" "r" :FNUMS 0)
                (("1" (GENERALIZE "k" "k" "below[length(tgt)]" :FNUMS 0)
                  (("1" (SMASH) NIL NIL)
                   ("2" (DELETE -2)
                    (("2" (INDUCT "k")
                      (("1" (FLATTEN)
                        (("1" (SKOLEM 1 "a")
                          (("1" (FLATTEN)
                            (("1" (EXPAND "instance_at")
                              (("1" (SMASH)
                                (("1" (EXPAND "instance_at")
                                  (("1" (INST 2 "tg(0)" "tg(0)")
                                    (("1" (LEMMA "lift_up_eta[subst]")
                                      (("1" (INST?)
                                        (("1" (REPLACE -1)
                                          (("1" (DELETE -1)
                                            (("1" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (INST 4 "tg(0)" "tg(0)")
                                  (("2" (EXPAND "instance_at")
                                    (("2" (LEMMA "lift_up_eta[subst]")
                                      (("2" (INST?)
                                        (("2" (REPLACE -1)
                                          (("2" (DELETE -1)
                                            (("2" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKOLEM 1 "j")
                        (("2" (FLATTEN)
                          (("2" (SKOLEM 1 "a")
                            (("2" (FLATTEN)
                              (("2" (EXPAND "instance_at" -3)
                                (("2" (SMASH)
                                  (("1" (INST? :WHERE -5)
                                    (("1" (SMASH)
                                      (("1" (SKOLEM -4 ("b" "c"))
                                        (("1"
                                          (INST 2
                                           "pr(t(finseq_appl[event](pat)(length(tgt) -1 - j)), b)"
                                           "pr(t(finseq_appl[event](tgt)(length(tgt) -1 - j)), c)")
                                          (("1" (EXPAND "match" 2 1)
                                            (("1" (SMASH)
                                              (("1" (GRIND) NIL NIL)
                                               ("2" (GRIND) NIL NIL)
                                               ("3" (GRIND) NIL NIL)
                                               ("4" (GRIND) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (INST? :WHERE -3)
                                    (("2" (SMASH)
                                      (("2" (SKOLEM -4 ("b" "c"))
                                        (("2"
                                          (INST 4
                                           "pr(t(finseq_appl[event](pat)(length(tgt) -1 - j)), b)"
                                           "pr(t(finseq_appl[event](tgt)(length(tgt) -1 - j)), c)")
                                          (("2" (EXPAND "match" 4 1)
                                            (("2" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
                 ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
                 ("6" (GRIND) NIL NIL))
                NIL))
              NIL)
             ("2" (SMASH) NIL NIL))
            NIL)
           ("2" (SMASH) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences| NIL) NIL NIL
    NIL
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)
    (|lift_up_eta| FORMULA-DECL NIL |lift_adt| NIL)
    (|tag?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |free_alg| NIL)
    (|tg| ADT-CONSTRUCTOR-DECL "[nat -> (tag?)]" |free_alg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|pr| ADT-CONSTRUCTOR-DECL "[[mesg, mesg] -> (pair?)]" |free_alg| NIL)
    (|pair?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |free_alg| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|down| ADT-ACCESSOR-DECL "[(up?) -> T]" |lift_adt| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|t| SHARED-ADT-ACCESSOR-DECL "[event -> mesg]" |traces| NIL)
    (|match| DEF-DECL "lift[subst]" |free_alg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|up| ADT-CONSTRUCTOR-DECL "[T -> (up?)]" |lift_adt| NIL)
    (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL)
    (|instance_at| DEF-DECL "lift[subst]" |traces| NIL) NIL
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |nat_types| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subst| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|mapping?| CONST-DECL "bool" |free_alg| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|vari| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|vari?| CONST-DECL "bool" |free_alg| NIL)
    (|mesg| TYPE-DECL NIL |free_alg| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|instance_instantiates_index_TCC1| 0
  (|instance_instantiates_index_TCC1-1| NIL 3622036412
   ("" (SUBTYPE-TCC) NIL NIL)
   ((|instantiate| CONST-DECL "{c: trace | length(c) = h}" |traces| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL))
   NIL))
 (|instance_instantiates_index_TCC2| 0
  (|instance_instantiates_index_TCC2-1| NIL 3622036412
   ("" (SUBTYPE-TCC) NIL NIL) NIL NIL))
 (|instance_instantiates_index| 0
  (|instance_instantiates_index-1| NIL 3622036420
   ("" (SKOLEM 1 ("pat" "tgt" "i" "r" "s"))
    (("" (TYPEPRED "i")
      (("" (NAME "k" "length(tgt)-i")
        (("" (CASE "k>=0 and k<=length(tgt)")
          (("1" (CASE-REPLACE "i=length(tgt)-k")
            (("1" (DELETE -1 -3 -4)
              (("1" (GENERALIZE "r" "r" :FNUMS 0)
                (("1" (GENERALIZE "k" "k" "upto(length(tgt))" :FNUMS 0)
                  (("1" (INDUCT "k")
                    (("1" (SKOLEM 1 "u")
                      (("1" (FLATTEN)
                        (("1" (SKOLEM 1 "j") (("1" (SMASH) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (SKOLEM 1 "j")
                      (("2" (FLATTEN)
                        (("2" (SKOLEM 1 "u")
                          (("2" (FLATTEN)
                            (("2" (SKOLEM 1 "m")
                              (("2" (FLATTEN)
                                (("2" (LEMMA "instance_subst")
                                  (("2" (INST? :WHERE -4)
                                    (("1" (SMASH)
                                      (("1" (SKOLEM -3 ("a" "b"))
                                        (("1" (EXPAND "instance_at" -1)
                                          (("1" (SMASH)
                                            (("1" (INST? :WHERE -3)
                                              (("1" (SMASH)
                                                (("1"
                                                  (CASE-REPLACE
                                                   "m=length(tgt)-1-j")
                                                  (("1"
                                                    (CASE
                                                        "finseq_appl[event](tgt)(length(tgt) - 1 - j)=subst_evt(pat(length(tgt)-1-j),s)")
                                                    (("1" (GRIND) NIL NIL)
                                                     ("2" (DELETE 2)
                                                      (("2"
                                                        (EXPAND "subst_evt")
                                                        (("2"
                                                          (DECOMPOSE-EQUALITY
                                                           1)
                                                          (("2"
                                                            (CASE "up?(up(s))")
                                                            (("1" (REPLACE -7)
                                                              (("1"
                                                                (DECOMPOSE-EQUALITY
                                                                 -7)
                                                                (("1"
                                                                  (REPLACE -1)
                                                                  (("1"
                                                                    (DELETE -9)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "match_match_subst")
                                                                      (("1"
                                                                        (INST?
                                                                         :WHERE
                                                                         1)
                                                                        (("1"
                                                                          (INST
                                                                           -1
                                                                           "a"
                                                                           "b")
                                                                          (("1"
                                                                            (GRIND)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (INST -7 "m")
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (INST? :WHERE -1)
                                              (("2" (SMASH)
                                                (("2"
                                                  (CASE-REPLACE
                                                   "m=length(tgt)-1-j")
                                                  (("1" (DELETE -1 -6)
                                                    (("1" (CASE "up?(up(s))")
                                                      (("1" (REPLACE -4)
                                                        (("1"
                                                          (DECOMPOSE-EQUALITY
                                                           -4)
                                                          (("1"
                                                            (EXPAND
                                                             "instantiate")
                                                            (("1"
                                                              (CASE
                                                                  "finseq_appl[event](tgt)(length(tgt) - 1 - j)=subst_evt(pat(length(tgt)-1-j), s)")
                                                              (("1"
                                                                (DELETE -2 -3
                                                                        -4 -5
                                                                        -6 -7
                                                                        -8 -9 1
                                                                        2)
                                                                (("1" (GRIND)
                                                                  NIL NIL))
                                                                NIL)
                                                               ("2" (DELETE 4)
                                                                (("2"
                                                                  (EXPAND
                                                                   "subst_evt")
                                                                  (("2"
                                                                    (APPLY-EXTENSIONALITY
                                                                     1)
                                                                    (("2"
                                                                      (DELETE 2
                                                                              3
                                                                              4)
                                                                      (("2"
                                                                        (DELETE
                                                                         -3)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -1)
                                                                          (("2"
                                                                            (DELETE
                                                                             -1)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "match_match_subst")
                                                                              (("2"
                                                                                (INST?)
                                                                                (("2"
                                                                                  (INST
                                                                                   -1
                                                                                   "a"
                                                                                   "b")
                                                                                  (("2"
                                                                                    (GRIND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (INST -5 "m")
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (GRIND) NIL NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL))
                  NIL)
                 ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                NIL))
              NIL)
             ("2" (SMASH) NIL NIL))
            NIL)
           ("2" (SMASH) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |nat_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL NIL NIL (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|instance_subst| FORMULA-DECL NIL |traces| NIL)
    (|event_send_extensionality| FORMULA-DECL NIL |traces| NIL)
    (|send?| ADT-RECOGNIZER-DECL "[event -> boolean]" |traces| NIL)
    (|send| ADT-CONSTRUCTOR-DECL "[mesg -> (send?)]" |traces| NIL)
    (|t| SHARED-ADT-ACCESSOR-DECL "[event -> mesg]" |traces| NIL)
    (|match| DEF-DECL "lift[subst]" |free_alg| NIL)
    (|down| ADT-ACCESSOR-DECL "[(up?) -> T]" |lift_adt| NIL)
    (|subst| DEF-DECL "{x: mesg | key(m) IMPLIES key(x)}" |free_alg| NIL)
    (|key| ADT-DEF-DECL "boolean" |free_alg| NIL)
    (|recv| ADT-CONSTRUCTOR-DECL "[mesg -> (recv?)]" |traces| NIL)
    (|recv?| ADT-RECOGNIZER-DECL "[event -> boolean]" |traces| NIL)
    (|event_recv_extensionality| FORMULA-DECL NIL |traces| NIL)
    (|match_match_subst| FORMULA-DECL NIL |free_alg| NIL)
    (|subst_evt| CONST-DECL "event" |traces| NIL) NIL
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL) NIL
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|instantiate| CONST-DECL "{c: trace | length(c) = h}" |traces| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|up| ADT-CONSTRUCTOR-DECL "[T -> (up?)]" |lift_adt| NIL)
    (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL)
    (|instance_at| DEF-DECL "lift[subst]" |traces| NIL) NIL
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|subst| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|mapping?| CONST-DECL "bool" |free_alg| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|vari| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|vari?| CONST-DECL "bool" |free_alg| NIL)
    (|mesg| TYPE-DECL NIL |free_alg| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|instance_instantiates_TCC1| 0
  (|instance_instantiates_TCC1-1| NIL 3622031637 ("" (SUBTYPE-TCC) NIL NIL)
   ((|instance| CONST-DECL "lift[subst]" |traces| NIL)) NIL))
 (|instance_instantiates| 0
  (|instance_instantiates-1| NIL 3622031637
   ("" (SKOLEM 1 ("pat" "tgt" "s"))
    (("" (EXPAND "instance")
      (("" (LEMMA "instance_instantiates_index")
        (("" (INST?)
          (("" (SMASH)
            (("" (DELETE -1)
              (("" (APPLY-EXTENSIONALITY 1)
                (("" (APPLY-EXTENSIONALITY 1)
                  (("" (DELETE 2 3)
                    (("" (INST -1 "x!1") (("" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|instance_instantiates_index| FORMULA-DECL NIL |traces| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|instantiate| CONST-DECL "{c: trace | length(c) = h}" |traces| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|subst_evt| CONST-DECL "event" |traces| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|subst| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|mapping?| CONST-DECL "bool" |free_alg| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|vari| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|vari?| CONST-DECL "bool" |free_alg| NIL)
    (|mesg| TYPE-DECL NIL |free_alg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |nat_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|instance| CONST-DECL "lift[subst]" |traces| NIL))
   SHOSTAK))
 (|instance_instantiates_alt_TCC1| 0
  (|instance_instantiates_alt_TCC1-1| NIL 3622241243 ("" (SUBTYPE-TCC) NIL NIL)
   ((|instance| CONST-DECL "lift[subst]" |traces| NIL)) NIL))
 (|instance_instantiates_alt| 0
  (|instance_instantiates_alt-1| NIL 3622241252
   ("" (SKOLEM 1 ("pat" "tgt"))
    (("" (FLATTEN)
      (("" (LEMMA "instance_instantiates")
        (("" (INST?) (("" (SMASH) (("" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|mesg| TYPE-DECL NIL |free_alg| NIL)
    (|vari?| CONST-DECL "bool" |free_alg| NIL)
    (|vari| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (|mapping?| CONST-DECL "bool" |free_alg| NIL)
    (|subst| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL) NIL
    (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL)
    (|down| ADT-ACCESSOR-DECL "[(up?) -> T]" |lift_adt| NIL)
    (|instance| CONST-DECL "lift[subst]" |traces| NIL)
    (|lift_up_extensionality| FORMULA-DECL NIL |lift_adt| NIL)
    (|up| ADT-CONSTRUCTOR-DECL "[T -> (up?)]" |lift_adt| NIL)
    (|instance_instantiates| FORMULA-DECL NIL |traces| NIL))
   SHOSTAK))
 (|instance_binds_index| 0
  (|instance_binds_index-1| NIL 3622307560
   ("" (SKOLEM 1 ("pat" "tgt" "i" "r" "s"))
    (("" (FLATTEN)
      (("" (NAME "k" "length(tgt)-i")
        (("" (CASE-REPLACE "i=length(tgt)-k")
          (("1" (GENERALIZE "r" "r" :FNUMS (-3 1))
            (("1" (GENERALIZE "k" "k" "upto[length(tgt)]" :FNUMS 1)
              (("1" (SMASH) NIL NIL) ("2" (SMASH) NIL NIL)
               ("3" (DELETE -)
                (("3" (INDUCT "k")
                  (("1" (SKOLEM 1 "u") (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (SKOLEM 1 "a")
                    (("2" (FLATTEN)
                      (("2" (SKOLEM 1 "u")
                        (("2" (FLATTEN)
                          (("2" (SKOLEM 1 ("j" "x"))
                            (("2" (FLATTEN)
                              (("2" (LEMMA "instance_subst")
                                (("2" (INST?)
                                  (("1" (SMASH)
                                    (("1" (EXPAND "instance_at" -1)
                                      (("1" (SMASH)
                                        (("1" (INST?)
                                          (("1" (SMASH)
                                            (("1"
                                              (CASE-REPLACE
                                               "j=length(tgt)-1-a")
                                              (("1" (SKOLEM -6 ("b" "c"))
                                                (("1" (LEMMA "var_match_binds")
                                                  (("1" (INST? :WHERE -6)
                                                    (("1" (INST -1 "x")
                                                      (("1" (SMASH)
                                                        (("1"
                                                          (LEMMA "match_find")
                                                          (("1"
                                                            (INST -1 "x" "_"
                                                             "b" "c" "_")
                                                            (("1"
                                                              (INST? :WHERE -9)
                                                              (("1"
                                                                (INST -1
                                                                 "down(find(x,
               down(match(t(finseq_appl[event](pat)(length(tgt) - 1 - a)),
                          t(finseq_appl[event](tgt)(length(tgt) - 1 - a)),
                          u))))")
                                                                (("1" (SMASH)
                                                                  (("1"
                                                                    (DECOMPOSE-EQUALITY
                                                                     -9)
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (DECOMPOSE-EQUALITY
                                                                     1)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (INST -7 "j" "x")
                                                (("2" (SMASH) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (INST?)
                                          (("2" (SMASH)
                                            (("2" (SKOLEM -3 ("b" "c"))
                                              (("2"
                                                (CASE-REPLACE
                                                 "j=length(tgt)-1-a")
                                                (("1" (DELETE -2 -1)
                                                  (("1" (DECOMPOSE-EQUALITY -2)
                                                    (("1" (REPLACE -2)
                                                      (("1" (DELETE -2)
                                                        (("1"
                                                          (DELETE -4 1 2 -5)
                                                          (("1"
                                                            (LEMMA
                                                             "var_match_binds")
                                                            (("1"
                                                              (INST? :WHERE -3)
                                                              (("1"
                                                                (INST -1 "x")
                                                                (("1" (SMASH)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "match_find")
                                                                    (("1"
                                                                      (INST -1
                                                                       "x" "_"
                                                                       "b" "c"
                                                                       "_")
                                                                      (("1"
                                                                        (INST?
                                                                         :WHERE
                                                                         -3)
                                                                        (("1"
                                                                          (SMASH)
                                                                          (("1"
                                                                            (INST
                                                                             -1
                                                                             "down(find(x,
                 down(match(t(finseq_appl[event]
                                  (pat)(length(tgt) - 1 - a)),
                            t(finseq_appl[event]
                                  (tgt)(length(tgt) - 1 - a)),
                            u))))")
                                                                            (("1"
                                                                              (DECOMPOSE-EQUALITY
                                                                               1)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (INST -5 "j" "x")
                                                  (("2" (SMASH) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (SMASH) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
            NIL)
           ("2" (SMASH) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) NIL
    (|match| DEF-DECL "lift[subst]" |free_alg| NIL)
    (|down| ADT-ACCESSOR-DECL "[(up?) -> T]" |lift_adt| NIL)
    (|var_match_binds| FORMULA-DECL NIL |free_alg| NIL)
    (|match_find| FORMULA-DECL NIL |free_alg| NIL)
    (|lift_up_extensionality| FORMULA-DECL NIL |lift_adt| NIL)
    (|instance_subst| FORMULA-DECL NIL |traces| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|find| DEF-DECL "lift[mesg]" |free_alg| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|t| SHARED-ADT-ACCESSOR-DECL "[event -> mesg]" |traces| NIL) NIL
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|up| ADT-CONSTRUCTOR-DECL "[T -> (up?)]" |lift_adt| NIL)
    (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL)
    (|instance_at| DEF-DECL "lift[subst]" |traces| NIL) NIL
    (|subst| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|mapping?| CONST-DECL "bool" |free_alg| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (|vari| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|vari?| CONST-DECL "bool" |free_alg| NIL)
    (|mesg| TYPE-DECL NIL |free_alg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |nat_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   SHOSTAK))
 (|instance_binds_TCC1| 0
  (|instance_binds_TCC1-1| NIL 3622285247 ("" (SUBTYPE-TCC) NIL NIL)
   ((|instance| CONST-DECL "lift[subst]" |traces| NIL)) NIL))
 (|instance_binds| 0
  (|instance_binds-1| NIL 3622307393
   ("" (SKOLEM 1 ("pat" "tgt" "s"))
    (("" (SMASH)
      (("" (LEMMA "instance_binds_index")
        (("" (EXPAND "instance") (("" (INST?) (("" (SMASH) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|instance| CONST-DECL "lift[subst]" |traces| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|subst| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|mapping?| CONST-DECL "bool" |free_alg| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|vari| TYPE-EQ-DECL NIL |free_alg| NIL)
    (|vari?| CONST-DECL "bool" |free_alg| NIL)
    (|mesg| TYPE-DECL NIL |free_alg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |nat_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|trace| TYPE-EQ-DECL NIL |traces| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|instance_binds_index| FORMULA-DECL NIL |traces| NIL))
   SHOSTAK)))

