% The adversary model for the message algebra defined in the free_alg
% theory.

% John D. Ramsdell -- The MITRE Corporation -- October 2014

% Copyright (C) 2014 The MITRE Corporation.
% All rights reserved.
% See ../license.txt for terms.

adversary: theory
begin

  importing roles

  % The five classes of adversary roles

  % Create an atom

  create_akey: role =
    simple_role(singleton_seq(send(ak(asym(0)))))

  create_skey: role =
    simple_role(singleton_seq(send(sk(0))))

  create_text: role =
    simple_role(singleton_seq(send(tx(0))))

  create_data: role =
    simple_role(singleton_seq(send(dt(0))))

  % Create a tag

  create_tag?(r: role): bool =
    exists(n: nat):
      r =  simple_role(singleton_seq(send(tg(n))))

  % Hash a message

  hash_role: role =
    simple_role(doubleton_seq(recv(vm(0)), send(hs(vm(0)))))

  % Pair two messages

  pair_role: role =
    simple_role(
      tripleton_seq(recv(vm(0)), recv(vm(1)), send(pr(vm(0), vm(1)))))

  % Separate two messages in a pair

  sep_role: role =
    simple_role(
      tripleton_seq(recv(pr(vm(0),vm(1))), send(vm(0)), send(vm(1))))

  % Encrypt a message with a key

  enc_akey: role =
    simple_role(
      tripleton_seq(recv(vm(0)), recv(ak(asym(0))),
                    send(en(vm(0), ak(asym(0))))))

  enc_skey: role =
    simple_role(
      tripleton_seq(recv(vm(0)), recv(sk(0)),
                    send(en(vm(0), sk(0)))))

  % Decrypt a message with the inverse of a key

  dec_akey: role =
    simple_role(
      tripleton_seq(recv(en(vm(0), ak(asym(0)))),
                    recv(ak(invert(asym(0)))), send(vm(0))))

  dec_skey: role =
    simple_role(
      tripleton_seq(recv(en(vm(0), sk(0))),
                    recv(sk(0)), send(vm(0))))

  % All the adversary roles as a finite set
  adversary_prot: protocol =
    add(create_akey,
    add(create_skey,
    add(create_text,
    add(create_data,
    add(hash_role,
    add(pair_role,
    add(sep_role,
    add(enc_akey,
    add(enc_skey,
    add(dec_akey,
    add(dec_skey, create_tag?)))))))))))

  enumerate_adversary_prot: lemma
    forall(r: role):
      adversary_prot(r) iff
        r = create_akey or
        r = create_skey or
        r = create_text or
        r = create_data or
        create_tag?(r) or
        r = hash_role or
        r = pair_role or
        r = sep_role or
        r = enc_akey or
        r = enc_skey or
        r = dec_akey or
        r = dec_skey

  adversary_strands_are_short: lemma
    forall(ss: strand_space, z: strand(ss), r: (adversary_prot)):
      ss(z)`length >= 4 implies not inst(ss)(z, r)

  adversary_inst: lemma
    forall(ss: strand_space, z: strand(ss), r: (adversary_prot)):
      inst(ss)(z, r) iff
        length(ss(z)) <= length(r`trace) and
        up?(instance(r`trace, ss(z)))

end adversary
