(|security_goals|
 (|split_implies_ordered_TCC1| 0
  (|split_implies_ordered_TCC1-1| NIL 3598635538 ("" (SUBTYPE-TCC) NIL NIL)
   ((|split_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|quote_inst| CONST-DECL "bool" |protocol_roles| NIL)
    (|quote_role_item| CONST-DECL "role_item" |protocol_roles| NIL)
    (|quote_trace| CONST-DECL "trace" |protocol_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend_inst| CONST-DECL "bool" |protocol_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../transitions/")
    (|inst| CONST-DECL "bool" |roles| "../transitions/")
    (|uniq| CONST-DECL "bool" |bundles| "../transitions/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|extend_role_item| CONST-DECL "role_item" |protocol_roles| NIL)
    (|simple_role_item| CONST-DECL "role_item" |roles| "../transitions/")
    (|extend_trace| CONST-DECL "trace" |protocol_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|split_pov| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|non| CONST-DECL "bool" |bundles| "../transitions/")
    (|originates_at?| CONST-DECL "bool" |bundles| "../transitions/")
    (|starts_at?| CONST-DECL "bool" |bundles| "../transitions/")
    (|sync_at| CONST-DECL "(trans)" |strand_spaces| "../transitions/")
    (|start_node?| CONST-DECL "bool" |bundles| "../transitions/")
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| "../transitions/")
    (|appears_at?| CONST-DECL "bool" |strand_spaces| "../transitions/")
    (|refuse| CONST-DECL "tag" |protocol_roles| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../transitions/")
    (|state| TYPE-DECL NIL |state| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|trans| CONST-DECL "bool" |state| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|pcr| DEF-DECL "mesg" |state| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|make_quote| CONST-DECL "mesg" |protocol_roles| NIL)
    (|quote| CONST-DECL "tag" |protocol_roles| NIL)
    (|obtain| CONST-DECL "tag" |protocol_roles| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../transitions/")
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../transitions/")
    (|well_formed_next?| CONST-DECL "bool" |bundles| "../transitions/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../transitions/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../transitions/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../transitions/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../transitions/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|run| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (|protocol_roles| CONST-DECL "protocol" |protocol_roles| NIL)
    (|run?| CONST-DECL "bool" |roles| "../transitions/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../transitions/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../transitions/")
    (|bundle?| CONST-DECL "bool" |bundles| "../transitions/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../transitions/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../transitions/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../transitions/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|split_implies_ordered_TCC2| 0
  (|split_implies_ordered_TCC2-1| NIL 3598635538 ("" (SUBTYPE-TCC) NIL NIL)
   ((|split_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|quote_inst| CONST-DECL "bool" |protocol_roles| NIL)
    (|quote_role_item| CONST-DECL "role_item" |protocol_roles| NIL)
    (|quote_trace| CONST-DECL "trace" |protocol_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend_inst| CONST-DECL "bool" |protocol_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../transitions/")
    (|inst| CONST-DECL "bool" |roles| "../transitions/")
    (|uniq| CONST-DECL "bool" |bundles| "../transitions/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|extend_role_item| CONST-DECL "role_item" |protocol_roles| NIL)
    (|simple_role_item| CONST-DECL "role_item" |roles| "../transitions/")
    (|extend_trace| CONST-DECL "trace" |protocol_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|split_pov| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|non| CONST-DECL "bool" |bundles| "../transitions/")
    (|originates_at?| CONST-DECL "bool" |bundles| "../transitions/")
    (|starts_at?| CONST-DECL "bool" |bundles| "../transitions/")
    (|sync_at| CONST-DECL "(trans)" |strand_spaces| "../transitions/")
    (|start_node?| CONST-DECL "bool" |bundles| "../transitions/")
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| "../transitions/")
    (|appears_at?| CONST-DECL "bool" |strand_spaces| "../transitions/")
    (|refuse| CONST-DECL "tag" |protocol_roles| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../transitions/")
    (|state| TYPE-DECL NIL |state| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|trans| CONST-DECL "bool" |state| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|pcr| DEF-DECL "mesg" |state| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|make_quote| CONST-DECL "mesg" |protocol_roles| NIL)
    (|quote| CONST-DECL "tag" |protocol_roles| NIL)
    (|obtain| CONST-DECL "tag" |protocol_roles| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../transitions/")
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../transitions/")
    (|well_formed_next?| CONST-DECL "bool" |bundles| "../transitions/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../transitions/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../transitions/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../transitions/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../transitions/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|run| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (|protocol_roles| CONST-DECL "protocol" |protocol_roles| NIL)
    (|run?| CONST-DECL "bool" |roles| "../transitions/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../transitions/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../transitions/")
    (|bundle?| CONST-DECL "bool" |bundles| "../transitions/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../transitions/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../transitions/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../transitions/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|split_implies_ordered_TCC3| 0
  (|split_implies_ordered_TCC3-1| NIL 3598635538 ("" (SUBTYPE-TCC) NIL NIL)
   ((|split_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|quote_inst| CONST-DECL "bool" |protocol_roles| NIL)
    (|quote_role_item| CONST-DECL "role_item" |protocol_roles| NIL)
    (|quote_trace| CONST-DECL "trace" |protocol_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|prec?| CONST-DECL "bool" |bundles| "../transitions/")
    (|extend_inst| CONST-DECL "bool" |protocol_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../transitions/")
    (|inst| CONST-DECL "bool" |roles| "../transitions/")
    (|uniq| CONST-DECL "bool" |bundles| "../transitions/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|extend_role_item| CONST-DECL "role_item" |protocol_roles| NIL)
    (|simple_role_item| CONST-DECL "role_item" |roles| "../transitions/")
    (|extend_trace| CONST-DECL "trace" |protocol_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|split_pov| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|non| CONST-DECL "bool" |bundles| "../transitions/")
    (|originates_at?| CONST-DECL "bool" |bundles| "../transitions/")
    (|starts_at?| CONST-DECL "bool" |bundles| "../transitions/")
    (|sync_at| CONST-DECL "(trans)" |strand_spaces| "../transitions/")
    (|start_node?| CONST-DECL "bool" |bundles| "../transitions/")
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| "../transitions/")
    (|appears_at?| CONST-DECL "bool" |strand_spaces| "../transitions/")
    (|refuse| CONST-DECL "tag" |protocol_roles| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../transitions/")
    (|state| TYPE-DECL NIL |state| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|trans| CONST-DECL "bool" |state| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|pcr| DEF-DECL "mesg" |state| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|make_quote| CONST-DECL "mesg" |protocol_roles| NIL)
    (|quote| CONST-DECL "tag" |protocol_roles| NIL)
    (|obtain| CONST-DECL "tag" |protocol_roles| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../transitions/")
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../transitions/")
    (|well_formed_next?| CONST-DECL "bool" |bundles| "../transitions/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../transitions/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../transitions/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../transitions/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|run| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (|protocol_roles| CONST-DECL "protocol" |protocol_roles| NIL)
    (|run?| CONST-DECL "bool" |roles| "../transitions/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../transitions/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../transitions/")
    (|bundle?| CONST-DECL "bool" |bundles| "../transitions/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../transitions/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../transitions/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../transitions/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|split_implies_ordered_TCC4| 0
  (|split_implies_ordered_TCC4-1| NIL 3598635538 ("" (SUBTYPE-TCC) NIL NIL)
   ((|split_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|quote_inst| CONST-DECL "bool" |protocol_roles| NIL)
    (|quote_role_item| CONST-DECL "role_item" |protocol_roles| NIL)
    (|quote_trace| CONST-DECL "trace" |protocol_roles| NIL)
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|prec?| CONST-DECL "bool" |bundles| "../transitions/")
    (|extend_inst| CONST-DECL "bool" |protocol_roles| NIL)
    (|pred| CONST-DECL "bool" |roles| "../transitions/")
    (|inst| CONST-DECL "bool" |roles| "../transitions/")
    (|uniq| CONST-DECL "bool" |bundles| "../transitions/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|extend_role_item| CONST-DECL "role_item" |protocol_roles| NIL)
    (|simple_role_item| CONST-DECL "role_item" |roles| "../transitions/")
    (|extend_trace| CONST-DECL "trace" |protocol_roles| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|split_pov| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|non| CONST-DECL "bool" |bundles| "../transitions/")
    (|originates_at?| CONST-DECL "bool" |bundles| "../transitions/")
    (|starts_at?| CONST-DECL "bool" |bundles| "../transitions/")
    (|sync_at| CONST-DECL "(trans)" |strand_spaces| "../transitions/")
    (|start_node?| CONST-DECL "bool" |bundles| "../transitions/")
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| "../transitions/")
    (|appears_at?| CONST-DECL "bool" |strand_spaces| "../transitions/")
    (|refuse| CONST-DECL "tag" |protocol_roles| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../transitions/")
    (|state| TYPE-DECL NIL |state| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|trans| CONST-DECL "bool" |state| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|pcr| DEF-DECL "mesg" |state| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|make_quote| CONST-DECL "mesg" |protocol_roles| NIL)
    (|quote| CONST-DECL "tag" |protocol_roles| NIL)
    (|obtain| CONST-DECL "tag" |protocol_roles| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../transitions/")
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../transitions/")
    (|well_formed_next?| CONST-DECL "bool" |bundles| "../transitions/")
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../transitions/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../transitions/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../transitions/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|run| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (|protocol_roles| CONST-DECL "protocol" |protocol_roles| NIL)
    (|run?| CONST-DECL "bool" |roles| "../transitions/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../transitions/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../transitions/")
    (|bundle?| CONST-DECL "bool" |bundles| "../transitions/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../transitions/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../transitions/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../transitions/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|split_implies_ordered| 0
  (|split_implies_ordered-1| NIL 3598788798
   ("" (SKOLEM 1 ("bu" "n0" "n1" "st" "t0" "t1" "aik"))
    (("" (FLATTEN)
      (("" (LEMMA "split_shape_analysis_sentence")
        (("" (INST?)
          (("" (SPLIT)
            (("1" (SKOLEM -1 ("z0" "z1"))
              (("1" (EXPAND "split_shape")
                (("1" (FLATTEN)
                  (("1" (LEMMA "quote_extend_implies_extend_strand")
                    (("1" (INST?)
                      (("1" (LEMMA "quote_extend_implies_extend_strand")
                        (("1" (INST? :WHERE -7)
                          (("1" (SPLIT)
                            (("1" (SPLIT)
                              (("1" (SKOLEM -1 "z2")
                                (("1" (SKOLEM -2 "z3")
                                  (("1" (FLATTEN)
                                    (("1" (INST 1 "z0" "z1" "z2" "z3")
                                      (("1" (REPLACE -5)
                                        (("1" (REPLACE -6)
                                          (("1"
                                            (LEMMA "extend_transition_node")
                                            (("1" (INST?)
                                              (("1"
                                                (LEMMA
                                                 "extend_transition_node")
                                                (("1" (INST? :WHERE -5)
                                                  (("1" (SPLIT)
                                                    (("1" (SPLIT)
                                                      (("1"
                                                        (LEMMA
                                                         "transition_nodes_totally_ordered")
                                                        (("1"
                                                          (INST -1 "bu"
                                                           "(z2,1)" "(z3,1)")
                                                          (("1" (DELETE -8 -9)
                                                            (("1" (SMASH)
                                                              (("1"
                                                                (DELETE -2 -3
                                                                        -6 -9
                                                                        -10 -11
                                                                        -12 -13
                                                                        -14 +)
                                                                (("1"
                                                                  (CASE
                                                                      "event_at(bu`space)(z2,0)=event_at(bu`space)(z3,0)")
                                                                  (("1"
                                                                    (DELETE -2)
                                                                    (("1"
                                                                      (GRIND)
                                                                      (("1"
                                                                        (DECOMPOSE-EQUALITY
                                                                         -7)
                                                                        (("1"
                                                                          (DECOMPOSE-EQUALITY
                                                                           -1)
                                                                          (("1"
                                                                            (SMASH)
                                                                            NIL
                                                                            NIL)
                                                                           ("2"
                                                                            (EXPAND
                                                                             "tag")
                                                                            (("2"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL)
                                                                           ("3"
                                                                            (EXPAND
                                                                             "tag")
                                                                            (("3"
                                                                              (PROPAX)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (REPLACE
                                                                     -1)
                                                                    (("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (PROPAX) NIL NIL))
                                                      NIL)
                                                     ("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (PROPAX) NIL NIL))
                              NIL)
                             ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|state| TYPE-DECL NIL |state| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|trans| CONST-DECL "bool" |state| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|pcr| DEF-DECL "mesg" |state| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../transitions/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../transitions/")
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |state| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../transitions/")
    (|bundle?| CONST-DECL "bool" |bundles| "../transitions/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../transitions/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../transitions/")
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|role_item| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (|role| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (|run?| CONST-DECL "bool" |roles| "../transitions/")
    (|protocol_roles| CONST-DECL "protocol" |protocol_roles| NIL)
    (|run| TYPE-EQ-DECL NIL |roles| "../transitions/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../transitions/")
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|event| TYPE-DECL NIL |traces| "../transitions/")
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|obtain| CONST-DECL "tag" |protocol_roles| NIL)
    (|tag| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|tag?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|refuse| CONST-DECL "tag" |protocol_roles| NIL)
    (|z3| SKOLEM-CONST-DECL
     "strand[state, trans, mesg, carried_by?, pcr](bu`space)" |security_goals|
     NIL)
    (|tran_node?| CONST-DECL "bool" |strand_spaces| "../transitions/")
    (|bu| SKOLEM-CONST-DECL
     "run[state, boot?, trans, mesg, carried_by?, pcr](protocol_roles)"
     |security_goals| NIL)
    (|z2| SKOLEM-CONST-DECL
     "strand[state, trans, mesg, carried_by?, pcr](bu`space)" |security_goals|
     NIL)
    (|extend_inst_rew| FORMULA-DECL NIL |strands| NIL)
    (|quote_inst_rew| FORMULA-DECL NIL |strands| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../transitions/")
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|extend_trace| CONST-DECL "trace" |protocol_roles| NIL)
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|n| SHARED-ADT-ACCESSOR-DECL
     "[{x: mesg | key(x) OR text(x) OR data(x) OR tag(x)} -> nat]" |init_alg|
     "../strand_spaces/")
    (|tag| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|data| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|text| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|key| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|recv?| ADT-RECOGNIZER-DECL "[event -> boolean]" |traces|
     "../transitions/")
    (|send?| ADT-RECOGNIZER-DECL "[event -> boolean]" |traces|
     "../transitions/")
    (|t| SHARED-ADT-ACCESSOR-DECL "[{x: event | recv?(x) OR send?(x)} -> mesg]"
     |traces| "../transitions/")
    (|recv| ADT-CONSTRUCTOR-DECL "[mesg -> (recv?)]" |traces|
     "../transitions/")
    (|tg| ADT-CONSTRUCTOR-DECL "[nat -> (tag?)]" |init_alg|
     "../strand_spaces/")
    (|transition_nodes_totally_ordered| FORMULA-DECL NIL |bundles|
     "../transitions/")
    (|extend_transition_node| FORMULA-DECL NIL |strands| NIL)
    (|quote_extend_implies_extend_strand| FORMULA-DECL NIL |bridge| NIL)
    (|split_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|split_shape_analysis_sentence| FORMULA-DECL NIL
     |shape_analysis_sentences| NIL))
   SHOSTAK)))

