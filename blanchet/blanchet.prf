(|blanchet|
 (|init_trace_TCC1| 0
  (|init_trace_TCC1-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|init_trace_TCC2| 0
  (|init_trace_TCC2-1| NIL 3565679740 ("" (SUBTYPE-TCC) NIL NIL)
   ((|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|init_runique_TCC1| 0
  (|init_runique_TCC1-1| NIL 3604397305 ("" (SUBTYPE-TCC) NIL NIL)
   ((|atom?| CONST-DECL "bool" |init_alg| "../strand_spaces/")
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|nmtfinseq| TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|atom| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|init_role_item_TCC1| 0
  (|init_role_item_TCC1-1| NIL 3581830047 ("" (SUBTYPE-TCC) NIL NIL)
   ((|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/"))
   NIL))
 (|init_role_item_TCC2| 0
  (|init_role_item_TCC2-1| NIL 3581830047 ("" (SUBTYPE-TCC) NIL NIL)
   ((|no_annotations_length| FORMULA-DECL NIL |roles| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/"))
   NIL))
 (|init_role_item_TCC3| 0
  (|init_role_item_TCC3-1| NIL 3581830047 ("" (SUBTYPE-TCC) NIL NIL)
   ((|no_assumptions_length| FORMULA-DECL NIL |roles| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/"))
   NIL))
 (|init_role_item_TCC4| 0
  (|init_role_item_TCC4-1| NIL 3581830047 ("" (SUBTYPE-TCC) NIL NIL)
   ((|init_runique| CONST-DECL "assumptions" |blanchet| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|shape_analysis_sentence_TCC1| 0
  (|shape_analysis_sentence_TCC1-1| NIL 3581834083 ("" (SUBTYPE-TCC) NIL NIL)
   ((|init_inst| CONST-DECL "bool" |blanchet| NIL)
    (|init_role_item| CONST-DECL "role_item" |blanchet| NIL)
    (|init_runique| CONST-DECL "assumptions" |blanchet| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|resp_inst| CONST-DECL "bool" |blanchet| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|simple_role_item| CONST-DECL "role_item" |roles| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|run| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|prot| CONST-DECL "protocol" |blanchet| NIL)
    (|run?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|shape_analysis_sentence_TCC2| 0
  (|shape_analysis_sentence_TCC2-1| NIL 3581834083 ("" (SUBTYPE-TCC) NIL NIL)
   ((|init_inst| CONST-DECL "bool" |blanchet| NIL)
    (|init_role_item| CONST-DECL "role_item" |blanchet| NIL)
    (|init_runique| CONST-DECL "assumptions" |blanchet| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|resp_inst| CONST-DECL "bool" |blanchet| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|simple_role_item| CONST-DECL "role_item" |roles| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|run| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|prot| CONST-DECL "protocol" |blanchet| NIL)
    (|run?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|shape_analysis_sentence_TCC3| 0
  (|shape_analysis_sentence_TCC3-1| NIL 3581834083 ("" (SUBTYPE-TCC) NIL NIL)
   ((|init_inst| CONST-DECL "bool" |blanchet| NIL)
    (|init_role_item| CONST-DECL "role_item" |blanchet| NIL)
    (|init_runique| CONST-DECL "assumptions" |blanchet| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|resp_inst| CONST-DECL "bool" |blanchet| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|simple_role_item| CONST-DECL "role_item" |roles| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|run| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|prot| CONST-DECL "protocol" |blanchet| NIL)
    (|run?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|shape_analysis_sentence_TCC4| 0
  (|shape_analysis_sentence_TCC4-1| NIL 3581834083 ("" (SUBTYPE-TCC) NIL NIL)
   ((|init_inst| CONST-DECL "bool" |blanchet| NIL)
    (|init_role_item| CONST-DECL "role_item" |blanchet| NIL)
    (|init_runique| CONST-DECL "assumptions" |blanchet| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|resp_inst| CONST-DECL "bool" |blanchet| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|simple_role_item| CONST-DECL "role_item" |roles| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|run| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|prot| CONST-DECL "protocol" |blanchet| NIL)
    (|run?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|css_TCC1| 0
  (|css_TCC1-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|ca| CONST-DECL "akey" |blanchet| NIL)) NIL))
 (|css_TCC2| 0
  (|css_TCC2-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|cb| CONST-DECL "akey" |blanchet| NIL)) NIL))
 (|css_TCC3| 0
  (|css_TCC3-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|cb1| CONST-DECL "akey" |blanchet| NIL)) NIL))
 (|css_TCC4| 0
  (|css_TCC4-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|atom?| CONST-DECL "bool" |init_alg| "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL))
   NIL))
 (|css_TCC5| 0
  (|css_TCC5-1| NIL 3601198422 ("" (SUBTYPE-TCC) NIL NIL)
   ((|ca| CONST-DECL "akey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nmtfinseq| TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|atom?| CONST-DECL "bool" |init_alg| "../strand_spaces/")
    (|atom| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|hash?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|key| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|enc?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|en| ADT-CONSTRUCTOR-DECL "[[mesg, key] -> (enc?)]" |init_alg|
     "../strand_spaces/")
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL))
 (|css_nodes_decomposed| 0
  (|css_nodes_decomposed-1| NIL 3565679744
   ("" (SKOLEM 1 "n")
    (("" (TYPEPRED "n`1") (("" (TYPEPRED "n`2") (("" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|ca| CONST-DECL "akey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|css_nodes_enumerated| 0
  (|css_nodes_enumerated-1| NIL 3565679808
   ("" (SKOLEM 1 "n")
    (("" (LEMMA "css_nodes_decomposed" ("n" "n")) (("" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|css_nodes_decomposed| FORMULA-DECL NIL |blanchet| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/"))
   SHOSTAK))
 (|cbu_well_formed_comm| 0
  (|cbu_well_formed_comm-1| NIL 3565679852
   ("" (EXPAND "well_formed_comm?")
    (("" (SKOLEM 1 ("n0" "n1")) (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/"))
   SHOSTAK))
 (|cbu_precedes_total_order_TCC1| 0
  (|cbu_precedes_total_order_TCC1-1| NIL 3565616778
   ("" (SKOLEM 1 ("n0" "n1"))
    (("" (FLATTEN)
      (("" (DELETE -1)
        (("" (TYPEPRED "n0`1")
          (("" (TYPEPRED "n0`2") (("" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|ca| CONST-DECL "akey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL))
 (|cbu_precedes_total_order_TCC2| 0
  (|cbu_precedes_total_order_TCC2-1| NIL 3565616778
   ("" (SKOLEM 1 ("n0" "n1"))
    (("" (FLATTEN)
      (("" (DELETE -1)
        (("" (TYPEPRED "n1`1")
          (("" (TYPEPRED "n1`2") (("" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|ca| CONST-DECL "akey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL))
 (|cbu_precedes_total_order| 0
  (|cbu_precedes_total_order-1| NIL 3565679896
   ("" (SKOLEM 1 ("n0" "n1"))
    (("" (LEMMA "css_nodes_decomposed" ("n" "n1"))
      (("" (LEMMA "css_nodes_decomposed" ("n" "n0")) (("" (GRIND) NIL NIL))
        NIL))
      NIL))
    NIL)
   ((|css_nodes_decomposed| FORMULA-DECL NIL |blanchet| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|cbu_node_order| CONST-DECL "below(11)" |blanchet| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|before?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL))
   SHOSTAK))
 (|cbu_prec_total_order_TCC1| 0
  (|cbu_prec_total_order_TCC1-1| NIL 3565616778
   ("" (SKOLEM 1 ("n0" "n1"))
    (("" (FLATTEN)
      (("" (DELETE -1)
        (("" (TYPEPRED "n0`1")
          (("" (TYPEPRED "n0`2") (("" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|ca| CONST-DECL "akey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL))
 (|cbu_prec_total_order_TCC2| 0
  (|cbu_prec_total_order_TCC2-1| NIL 3565616778
   ("" (SKOLEM 1 ("n0" "n1"))
    (("" (FLATTEN)
      (("" (DELETE -1)
        (("" (TYPEPRED "n1`1")
          (("" (TYPEPRED "n1`2") (("" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|ca| CONST-DECL "akey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL))
 (|cbu_prec_total_order| 0
  (|cbu_prec_total_order-1| NIL 3565680470
   ("" (SKOLEM 1 ("n0" "n1"))
    (("" (EXPAND "prec?")
      (("" (LEMMA "TC_induction[node(pre_cbu`space)]")
        ((""
          (INST -1 "before?(pre_cbu)"
           "lambda(x, y: node(pre_cbu`space)):cbu_node_order(x) < cbu_node_order(y)")
          (("1" (FLATTEN)
            (("1" (SPLIT)
              (("1" (INST -1 "n0" "n1") (("1" (SMASH) NIL NIL)) NIL)
               ("2" (DELETE -1 2)
                (("2" (SKOLEM 1 ("a" "b"))
                  (("2" (FLATTEN)
                    (("2" (SPLIT)
                      (("1"
                        (LEMMA "cbu_precedes_total_order" ("n0" "a" "n1" "b"))
                        (("1" (SMASH) NIL NIL)) NIL)
                       ("2" (SKOLEM -1 "z")
                        (("2" (FLATTEN)
                          (("2" (DELETE -1 -3) (("2" (SMASH) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (DELETE 2)
            (("2" (SKOLEM 1 "x")
              (("2" (TYPEPRED "x`1")
                (("2" (TYPEPRED "x`2") (("2" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|before?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cbu_node_order| CONST-DECL "below(11)" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cbu_precedes_total_order| FORMULA-DECL NIL |blanchet| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|TC_induction| FORMULA-DECL NIL |relations| NIL))
   SHOSTAK))
 (|cbu_acyclic| 0
  (|cbu_acyclic-1| NIL 3565681073
   ("" (EXPAND "acyclic?")
    (("" (EXPAND "strict_order?")
      (("" (SPLIT)
        (("1" (EXPAND "irreflexive?")
          (("1" (SKOLEM 1 "x")
            (("1" (LEMMA "cbu_prec_total_order" ("n0" "x" "n1" "x"))
              (("1" (SMASH) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (EXPAND "transitive?")
          (("2" (SKOLEM 1 ("x" "y" "z"))
            (("2" (FLATTEN)
              (("2" (EXPAND "prec?")
                (("2" (EXPAND "TC" 1)
                  (("2" (FLATTEN)
                    (("2" (INST 2 "y") (("2" (SMASH) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (TC INDUCTIVE-DECL "bool" |relations| NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|cbu_prec_total_order| FORMULA-DECL NIL |blanchet| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/"))
   SHOSTAK))
 (|sender_TCC1| 0
  (|sender_TCC1-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL))
   NIL))
 (|sender_TCC2| 0
  (|sender_TCC2-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL))
   NIL))
 (|sender_TCC3| 0
  (|sender_TCC3-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL))
   NIL))
 (|sender_TCC4| 0
  (|sender_TCC4-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL))
   NIL))
 (|sender_TCC5| 0
  (|sender_TCC5-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL))
   NIL))
 (|sender_TCC6| 0
  (|sender_TCC6-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL))
   NIL))
 (|sender_TCC7| 0
  (|sender_TCC7-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL))
   NIL))
 (|sender_TCC8| 0
  (|sender_TCC8-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL))
   NIL))
 (|sender_TCC9| 0
  (|sender_TCC9-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL))
   NIL))
 (|sender_TCC10| 0
  (|sender_TCC10-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL))
   NIL))
 (|cbu_well_formed_recv| 0
  (|cbu_well_formed_recv-1| NIL 3565616913
   ("" (EXPAND "well_formed_recv?")
    (("" (SKOLEM 1 "n0")
      (("" (FLATTEN)
        (("" (EXPAND "exists1")
          (("" (SPLIT)
            (("1" (INST 1 "sender(n0)")
              (("1" (LEMMA "css_nodes_enumerated" ("n" "n0"))
                (("1" (GRIND) NIL NIL)
                 ("2" (DELETE -1 2)
                  (("2" (TYPEPRED "n0`1")
                    (("2" (TYPEPRED "n0`2") (("2" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "inbnd?") (("2" (PROPAX) NIL NIL)) NIL))
              NIL)
             ("2" (EXPAND "unique?")
              (("2" (SKOLEM 1 ("x" "y"))
                (("2" (LEMMA "css_nodes_enumerated" ("n" "x"))
                  (("1" (LEMMA "css_nodes_enumerated" ("n" "y"))
                    (("1" (DELETE -3) (("1" (GRIND) NIL NIL)) NIL)
                     ("2" (DELETE -1 -2 2)
                      (("2" (TYPEPRED "y`1")
                        (("2" (TYPEPRED "y`2") (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (DELETE -1 -2 2)
                    (("2" (TYPEPRED "x`1")
                      (("2" (TYPEPRED "x`2") (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|exists1| CONST-DECL "bool" |exists1| NIL)
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|sender| CONST-DECL "node(pre_cbu`space)" |blanchet| NIL)
    (|n0| SKOLEM-CONST-DECL "node[mesg, carried_by?](pre_cbu`space)" |blanchet|
     NIL)
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|inbnd?| CONST-DECL "bool" |blanchet| NIL)
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|css_nodes_enumerated| FORMULA-DECL NIL |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/"))
   SHOSTAK))
 (|cbu_TCC1| 0
  (|cbu_TCC1-1| NIL 3565616778
   ("" (EXPAND "bundle?")
    (("" (LEMMA "cbu_well_formed_comm")
      (("" (LEMMA "cbu_well_formed_recv")
        (("" (LEMMA "cbu_acyclic") (("" (SMASH) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|cbu_well_formed_comm| FORMULA-DECL NIL |blanchet| NIL)
    (|cbu_acyclic| FORMULA-DECL NIL |blanchet| NIL)
    (|cbu_well_formed_recv| FORMULA-DECL NIL |blanchet| NIL)
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/"))
   NIL))
 (|invk_ca_never_originates| 0
  (|invk_ca_never_originates-1| NIL 3565681723
   ("" (EXPAND "never_originates?")
    (("" (EXPAND "non")
      (("" (SKOLEM 1 "n")
        (("" (LEMMA "css_nodes_enumerated" ("n" "n"))
          (("1" (GRIND)
            (("1" (DECOMPOSE-EQUALITY -2)
              (("1" (SMASH) NIL NIL)
               ("2" (EXPAND "key") (("2" (PROPAX) NIL NIL)) NIL)
               ("3" (EXPAND "key") (("3" (PROPAX) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (TYPEPRED "n`1")
            (("2" (TYPEPRED "n`2") (("2" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|originates_index?| CONST-DECL "bool" |traces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|key| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|text| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|data| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|tag| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|n| SHARED-ADT-ACCESSOR-DECL
     "[{x: mesg | key(x) OR text(x) OR data(x) OR tag(x)} -> nat]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ik| ADT-CONSTRUCTOR-DECL "[nat -> (ikey?)]" |init_alg|
     "../strand_spaces/")
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cbu| CONST-DECL "bundle" |blanchet| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|css_nodes_enumerated| FORMULA-DECL NIL |blanchet| NIL)
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/"))
   SHOSTAK))
 (|invk_cb_never_originates| 0
  (|invk_cb_never_originates-1| NIL 3565682300
   ("" (EXPAND "never_originates?")
    (("" (EXPAND "non")
      (("" (SKOLEM 1 "n")
        (("" (LEMMA "css_nodes_enumerated" ("n" "n"))
          (("1" (GRIND)
            (("1" (DECOMPOSE-EQUALITY -2)
              (("1" (SMASH) NIL NIL)
               ("2" (EXPAND "key") (("2" (PROPAX) NIL NIL)) NIL)
               ("3" (EXPAND "key") (("3" (PROPAX) NIL NIL)) NIL))
              NIL))
            NIL)
           ("2" (TYPEPRED "n`2")
            (("2" (TYPEPRED "n`1")
              (("2" (DELETE -3) (("2" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|originates_index?| CONST-DECL "bool" |traces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|key| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|text| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|data| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|tag| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|n| SHARED-ADT-ACCESSOR-DECL
     "[{x: mesg | key(x) OR text(x) OR data(x) OR tag(x)} -> nat]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ik| ADT-CONSTRUCTOR-DECL "[nat -> (ikey?)]" |init_alg|
     "../strand_spaces/")
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cbu| CONST-DECL "bundle" |blanchet| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|css_nodes_enumerated| FORMULA-DECL NIL |blanchet| NIL)
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/"))
   SHOSTAK))
 (|cs_uniquely_originates_at_TCC1| 0
  (|cs_uniquely_originates_at_TCC1-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cbu| CONST-DECL "bundle" |blanchet| NIL)
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL))
   NIL))
 (|cs_uniquely_originates_at_TCC2| 0
  (|cs_uniquely_originates_at_TCC2-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|cbu| CONST-DECL "bundle" |blanchet| NIL)
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL))
   NIL))
 (|cs_uniquely_originates_at| 0
  (|cs_uniquely_originates_at-1| NIL 3565682504
   ("" (EXPAND "uniq")
    (("" (SKOLEM 1 "n1")
      (("" (LEMMA "css_nodes_enumerated" ("n" "n1"))
        (("1" (GRIND)
          (("1" (INST -2 "0") (("1" (GRIND) NIL NIL)) NIL)
           ("2" (INST -2 "0") (("2" (GRIND) NIL NIL)) NIL))
          NIL)
         ("2" (DELETE 2)
          (("2" (TYPEPRED "n1`1")
            (("2" (TYPEPRED "n1`2") (("2" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|originates_index?| CONST-DECL "bool" |traces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cbu| CONST-DECL "bundle" |blanchet| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|css_nodes_enumerated| FORMULA-DECL NIL |blanchet| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/"))
   SHOSTAK))
 (|cbu_models_hypothesis_TCC1| 0
  (|cbu_models_hypothesis_TCC1-1| NIL 3565616778 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cbu| CONST-DECL "bundle" |blanchet| NIL)
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL))
   NIL))
 (|cbu_models_hypothesis| 0
  (|cbu_models_hypothesis-1| NIL 3565688748
   ("" (SPLIT)
    (("1" (EXPAND "resp_inst")
      (("1" (EXPAND "pred")
        (("1" (SMASH) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (LEMMA "invk_ca_never_originates") (("2" (PROPAX) NIL NIL)) NIL)
     ("3" (LEMMA "invk_cb_never_originates") (("3" (PROPAX) NIL NIL)) NIL)
     ("4" (LEMMA "cs_uniquely_originates") (("4" (PROPAX) NIL NIL)) NIL))
    NIL)
   ((|invk_cb_never_originates| FORMULA-DECL NIL |blanchet| NIL)
    (|invk_ca_never_originates| FORMULA-DECL NIL |blanchet| NIL)
    (|resp_inst| CONST-DECL "bool" |blanchet| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|simple_inst| FORMULA-DECL NIL |roles| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|cbu| CONST-DECL "bundle" |blanchet| NIL)
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL)
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/"))
   SHOSTAK))
 (|cra_pre_TCC1| 0
  (|cra_pre_TCC1-1| NIL 3589832991 ("" (COND-COVERAGE-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|cbu| CONST-DECL "bundle" |blanchet| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|cra_role_assignment| 0
  (|cra_role_assignment-1| NIL 3589833255
   ("" (EXPAND "role_assignment?")
    (("" (SKOLEM 1 "s")
      (("" (INST 1 "cri(s)")
        (("1" (CASE "s=0 or s=1 or s=2 or s=3 or s=4 or s=5")
          (("1" (EXPAND "cri")
            (("1" (SPLIT)
              (("1" (REPLACE -1)
                (("1" (EXPAND "inst")
                  (("1" (SPLIT)
                    (("1" (GRIND) NIL NIL)
                     ("2" (SKOLEM 1 "j")
                      (("2" (TYPEPRED "j")
                        (("2" (SKOLEM 1 "m")
                          (("2" (TYPEPRED "m")
                            (("2" (EXPAND "simple_role_item")
                              (("2" (LEMMA "has_empty_assumptions")
                                (("2" (INST?)
                                  (("1" (DELETE 1) (("1" (GRIND) NIL NIL)) NIL)
                                   ("2" (DELETE 2) (("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (SKOLEM 1 "j")
                      (("3" (SKOLEM 1 "m")
                        (("3" (TYPEPRED "j")
                          (("3" (TYPEPRED "m")
                            (("3" (EXPAND "simple_role_item")
                              (("3" (DELETE 1)
                                (("3" (LEMMA "has_empty_assumptions")
                                  (("3" (INST?)
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REPLACE -1)
                (("2" (EXPAND "inst")
                  (("2" (SPLIT)
                    (("1" (GRIND) NIL NIL)
                     ("2" (SKOLEM 1 "j")
                      (("2" (SKOLEM 1 "m")
                        (("2" (TYPEPRED "j")
                          (("2" (TYPEPRED "m")
                            (("2" (EXPAND "simple_role_item")
                              (("2" (DELETE 1)
                                (("2" (LEMMA "has_empty_assumptions")
                                  (("2" (INST?)
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (SKOLEM 1 "j")
                      (("3" (SKOLEM 1 "m")
                        (("3" (DELETE 1)
                          (("3" (TYPEPRED "m")
                            (("3" (TYPEPRED "j")
                              (("3" (LEMMA "has_empty_assumptions")
                                (("3" (INST?)
                                  (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (REPLACE -1)
                (("3" (EXPAND "inst")
                  (("3" (SPLIT)
                    (("1" (GRIND) NIL NIL)
                     ("2" (SKOLEM 1 "j")
                      (("2" (SKOLEM 1 "m")
                        (("2" (DELETE -1 1)
                          (("2" (TYPEPRED "m")
                            (("2" (TYPEPRED "j")
                              (("2" (LEMMA "has_empty_assumptions")
                                (("2" (EXPAND "simple_role_item")
                                  (("2" (INST?)
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (SKOLEM 1 "j")
                      (("3" (SKOLEM 1 "m")
                        (("3" (DELETE -1 1)
                          (("3" (TYPEPRED "m")
                            (("3" (TYPEPRED "j")
                              (("3" (EXPAND "simple_role_item")
                                (("3" (LEMMA "has_empty_assumptions")
                                  (("3" (INST?)
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("4" (REPLACE -1)
                (("4" (EXPAND "inst")
                  (("4" (SPLIT)
                    (("1" (GRIND) NIL NIL)
                     ("2" (SKOLEM 1 "j")
                      (("2" (SKOLEM 1 "m")
                        (("2" (DELETE -1 1)
                          (("2" (TYPEPRED "j")
                            (("2" (TYPEPRED "m")
                              (("2" (EXPAND "simple_role_item")
                                (("2" (LEMMA "has_empty_assumptions")
                                  (("2" (INST?)
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (SKOLEM 1 "j")
                      (("3" (SKOLEM 1 "m")
                        (("3" (DELETE -1 1)
                          (("3" (TYPEPRED "j")
                            (("3" (TYPEPRED "m")
                              (("3" (EXPAND "simple_role_item")
                                (("3" (LEMMA "has_empty_assumptions")
                                  (("3" (INST?)
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("5" (REPLACE -1)
                (("5" (EXPAND "inst")
                  (("5" (SPLIT)
                    (("1" (GRIND) NIL NIL)
                     ("2" (SKOLEM 1 "j")
                      (("2" (SKOLEM 1 "m")
                        (("2" (DELETE -1 1)
                          (("2" (TYPEPRED "m")
                            (("2" (TYPEPRED "j")
                              (("2" (EXPAND "simple_role_item")
                                (("2" (LEMMA "has_empty_assumptions")
                                  (("2" (INST?)
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (SKOLEM 1 "j")
                      (("3" (SKOLEM 1 "m")
                        (("3" (DELETE -1 1)
                          (("3" (TYPEPRED "j")
                            (("3" (TYPEPRED "m")
                              (("3" (EXPAND "simple_role_item")
                                (("3" (LEMMA "has_empty_assumptions")
                                  (("3" (INST?)
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("6" (REPLACE -1)
                (("6" (SMASH)
                  (("6" (EXPAND "inst")
                    (("6" (SPLIT)
                      (("1" (GRIND) NIL NIL)
                       ("2" (SKOLEM 1 "j")
                        (("2" (SKOLEM 1 "m")
                          (("2" (DELETE -1 1)
                            (("2" (TYPEPRED "m")
                              (("2" (TYPEPRED "j")
                                (("2" (EXPAND "init_role_item")
                                  (("2" (LEMMA "has_empty_assumptions")
                                    (("2" (INST?)
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (SKOLEM 1 "j")
                        (("3" (SKOLEM 1 "m")
                          (("3" (TYPEPRED "j")
                            (("3" (TYPEPRED "m")
                              (("3" (EXPAND "init_role_item")
                                (("3" (CASE "m=cs and j=0")
                                  (("1" (FLATTEN)
                                    (("1" (REPLACE -1)
                                      (("1" (REPLACE -2)
                                        (("1" (EXPAND "init_runique")
                                          (("1" (DELETE -)
                                            (("1" (EXPAND "uniq")
                                              (("1" (SKOLEM 1 "n1")
                                                (("1"
                                                  (LEMMA
                                                   "css_nodes_enumerated")
                                                  (("1" (INST?)
                                                    (("1" (GRIND)
                                                      (("1" (INST -2 "0")
                                                        (("1" (GRIND) NIL NIL))
                                                        NIL)
                                                       ("2" (INST -2 "0")
                                                        (("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (TYPEPRED "n1`1")
                                                      (("2" (TYPEPRED "n1`2")
                                                        (("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (DELETE 2 -4)
                                    (("2" (EXPAND "init_runique")
                                      (("2" (CASE "j=1")
                                        (("1" (REPLACE -1)
                                          (("1" (GRIND) NIL NIL)) NIL)
                                         ("2" (CASE-REPLACE "j=0")
                                          (("1" (GRIND) NIL NIL)
                                           ("2" (TYPEPRED "j")
                                            (("2" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (DELETE 2) (("2" (TYPEPRED "s") (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (CASE "s=0 or s=1 or s=2 or s=3 or s=4 or s=5")
          (("1" (SPLIT)
            (("1" (REPLACE -1)
              (("1" (DELETE -1)
                (("1" (EXPAND "cra_pre")
                  (("1" (EXPAND "cri")
                    (("1" (EXPAND "resp_role")
                      (("1" (INST 1 "ca" "cb" "cs" "cd") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REPLACE -1)
              (("2" (EXPAND "cra_pre")
                (("2" (EXPAND "cri")
                  (("2" (EXPAND "create_role") (("2" (INST 1 "cb") NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (REPLACE -1)
              (("3" (EXPAND "cra_pre")
                (("3" (EXPAND "cri")
                  (("3" (EXPAND "enc_role")
                    (("3" (INST?)
                      (("1" (TYPEPRED "cb") (("1" (GRIND) NIL NIL)) NIL)
                       ("2" (TYPEPRED "ca") (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("4" (REPLACE -1)
              (("4" (EXPAND "cra_pre")
                (("4" (EXPAND "create_role")
                  (("4" (EXPAND "cri")
                    (("4" (INST?)
                      (("1" (TYPEPRED "cb1") (("1" (GRIND) NIL NIL)) NIL)
                       ("2" (TYPEPRED "cb1") (("2" (SMASH) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("5" (REPLACE -1)
              (("5" (EXPAND "cra_pre")
                (("5" (EXPAND "dec_role")
                  (("5" (EXPAND "cri")
                    (("5" (INST?)
                      (("1" (TYPEPRED "cb1") (("1" (GRIND) NIL NIL)) NIL)
                       ("2" (TYPEPRED "ca") (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("6" (REPLACE -1)
              (("6" (EXPAND "cra_pre")
                (("6" (EXPAND "init_role")
                  (("6" (EXPAND "cri") (("6" (INST?) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (DELETE 2) (("2" (TYPEPRED "s") (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|init_role| CONST-DECL "bool" |blanchet| NIL)
    (|dec_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|enc_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|create_role| CONST-DECL "bool" |adversary| "../strand_spaces/")
    (|resp_role| CONST-DECL "bool" |blanchet| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|j| SKOLEM-CONST-DECL
     "below(length(finseq_appl[trace[mesg, carried_by?]](cbu`space)(0)))"
     |blanchet| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|j| SKOLEM-CONST-DECL
     "below(length(finseq_appl[trace[mesg, carried_by?]](cbu`space)(0)))"
     |blanchet| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|has_empty_assumptions| FORMULA-DECL NIL |roles| "../strand_spaces/")
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|simple_role_item| CONST-DECL "role_item" |roles| "../strand_spaces/")
    (|no_annotations| DEF-DECL "annotations" |roles| "../strand_spaces/")
    (|no_assumptions| DEF-DECL "assumptions" |roles| "../strand_spaces/")
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL)
    (|j| SKOLEM-CONST-DECL
     "below(length(finseq_appl[trace[mesg, carried_by?]](cbu`space)(1)))"
     |blanchet| NIL)
    (|j| SKOLEM-CONST-DECL
     "below(length(finseq_appl[trace[mesg, carried_by?]](cbu`space)(1)))"
     |blanchet| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|atom| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|atom?| CONST-DECL "bool" |init_alg| "../strand_spaces/")
    (|j| SKOLEM-CONST-DECL
     "below(length(finseq_appl[trace[mesg, carried_by?]](cbu`space)(2)))"
     |blanchet| NIL)
    (|j| SKOLEM-CONST-DECL
     "below(length(finseq_appl[trace[mesg, carried_by?]](cbu`space)(2)))"
     |blanchet| NIL)
    (|en| ADT-CONSTRUCTOR-DECL "[[mesg, key] -> (enc?)]" |init_alg|
     "../strand_spaces/")
    (|enc?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|key| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|hash?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|j| SKOLEM-CONST-DECL
     "below(length(finseq_appl[trace[mesg, carried_by?]](cbu`space)(3)))"
     |blanchet| NIL)
    (|j| SKOLEM-CONST-DECL
     "below(length(finseq_appl[trace[mesg, carried_by?]](cbu`space)(3)))"
     |blanchet| NIL)
    (|j| SKOLEM-CONST-DECL
     "below(length(finseq_appl[trace[mesg, carried_by?]](cbu`space)(4)))"
     |blanchet| NIL)
    (|j| SKOLEM-CONST-DECL
     "below(length(finseq_appl[trace[mesg, carried_by?]](cbu`space)(4)))"
     |blanchet| NIL)
    (|init_runique| CONST-DECL "assumptions" |blanchet| NIL)
    (|init_role_item| CONST-DECL "role_item" |blanchet| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|j| SKOLEM-CONST-DECL
     "below(length(finseq_appl[trace[mesg, carried_by?]](cbu`space)(5)))"
     |blanchet| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|css_nodes_enumerated| FORMULA-DECL NIL |blanchet| NIL)
    (|originates_index?| CONST-DECL "bool" |traces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|n1| SKOLEM-CONST-DECL "node[mesg, carried_by?](cbu`space)" |blanchet|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|cbu| CONST-DECL "bundle" |blanchet| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|anno| TYPE-DECL NIL |blanchet| NIL) (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|cra_pre| CONST-DECL "role" |blanchet| NIL)
    (|s| SKOLEM-CONST-DECL "strand[mesg, carried_by?](cbu`space)" |blanchet|
     NIL)
    (|cri| CONST-DECL "role_item" |blanchet| NIL)
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/"))
   SHOSTAK))
 (|cra_TCC1| 0
  (|cra_TCC1-1| NIL 3589832991
   ("" (LEMMA "cra_role_assignment") (("" (PROPAX) NIL NIL)) NIL)
   ((|cra_role_assignment| FORMULA-DECL NIL |blanchet| NIL)) NIL))
 (|cpa_protocol_assignment| 0
  (|cpa_protocol_assignment-1| NIL 3589833212
   ("" (EXPAND "protocol_assignment?")
    (("" (SKOLEM 1 "s") (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|prot| CONST-DECL "protocol" |blanchet| NIL)
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|anno| TYPE-DECL NIL |blanchet| NIL)
    (|cra_pre| CONST-DECL "role" |blanchet| NIL)
    (|cra| CONST-DECL "role_assignment(cbu)" |blanchet| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/"))
   SHOSTAK))
 (|cpa_TCC1| 0
  (|cpa_TCC1-1| NIL 3589832991
   ("" (LEMMA "cpa_protocol_assignment") (("" (PROPAX) NIL NIL)) NIL)
   ((|cpa_protocol_assignment| FORMULA-DECL NIL |blanchet| NIL)) NIL))
 (|false_security_goal| 0
  (|false_security_goal-1| NIL 3565689480
   ("" (LEMMA "cbu_models_hypothesis")
    (("" (FLATTEN)
      (("" (INST?)
        (("1" (SMASH)
          (("1" (DELETE -2 -3)
            (("1" (SKOLEM -2 ("a1" "s1" "d1" "z1"))
              (("1" (EXPAND "resp_inst")
                (("1" (EXPAND "init_inst")
                  (("1" (EXPAND "pred")
                    (("1" (FLATTEN)
                      (("1" (EXPAND "inst")
                        (("1" (FLATTEN)
                          (("1" (DELETE -6 -7 -2 -3)
                            (("1" (CASE-REPLACE "z1=0")
                              (("1" (GRIND) NIL NIL)
                               ("2" (DELETE -1 -2)
                                (("2"
                                  (CASE
                                      "z1 = 1 or z1 = 2 or z1 = 3 or z1 = 4 or z1 = 5")
                                  (("1" (GRIND)
                                    (("1" (DELETE -1 -3 1)
                                      (("1" (INST -1 "0")
                                        (("1" (DECOMPOSE-EQUALITY -1)
                                          (("1" (DECOMPOSE-EQUALITY) NIL NIL)
                                           ("2" (DECOMPOSE-EQUALITY) NIL NIL)
                                           ("3" (DECOMPOSE-EQUALITY) NIL NIL)
                                           ("4" (DECOMPOSE-EQUALITY) NIL NIL)
                                           ("5" (DECOMPOSE-EQUALITY) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (DELETE -1 -3 1)
                                      (("2" (INST -1 "0")
                                        (("2" (DECOMPOSE-EQUALITY)
                                          (("1" (DECOMPOSE-EQUALITY) NIL NIL)
                                           ("2" (DECOMPOSE-EQUALITY) NIL NIL)
                                           ("3" (DECOMPOSE-EQUALITY) NIL NIL)
                                           ("4" (DECOMPOSE-EQUALITY) NIL NIL)
                                           ("5" (DECOMPOSE-EQUALITY) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (DELETE -1 -3 1)
                                      (("3" (INST -1 "0")
                                        (("3" (TYPEPRED "a1")
                                          (("3" (SMASH)
                                            (("1" (DECOMPOSE-EQUALITY)
                                              (("1" (DECOMPOSE-EQUALITY)
                                                (("1" (DECOMPOSE-EQUALITY -2)
                                                  (("1" (SMASH) NIL NIL)
                                                   ("2" (EXPAND "key")
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL)
                                                   ("3" (EXPAND "key")
                                                    (("3" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (DECOMPOSE-EQUALITY -2)
                                              (("2" (DECOMPOSE-EQUALITY)
                                                (("2" (DECOMPOSE-EQUALITY -2)
                                                  (("1" (SMASH) NIL NIL)
                                                   ("2" (EXPAND "key")
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL)
                                                   ("3" (EXPAND "key")
                                                    (("3" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (GRIND) (("2" (INST -1 "0") NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (EXPAND "run?") (("2" (INST 1 "cpa") NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|cpa| CONST-DECL "protocol_assignment(prot, cbu)" |blanchet| NIL)
    (|init_inst| CONST-DECL "bool" |blanchet| NIL)
    (|invk| CONST-DECL "key" |init_alg| "../strand_spaces/")
    (|singleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|add| CONST-DECL "finseq[T]" |more_finseq| NIL)
    (|doubleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|resp_trace| CONST-DECL "trace" |blanchet| NIL)
    (|create_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|tripleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|enc_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|cb1| CONST-DECL "akey" |blanchet| NIL)
    (|dec_trace| CONST-DECL "trace" |adversary| "../strand_spaces/")
    (|init_trace| CONST-DECL "trace" |blanchet| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (^^ CONST-DECL "finseq" |finite_sequences| NIL)
    (|sextupleton_seq| CONST-DECL "nmtfinseq" |nonempty_finite_sequences|
     "../strand_spaces/")
    (|css| CONST-DECL "strand_space" |blanchet| NIL)
    (|pre_cbu| CONST-DECL "pre_bundle" |blanchet| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|no_assumptions| DEF-DECL "assumptions" |roles| "../strand_spaces/")
    (|no_annotations| DEF-DECL "annotations" |roles| "../strand_spaces/")
    (|simple_role_item| CONST-DECL "role_item" |roles| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|init_runique| CONST-DECL "assumptions" |blanchet| NIL)
    (|init_role_item| CONST-DECL "role_item" |blanchet| NIL)
    (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs|
     NIL)
    (|posint_min| APPLICATION-JUDGEMENT "{k: posint | k <= i AND k <= j}"
     |real_defs| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|n| SHARED-ADT-ACCESSOR-DECL
     "[{x: mesg | key(x) OR text(x) OR data(x) OR tag(x)} -> nat]" |init_alg|
     "../strand_spaces/")
    (|tag| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|data| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|text| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (|key| ADT-DEF-DECL "boolean" |init_alg| "../strand_spaces/")
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|plt| ADT-ACCESSOR-DECL "[(enc?) -> mesg]" |init_alg| "../strand_spaces/")
    (|ky| ADT-ACCESSOR-DECL "[(enc?) -> key]" |init_alg| "../strand_spaces/")
    (|hs| ADT-CONSTRUCTOR-DECL "[mesg -> (hash?)]" |init_alg|
     "../strand_spaces/")
    (|sk| ADT-CONSTRUCTOR-DECL "[nat -> (skey?)]" |init_alg|
     "../strand_spaces/")
    (|ik| ADT-CONSTRUCTOR-DECL "[nat -> (ikey?)]" |init_alg|
     "../strand_spaces/")
    (|en| ADT-CONSTRUCTOR-DECL "[[mesg, key] -> (enc?)]" |init_alg|
     "../strand_spaces/")
    (|enc?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|key| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|hash?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ak| ADT-CONSTRUCTOR-DECL "[nat -> (akey?)]" |init_alg|
     "../strand_spaces/")
    (|send| ADT-CONSTRUCTOR-DECL "[mesg -> (send?)]" |traces|
     "../strand_spaces/")
    (|send?| ADT-RECOGNIZER-DECL "[event -> boolean]" |traces|
     "../strand_spaces/")
    (|t| SHARED-ADT-ACCESSOR-DECL "[event -> mesg]" |traces|
     "../strand_spaces/")
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|pair?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|tag?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|n| ADT-ACCESSOR-DECL "[key -> mesg]" |init_alg| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pred| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|resp_inst| CONST-DECL "bool" |blanchet| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|anno| TYPE-DECL NIL |blanchet| NIL) (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|run?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|prot| CONST-DECL "protocol" |blanchet| NIL)
    (|cbu| CONST-DECL "bundle" |blanchet| NIL)
    (|run| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|cd| CONST-DECL "data" |blanchet| NIL)
    (|data| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|data?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|cs| CONST-DECL "skey" |blanchet| NIL)
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|cb| CONST-DECL "akey" |blanchet| NIL)
    (|ca| CONST-DECL "akey" |blanchet| NIL)
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cbu_models_hypothesis| FORMULA-DECL NIL |blanchet| NIL))
   SHOSTAK)))

