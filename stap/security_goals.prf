(|security_goals|
 (|desired_property_TCC1| 0
  (|desired_property_TCC1-1| NIL 3582024823 ("" (SUBTYPE-TCC) NIL NIL)
   ((|annotations| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|inst| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|state| TYPE-DECL NIL |tpm| NIL) (|trans| CONST-DECL "bool" |tpm| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|uniq| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|non| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|originates_at?| CONST-DECL "bool" |strand_spaces| "../strand_spaces/")
    (|prefix?| CONST-DECL "bool" |more_finseq| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|desired| CONST-DECL "tag" |annotated_roles| NIL)
    (|prec?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|event_at| CONST-DECL "event" |strand_spaces| "../strand_spaces/")
    (|well_formed_comm?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|irreflexive?| CONST-DECL "bool" |relations| NIL)
    (|transitive?| CONST-DECL "bool" |relations| NIL)
    (|strict_order?| CONST-DECL "bool" |orders| NIL)
    (|acyclic?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|unique?| CONST-DECL "bool" |exists1| NIL)
    (|exists1| CONST-DECL "bool" |exists1| NIL)
    (|well_formed_recv?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|adversary_roles| CONST-DECL "protocol" |adversary| "../strand_spaces/")
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|anno_node?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL))
   NIL))
 (|desired_shape| 0
  (|desired_shape-1| NIL 3580218622
   ("" (SKOLEM 1 ("bu" "ra"))
    (("" (FLATTEN)
      (("" (SKOLEM!)
        (("" (SKOLEM!)
          (("" (FLATTEN)
            (("" (EXPAND "verifier_shape")
              (("" (EXPAND "verifier_pov")
                (("" (FLATTEN)
                  (("" (LEMMA "tpm_power_on_inst_role")
                    (("" (INST?)
                      (("" (INST?)
                        (("" (LEMMA "tpm_power_on_inst_anno")
                          (("" (INST?)
                            (("" (INST?)
                              (("" (LEMMA "tpm_decrypt_inst_role")
                                (("" (INST?)
                                  (("" (INST?)
                                    (("" (LEMMA "tpm_decrypt_inst_anno")
                                      (("" (INST?)
                                        (("" (INST?)
                                          ((""
                                            (CASE
                                                "anno_node?(bu,ra)(z2!1, 3) and anno_node?(bu,ra)(z4!1, 1)")
                                            (("1"
                                              (LEMMA "stable_boot_extend_anno")
                                              (("1" (INST? -1 :WHERE -5)
                                                (("1" (INST? -1 :WHERE -3)
                                                  (("1" (INST -1 "desired")
                                                    (("1"
                                                      (EXPAND "desired_pcr")
                                                      (("1" (SMASH)
                                                        (("1" (SKOLEM -4 "w")
                                                          (("1" (SMASH)
                                                            (("1"
                                                              (EXPAND
                                                               "desired_property")
                                                              (("1"
                                                                (INST 1
                                                                 "(z4!1, 1)"
                                                                 "w"
                                                                 "(z2!1, 3)")
                                                                (("1" (SMASH)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (DELETE - 2)
                                                          (("2"
                                                            (EXPAND "subset?")
                                                            (("2" (SKOLEM!)
                                                              (("2"
                                                                (EXPAND
                                                                 "member")
                                                                (("2" (SMASH)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("3" (DELETE - 2)
                                                          (("3"
                                                            (EXPAND "subset?")
                                                            (("3" (SKOLEM!)
                                                              (("3"
                                                                (EXPAND
                                                                 "member")
                                                                (("3" (SMASH)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("4" (DELETE 2)
                                                          (("4"
                                                            (LEMMA
                                                             "strand_succession_prec"
                                                             ("b" "bu" "n0"
                                                              "(z3!1,1)" "n1"
                                                              "(z3!1,2)"))
                                                            (("4"
                                                              (LEMMA
                                                               "strand_succession_prec"
                                                               ("b" "bu" "n0"
                                                                "(z2!1,2)" "n1"
                                                                "(z2!1,3)"))
                                                              (("4" (SMASH)
                                                                (("4"
                                                                  (LEMMA
                                                                   "prec_is_transitive")
                                                                  (("4"
                                                                    (INST-CP -1
                                                                     "bu"
                                                                     "(z4!1, 1)"
                                                                     "(z3!1,1)"
                                                                     "(z3!1,2)")
                                                                    (("4"
                                                                      (INST-CP
                                                                       -1 "bu"
                                                                       "(z4!1, 1)"
                                                                       "(z3!1,2)"
                                                                       "(z2!1,2)")
                                                                      (("4"
                                                                        (INST-CP
                                                                         -1
                                                                         "bu"
                                                                         "(z4!1, 1)"
                                                                         "(z2!1,2)"
                                                                         "(z2!1,3)")
                                                                        (("4"
                                                                          (SMASH)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "anno_node?")
                                                    (("2" (INST?)
                                                      (("2" (SMASH) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (EXPAND "anno_node?")
                                                  (("2" (INST?)
                                                    (("2" (SMASH) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SMASH)
                                              (("1" (EXPAND "anno_node?")
                                                (("1" (INST?) NIL NIL)) NIL)
                                               ("2" (EXPAND "anno_node?")
                                                (("2" (INST?) NIL NIL)) NIL))
                                              NIL)
                                             ("3" (FLATTEN)
                                              (("3" (SMASH) NIL NIL)) NIL)
                                             ("4" (SMASH) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|verifier_shape| CONST-DECL "bool" |shape_analysis_sentences| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|tpm_power_on_inst_anno| FORMULA-DECL NIL |state| NIL)
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|desired_pcr| CONST-DECL "mesg" |shape_analysis_sentences| NIL)
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|tpm_decrypt_inst_anno| FORMULA-DECL NIL |state| NIL)
    (|stable_boot_extend_anno| FORMULA-DECL NIL |state| NIL)
    (|pcr| DEF-DECL "mesg" |tpm| NIL)
    (|z2!1| SKOLEM-CONST-DECL "strand[mesg, carried_by?](bu`space)"
     |security_goals| NIL)
    (|prec_is_transitive| FORMULA-DECL NIL |bundles| "../strand_spaces/")
    (|strand_succession_prec| FORMULA-DECL NIL |bundles| "../strand_spaces/")
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|desired_property| CONST-DECL "bool" |security_goals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|tpm_extend_inst_rew| FORMULA-DECL NIL |strands| NIL)
    (|tpm_create_key_inst_rew| FORMULA-DECL NIL |strands| NIL)
    (|verifier_inst_rew| FORMULA-DECL NIL |strands| NIL)
    (|tpm_power_on_inst_rew| FORMULA-DECL NIL |strands| NIL)
    (|tpm_decrypt_inst_rew| FORMULA-DECL NIL |strands| NIL)
    (|pcr_injective| FORMULA-DECL NIL |tpm| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|tag?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|tag| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|desired| CONST-DECL "tag" |annotated_roles| NIL)
    (|z4!1| SKOLEM-CONST-DECL "strand[mesg, carried_by?](bu`space)"
     |security_goals| NIL)
    (|ra| SKOLEM-CONST-DECL "assignment(bu)" |security_goals| NIL)
    (|bu| SKOLEM-CONST-DECL "bundle[mesg, carried_by?]" |security_goals| NIL)
    (|boot?| ADT-RECOGNIZER-DECL "[state -> boolean]" |tpm| NIL)
    (|boot| ADT-CONSTRUCTOR-DECL "(boot?)" |tpm| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|event| TYPE-DECL NIL |traces| "../strand_spaces/")
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|index| NONEMPTY-TYPE-EQ-DECL NIL |nonempty_finite_sequences|
     "../strand_spaces/")
    (|anno_node?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|tpm_decrypt_inst_role| FORMULA-DECL NIL |state| NIL)
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL) (|state| TYPE-DECL NIL |tpm| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|tpm_power_on_inst_role| FORMULA-DECL NIL |state| NIL)
    (|verifier_pov| CONST-DECL "bool" |shape_analysis_sentences| NIL))
   SHOSTAK))
 (|desired_security_goal| 0
  (|desired_security_goal-1| NIL 3580216992
   ("" (SKOLEM!)
    (("" (FLATTEN)
      (("" (SKOLEM!)
        (("" (FLATTEN)
          (("" (LEMMA "stap_shape_analysis_sentence")
            (("" (INST?)
              (("1" (SPLIT)
                (("1" (SKOLEM!)
                  (("1" (LEMMA "desired_shape")
                    (("1" (INST?)
                      (("1" (SPLIT)
                        (("1" (INST?)
                          (("1" (SPLIT)
                            (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL)
               ("2" (EXPAND "run?")
                (("2" (INST?)
                  (("2" (EXPAND "protocol_assignment?")
                    (("2" (TYPEPRED "ra!1") (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|run| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|strand| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|akey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|ikey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|akey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|text?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|text| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|bu!1| SKOLEM-CONST-DECL "bundle[mesg, carried_by?]" |security_goals| NIL)
    (|annotated_roles| CONST-DECL "protocol" |annotated_roles| NIL)
    (|run?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|bundle?| CONST-DECL "bool" |bundles| "../strand_spaces/")
    (|pre_bundle| TYPE-EQ-DECL NIL |bundles| "../strand_spaces/")
    (|node| NONEMPTY-TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|strand_space| TYPE-EQ-DECL NIL |strand_spaces| "../strand_spaces/")
    (|protocol| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|role| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_item| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|assumptions| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|annotations| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|finite_sequence| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|anno| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|trans| TYPE-EQ-DECL NIL |paths| "../state_spaces/")
    (|trans| CONST-DECL "bool" |tpm| NIL) (|state| TYPE-DECL NIL |tpm| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../strand_spaces/")
    (|carried_by?| DEF-DECL "bool" |init_alg| "../strand_spaces/")
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|mesg| TYPE-DECL NIL |init_alg| "../strand_spaces/")
    (|assignment| TYPE-EQ-DECL NIL |annotated_roles| NIL)
    (|protocol_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|role_assignment?| CONST-DECL "bool" |roles| "../strand_spaces/")
    (|pre_role_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|skey| TYPE-EQ-DECL NIL |init_alg| "../strand_spaces/")
    (|skey?| ADT-RECOGNIZER-DECL "[mesg -> boolean]" |init_alg|
     "../strand_spaces/")
    (|desired_shape| FORMULA-DECL NIL |security_goals| NIL)
    (|protocol_assignment| TYPE-EQ-DECL NIL |roles| "../strand_spaces/")
    (|stap_shape_analysis_sentence| FORMULA-DECL NIL |shape_analysis_sentences|
     NIL))
   SHOSTAK)))

