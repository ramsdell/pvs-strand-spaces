% Events and Traces

% John D. Ramsdell -- The MITRE Corporation -- September 2014

% This theory defines events and traces, along with some predicates
% about the relation of a message to a trace.  In particular, a message
% may originate in a trace, which means the message is carried by some
% event and the first event in the trace in which it is carried is
% a send.  The concepts are defined by functions are not true
% predicates, because when true, the position in the trace that
% demonstrates the property is returned.

% Copyright (C) 2014 The MITRE Corporation.
% All rights reserved.
% See ../license.txt for terms.

traces[mesg: type, carried_by?: [mesg, mesg -> bool]]: theory
begin

  strand_spaces: library = "../strand_spaces"
  importing strand_spaces@nonempty_finite_sequences

  tran: type = [mesg, mesg]

  event: datatype
  begin
    recv(t: mesg): recv?             % Inbound message
    send(t: mesg): send?             % Outbound message
    tran(p: tran): tran?             % State transition
    obsv(t: mesg): obsv?             % State observation
    init(t: mesg): init?             % State initialization
  end event

  has_current?(e: event): bool =
    tran?(e) or obsv?(e)

  has_next?(e: event): bool =
    tran?(e) or obsv?(e) or init?(e)

  cur_state(e: (has_current?)): mesg =
    cases e of
      tran(p): p`1,
      obsv(t): t
    endcases

  nxt_state(e: (has_next?)): mesg =
    cases e of
      tran(p): p`2,
      obsv(t): t,
      init(t): t
    endcases

  carried_by_event?(m: mesg, e: event): bool =
    cases e of
      tran(p): carried_by?(m, p`1) or carried_by?(m, p`2)
      else carried_by?(m, t(e))
   endcases

  % A traces is a nonempty finite sequence of events.
  trace: type = nonempty_finite_sequence[event]

  % Origination

  % In trace c, does m originate at index i?
  originates_index?(c: trace, m: mesg, i: index(c)): bool =
    cases c(i) of
      send(t):
        carried_by?(m, t) and
        forall(j: below(i)):
          not carried_by_event?(m, c(j)),
      tran(p):
        carried_by?(m, p`2) and
        not carried_by?(m, p`1) and
        forall(j: below(i)):
          not carried_by_event?(m, c(j)),
      init(t):
        carried_by?(m, t) and
        forall(j: below(i)):
          not carried_by_event?(m, c(j))
      else
        false
    endcases

end traces
