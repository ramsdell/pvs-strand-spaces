% Embeddings of traces

% John D. Ramsdell -- The MITRE Corporation -- September 2014

% Copyright (C) 2014 The MITRE Corporation.
% All rights reserved.
% See ../license.txt for terms.

embeddings: theory
begin

  importing increasing
  importing positions
  importing strand_spaces@traces[mesg, carried_by?]

  % A trace map is an increasing function that respects event orientation
  tmap?(c0, c1: trace)(f: (increasing?(c0`length, c1`length))): bool =
    forall(i: below[c0`length]):
      recv?(c0(i)) iff recv?(c1(f(i)))

  tmap(c0, c1: trace): type = (tmap?(c0, c1))

  % Two messages have the same form if they are both pairs or
  % encryptions, or they are the same atom.
  same_form?(m0, m1: mesg): bool =
    if pair?(m0) then
      pair?(m1)
    elsif enc?(m0) then
      enc?(m1)
    else
      m0 = m1
    endif

  % A position map ensures the source term has the same form as the
  % destination term, and term struction is preserved by the map.
  pmap?(c0, c1: trace, tm: tmap(c0, c1))
       (pm: [i: below[c0`length] ->
             [position(t(c0(i))) ->
              position(t(c1(tm(i))))]]): bool =
    (forall(i: below[c0`length], p: position(t(c0(i)))):
      same_form?(term_at(t(c0(i)), p),
                 term_at(t(c1(tm(i))), pm(i)(p)))) and
    forall(i: below[c0`length], p0, p1: position(t(c0(i)))):
      prefix?(p0, p1) implies
        prefix?(pm(i)(p0), pm(i)(p1))

  pmap(c0, c1: trace, tm: tmap(c0, c1)): type = (pmap?(c0, c1, tm))

  % An embedding is a trace map and a position map
  embedding(c0, c1: trace): type =
    [# tmap: tmap(c0, c1),
       pmap: pmap(c0, c1, tmap) #]

end embeddings
